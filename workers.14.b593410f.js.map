{"version":3,"sources":["webpack:///index.ts","webpack:///comlink.ts","webpack:///endpoint.ts","webpack:///jsonRPCLocalProvider.init.ts","webpack:///FullNode.ts","webpack:///constants.ts","webpack:///./packages/neo-one-node-storage-levelup/lib/index.js","webpack:///./packages/neo-one-node-storage-levelup/lib/levelUpStorage.js","webpack:///./packages/neo-one-node-storage-common/lib/keys.js","webpack:///./packages/neo-one-node-storage-levelup/lib/convertChange.js","webpack:///./packages/neo-one-node-storage-levelup/lib/read.js","webpack:///./packages/neo-one-node-storage-levelup/lib/streamToObservable.js","webpack:///./packages/neo-one-node-blockchain/lib/index.js","webpack:///./packages/neo-one-node-blockchain/lib/Blockchain.js","webpack:///./packages/neo-one-logger/lib/loggers.js","webpack:///./packages/neo-one-logger-config/lib/index.js","webpack:///./packages/neo-one-logger-config/lib/pretty.js","webpack:///./packages/neo-one-node-blockchain/lib/ValidatorCache.js","webpack:///./packages/neo-one-node-blockchain/lib/WriteBatchBlockchain.js","webpack:///./packages/neo-one-node-blockchain/lib/StorageCache.js","webpack:///./packages/neo-one-node-protocol/lib/index.js","webpack:///./packages/neo-one-node-protocol/lib/Node.js","webpack:///./packages/neo-one-node-consensus/lib/index.js","webpack:///./packages/neo-one-node-consensus/lib/Consensus.js","webpack:///./packages/neo-one-node-consensus/lib/context/RequestReceivedContext.js","webpack:///./packages/neo-one-node-consensus/lib/context/cloneBlockSent.js","webpack:///./packages/neo-one-node-consensus/lib/context/cloneInitial.js","webpack:///./packages/neo-one-node-consensus/lib/ConsensusContext.js","webpack:///./packages/neo-one-node-consensus/lib/ConsensusQueue.js","webpack:///./packages/neo-one-node-consensus/lib/handleConsensusPayload.js","webpack:///./packages/neo-one-node-consensus/lib/handlePersistBlock.js","webpack:///./packages/neo-one-node-consensus/lib/handleTransactionReceived.js","webpack:///./packages/neo-one-node-consensus/lib/runConsensus.js","webpack:///./packages/neo-one-node-protocol/lib/errors.js","webpack:///./packages/neo-one-node-protocol/lib/Message.js","webpack:///./packages/neo-one-node-protocol/lib/payload/AddrPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/FilterAddPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/FilterLoadPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/GetBlocksPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/HeadersPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/InvPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/MerkleBlockPayload.js","webpack:///./packages/neo-one-node-protocol/lib/payload/VersionPayload.js","webpack:///Network.ts","webpack:///./packages/neo-one-node-rpc-handler/lib/index.js","webpack:///./packages/neo-one-node-rpc-handler/lib/createHandler.js","webpack:///./packages/neo-one-node-consensus/lib/common.js","webpack:///./packages/neo-one-node-consensus/lib/context/Context.js","webpack:///JSONRPCLocalProvider.ts","webpack:///./packages/neo-one-logger/lib/index.js","webpack:///./packages/neo-one-node-consensus/lib/context/index.js","webpack:///./packages/neo-one-node-consensus/lib/context/HeaderContext.js","webpack:///./packages/neo-one-node-storage-levelup/lib/errors.js","webpack:///./packages/neo-one-node-storage-common/lib/index.js","webpack:///./packages/neo-one-node-storage-levelup/lib/common.js","webpack:///./packages/neo-one-node-blockchain/lib/errors.js","webpack:///./packages/neo-one-node-blockchain/lib/getValidators.js","webpack:///./packages/neo-one-node-blockchain/lib/wrapExecuteScripts.js","webpack:///./packages/neo-one-node-consensus/lib/context/BlockSentContext.js","webpack:///./packages/neo-one-node-consensus/lib/context/InitialContext.js","webpack:///./packages/neo-one-node-consensus/lib/context/SignatureSentContext.js","webpack:///./packages/neo-one-node-consensus/lib/context/RequestSentContext.js","webpack:///./packages/neo-one-node-consensus/lib/context/ViewChangingContext.js","webpack:///./packages/neo-one-node-protocol/lib/Command.js","webpack:///./packages/neo-one-node-protocol/lib/payload/index.js","webpack:///./packages/neo-one-node-protocol/lib/payload/NetworkAddress.js","webpack:///./packages/neo-one-node-protocol/lib/payload/InventoryType.js"],"names":["TRANSFERABLE_TYPES","ArrayBuffer","MessagePort","uid","Math","floor","random","Number","MAX_SAFE_INTEGER","proxyValueSymbol","Symbol","throwSymbol","transferHandlers","Map","canHandle","obj","Function","serialize","port1","port2","MessageChannel","expose","deserialize","proxy","Error","message","stack","Object","assign","pingPongMessageCounter","endpoint","target","isWindow","windowEndpoint","isEndpoint","activateEndpoint","cbProxy","cb","callPath","Proxy","construct","_target","argumentsList","type","apply","_thisArg","length","slice","property","then","r","Promise","resolve","bind","concat","set","value","_proxy","async","args","irequest","map","wrapValue","unwrapValue","msg","transferables","id","attachMessageHandler","handler","event","data","f","removeEventListener","detachMessageHandler","postMessage","pingPongMessage","transferableProperties","proxyValue","rootObj","iresult","that","reduce","propName","e","makeInvocationResult","arg","key","transferHandler","wrappedChildren","iterateUnhandledProperties","handleProperty","path","visited","WeakSet","has","add","isView","keys","push","wrappedValue","wrappedChild","get","isRawWrappedValue","wrappedChildValue","join","newValue","replaceValueInObjectAtPath","newVal","lastKey","w","self","constructor","name","addEventListener","transfer","isMessagePort","start","every","prop","isTransferable","thing","some","iterateAllProperties","getEndpoint","endpointIn","close","isWorker","worker","terminate","activate","endpointEndpoint","FullNode","options","developerClient","build","this","startPromise","startInternal","undefined","mutableDisposable","primaryPrivateKey","stringToPrivateKey","PRIVATE_NET_PRIVATE_KEY","primaryPublicKey","stringToECPoint","PRIVATE_NET_PUBLIC_KEY","addPublicKey","settings","address","uInt160ToString","privateKeyToScriptHash","standbyValidators","ecPointToString","privateNet","storage","db","context","messageMagic","blockchain","create","vm","nodeOptions","consensus","privateKey","privateKeyToString","node","createNetwork","handleResetProject","reset","handleGetNEOTrackerURL","updateSettings","secondsPerBlock","constants","defineProperty","exports","levelUpStorage_1","levelUpStorage","tslib_1","node_core_1","node_storage_common_1","common","__importStar","convertChange_1","errors_1","read","getHash","hashOrIndex","hash","result","serializeHeaderIndexHashKey","deserializeHeaderHash","error","notFound","KeyNotFoundError","headerBase","createReadStorage","serializeKey","typeKeyToSerializeKey","header","deserializeValue","buffer","Header","deserializeWire","getHeader","tryGet","createTryGet","tryGetLatest","createTryGetLatest","latestKey","maxHeaderHashKey","deserializeResult","blockBase","block","Block","getBlock","maxBlockHashKey","deserializeBlockHash","transaction","deserializeTransactionWire","output","Output","blockData","BlockData","account","createReadAllStorage","minKey","accountMinKey","maxKey","accountMaxKey","Account","accountUnclaimed","createReadGetAllStorage","getMinKey","getAccountUnclaimedKeyMin","getMaxKey","getAccountUnclaimedKeyMax","AccountUnclaimed","accountUnspent","getAccountUnspentKeyMin","getAccountUnspentKeyMax","AccountUnspent","action","getActionKeyMin","getActionKeyMax","deserializeActionWire","asset","Asset","transactionData","TransactionData","contract","Contract","storageItem","getStorageItemKeyMin","getStorageItemKeyMax","StorageItem","validator","validatorMinKey","validatorMaxKey","Validator","invocationData","InvocationData","validatorsCount","createReadMetadataStorage","validatorsCountKey","ValidatorsCount","changeSet","changes","convertChange","acc","converted","batch","reject","createKeyStream","on","client_common_1","utils_1","createPrefix","createMax","accountKeyPrefix","accountUnclaimedKeyPrefix","accountUnspentKeyPrefix","actionKeyPrefix","assetKeyPrefix","blockKeyPrefix","blockDataKeyPrefix","headerKeyPrefix","headerHashKeyPrefix","transactionKeyPrefix","outputKeyPrefix","transactionDataKeyPrefix","contractKeyPrefix","storageItemKeyPrefix","validatorKeyPrefix","invocationDataKeyPrefix","settingsPrefix","createSerializeAccountInputKey","prefix","input","uInt256ToString","index","createGetAccountInputKeyMin","createGetAccountInputKeyMax","toString","filter","utils","notNull","serializeActionKey","createSerializeUInt160Key","serializeUInt160Key","createSerializeUInt256Key","serializeUInt256Key","publicKey","indexStart","indexStop","convertDeleteChange","change","assertNever","UnknownTypeError","changeIn","serializeWire","serializeBlockHash","serializeHeaderHash","convertAddChange","UnknownChangeTypeError","operators_1","streamToObservable_1","code","serialized","createAll$","streamToObservable","createValueStream","gte","lte","pipe","readStorage","all$","getAll$","createTryGetMetadata","rxjs_1","getStream","Observable","observer","stream","done","cleanup","removeListener","onEnd","onError","onData","complete","next","once","Blockchain_1","Blockchain","client_switch_1","logger_1","bn_js_1","js_priority_queue_1","__importDefault","getValidators_1","wrapExecuteScripts_1","WriteBatchBlockchain_1","logger","createChild","nodeLogger","component","blockFailures","globalStats","createMeasureInt64","MeasureUnit","UNIT","blockCurrent","blockProgress","blockDurationMs","createMeasureDouble","MS","blockLatencySec","SEC","NEO_BLOCKCHAIN_PERSIST_BLOCK_DURATION_MS","createView","AggregationType","DISTRIBUTION","registerView","NEO_BLOCKCHAIN_PERSIST_BLOCK_FAILURES_TOTAL","COUNT","NEO_BLOCKCHAIN_BLOCK_INDEX_GAUGE","LAST_VALUE","NEO_BLOCKCHAIN_PERSISTING_BLOCK_INDEX_GAUGE","NEO_BLOCKCHAIN_PERSIST_BLOCK_LATENCY_SECONDS","mutablePersistingBlocks","mutableBlockQueue","default","comparator","a","b","mutableInQueue","Set","mutableRunning","mutableBlock$","Subject","getValidators","transactions","debug","calculateClaimAmount","claims","spentCoins","all","claim","tryGetSpentCoin","filteredSpentCoinsIn","CoinUnspentError","filteredSpentCoins","spentCoin","claimed","CoinClaimedError","uInt256Equal","governingToken","InvalidClaimError","coins","coin","startHeight","endHeight","decrementInterval","generationAmount","getSystemFee","systemFee","verifyScript","scriptContainer","witness","verification","builder","ScriptBuilder","emitAppCallVerification","uInt160Equal","crypto","toScriptHash","WitnessVerifyError","createWriteBlockchain","mutableActions","globalActionIndex","BN","executeResult","executeScripts","scripts","invocation","triggerType","TriggerType","Verification","NULL_ACTION","gas","ONE_HUNDRED_MILLION","listeners","onLog","scriptHash","LogAction","ONE","onNotify","NotificationAction","actions","state","errorMessage","VMState","Fault","failureMessage","asBoolean","tryGetInvocationData","contracts","assetHash","contractHashes","contractHash","actionIndexStart","eq","actionIndexStop","sub","toArray","toPromise","deletedContractHashes","migratedContractHashes","voteUpdates","storageChanges","tryGetTransactionData","getUnclaimed","values","getUnspent","getAllValidators","isSpent","endHeights","mutableCurrentBlock","currentBlock","mutablePreviousBlock","previousBlock","mutableCurrentHeader","currentHeader","settings$","BehaviorSubject","record","measure","currentBlockIndex","deserializeWireContext","feeContext","utilityToken","fees","registerValidatorFee","serializeJSONContext","addressVersion","persistHeaders","genesisBlock","persistBlock","getValue","GenesisBlockNotRegisteredError","doneRunningPromise","mutableDoneRunningResolve","info","unsafe","hashHex","queue","persistBlocksAsync","_headers","verify","tryGetBlock","tryGetHeader","getAsset","getOutput","tryGetAccount","currentHeight","payload","currentIndex","currentBlockHash","memPool","verifications","includes","UnknownVerifyError","script","InvocationTransaction","ONE_HUNDRED_FIXED8","invokeTransaction","wrapExecuteScripts","ScriptContainerType","Transaction","Application","skipWitnessVerify","stop","entry","cleanBlockQueue","startTime","Date","now","entryNonNull","logData","Labels","NEO_BLOCK_INDEX","persistBlockInternal","err","nowSeconds","timestamp","dequeBlockQueue","dequeue","verifyBlock","commit","getChangeSet","WriteBatchBlockchain","logger_config_1","pino_1","createLogger","service","browser","base","prettyPrint","getPretty","extreme","browserOptions","window","origin","asObject","editorLogger","serverLogger","rpcLogger","cliLogger","httpLogger","testLogger","loggers","setGlobalLogLevel","level","forEach","getFinalLogger","final","parent","bindings","child","__exportStar","pretty","setPretty","newPretty","lodash_1","ValidatorCache","mutableAccounts","mutableValidators","uInt160ToHex","assetHex","uInt256ToHex","getAccount","balance","balances","update","ZERO","publicKeyHex","ecPointToHex","getValidator","votes","newValidator","validators","mutablePublicKeyToValidator","fromPairs","entries","mutableValidatorsCount","getValidatorsCount","StorageCache_1","currentBlockInternal","currentHeaderInternal","OutputStorageCache","caches","ReadAllAddUpdateDeleteStorageCache","readAllStorage","getKeyFromValue","getKeyString","createAddChange","createDeleteChange","ReadGetAllAddDeleteStorageCache","readGetAllStorage","matchesPartialKey","ReadGetAllAddStorageCache","ReadAddUpdateStorageCache","BlockLikeStorageCache","ReadAddStorageCache","onAdd","outputs","out","allowDupes","ReadAddDeleteStorageCache","ReadGetAllAddUpdateDeleteStorageCache","byte","idx","ReadAddUpdateMetadataStorageCache","cache","getTrackedChangeSet","maybePrevBlockData","outputContractsList","previousHash","stringToUInt160","prevBlockData","lastGlobalTransactionIndex","NEGATIVE_ONE","lastGlobalActionIndex","outputContracts","outputContract","utxo","rest","partition","TransactionType","Claim","ClaimTransaction","ContractTransaction","Miner","MinerTransaction","persistTransactions","persistUTXOTransactions","inputs","outputWithInputs","idxAndTransaction","getOutputWithInput","blockHash","globalIndex","updateAccounts","updateCoins","persistTransaction","transactionIn","transactionIndex","globalActionIndexIn","accountChanges","validatorChanges","validatorsCountChanges","State","StateTransaction","getDescriptorChanges","governingTokenHash","processStateTransaction","Register","RegisterTransaction","amount","precision","owner","admin","issuer","expiration","isFrozen","Issue","IssueTransaction","results","getTransactionResults","stringToUInt256","available","neg","Enrollment","EnrollmentTransaction","Publish","PublishTransaction","Invocation","temporaryBlockchain","blockIndex","transactionHash","onMigrateContract","from","to","onSetVotes","persistingBlock","addActionsPromise","InvocationResultSuccess","find","contractsChangeSet","addChange","subType","StorageChangeAdd","StorageChangeModify","deleteChange","StorageChangeDelete","addTrackedChange","validatorsCountVotes","registered","hexToECPoint","delete","inputOutputs","claimOutputs","getInputOutputs","addressValues","groupBy","addressSpent","groupByAddress","addressClaimed","mapValues","addressOutputs","spent","outs","updateAccount","hexToUInt160","_address","Input","promises","newAccount","isDeletable","inputClaims","hashInputClaims","updateCoin","hexToUInt256","inputClaim","BaseReadStorageCache","mutableValues","tryGetTracked","trackedChange","createGet","tryGetValue","addValue","_key","ReadStorageCache","super","ReadAllStorageCache","defer","concatMap","EMPTY","of","ReadGetAllStorageCache","createAdd","createUpdate","updateFunc","updatedValue","createDelete","ReadAddUpdateDeleteStorageCache","ReadAllAddStorageCache","mutableIndexValues","getOutputValueKeyString","BaseReadMetadataStorageCache","createGetMetadata","mutableValue","ReadMetadataStorageCache","createAddMetadata","createUpdateMetadata","Node_1","Node","node_consensus_1","bloem_1","bloom_filter_1","cross_fetch_1","ip_address_1","lru_cache_1","Command_1","Message_1","payload_1","messageReceivedTag","labelToTag","COMMAND_NAME","messagesReceived","messagesFailed","mempoolSize","NEO_PROTOCOL_MESSAGES_RECEIVED_TOTAL","NEO_PROTOCOL_MESSAGES_FAILURES_TOTAL","NEO_PROTOCOL_MEMPOOL_SIZE","createScalingBloomFilter","ScalingBloem","initial_capacity","scaling","compareTransactionAndFees","val1","val2","networkFee","divn","size","lt","compare","LOCAL_HOST_ADDRESSES","mutableUnhealthyPeerSeconds","requestBlocks","debounce","peer","mutableBestPeer","mutableGetBlocksRequestsCount","findBestPeer","network","blacklistAndClose","shouldRequestBlocks","mutableGetBlocksRequestsIndex","mutableGetBlocksRequestTime","sendMessage","createMessage","command","Command","getblocks","GetBlocksPayload","hashStart","onRequestEndpoints","throttle","relay","getaddr","fetchEndpointsFromRPC","trimMemPool","mutableMemPool","transactionAndFees","getNetworkFee","take","sort","memPoolSize","transactionAndFee","negotiate","version","VersionPayload","protocolVersion","services","SERVICES","NODE_NETWORK","round","port","externalPort","nonce","userAgent","receiveMessage","versionPayload","NegotiationError","checkVersion","host","getEndpointConfig","NetworkAddress","isValid","verack","nextMessage","mutableBloomFilter","checkPeerHealth","prevHealth","checkTimeSeconds","mutableBlockIndex","healthy","onEvent","connectedPeer","resetRequestBlocks","createMessageTransform","MessageTransform","onMessageReceived","UINT_MAX_NUMBER","mutableKnownBlockHashes","tempKnownBlockHashes","mutableKnownTransactionHashes","tempKnownTransactionHashes","mutableKnownHeaderHashes","tempKnownHeaderHashes","consensusCache","mutableConsensus","connectedPeers","clear","disposable","noopDisposable","composeDisposables","Consensus","consensusDisposable","unhealthyPeerSeconds","throwVerifyError","forceAdd","MEM_POOL_SIZE","finalResult","logLabels","NEO_TRANSACTION_HASH","foundTransaction","verifyResult","NEO_TRANSACTION_FOUND","verifyTransaction","onTransactionReceived","relayTransactionInternal","inv","InvPayload","InventoryType","hashes","mempool","messagePayload","testFilter","write","bestPeer","peers","maxBy","shuffle","getBlocksRequestTime","permanentlyBlacklist","otherPeer","AlreadyConnectedError","doFetchEndpointsFromRPC","_a","rpcURLs","rpcURL","fetchEndpointsFromRPCURL","response","method","headers","body","JSON","stringify","jsonrpc","params","ok","status","statusText","json","connected","canonicalForm","Address6","fromAddress4","createEndpoint","addEndpoint","HTTP_URL","addr","onAddrMessageReceived","onBlockMessageReceived","onConsensusMessageReceived","filteradd","onFilterAddMessageReceived","filterclear","onFilterClearMessageReceived","filterload","onFilterLoadMessageReceived","onGetAddrMessageReceived","onGetBlocksMessageReceived","getdata","onGetDataMessageReceived","getheaders","onGetHeadersMessageReceived","onHeadersMessageReceived","onInvMessageReceived","onMemPoolMessageReceived","tx","onVerackMessageReceived","onVersionMessageReceived","alert","merkleblock","notfound","ping","pong","catch","addresses","max","relayBlock","onPersistBlock","verifyConsensusPayload","onConsensusPayloadReceived","filterAdd","insert","filterLoad","k","tweak","vData","Buffer","nHashFuncs","nTweak","createPeerBloomFilter","AddrPayload","getBlocks","getHeaders","getData","createMerkleBlockPayload","flags","HeadersPayload","headersPayload","ready","relayTransaction","maxHeight","hashStopIndexPromise","hashStop","equals","ZERO_UINT256","hashStopHeader","min","hashStartHeaders","hashEnd","hashStartHeader","head","orderBy","range","bloomFilterIn","bloomFilter","contains","tree","MerkleTree","trim","mutableBuffer","allocUnsafe","i","MerkleBlockPayload","merkleRoot","consensusData","nextConsensus","transactionCount","toHashArray","Message","magic","Consensus_1","asynciterablex_1","scan_1","common_1","ConsensusContext_1","ConsensusQueue_1","handleConsensusPayload_1","handlePersistBlock_1","handleTransactionReceived_1","runConsensus_1","mutableQueue","ConsensusQueue","privateKeyToPublicKey","feeAddress","publicKeyToScriptHash","mutableConsensusContext","ConsensusContext","pause","doStart","promise","seconds","fastForwardOffset","fastForwardToTime","clearTimer","mutableStartPromise","completed","initialResult","initializeNewConsensus","consensusContext","AsyncIterableX","scan","handlePersistBlock","handleConsensusPayload","handleTransactionReceived","runConsensus","handleResult","timerSeconds","handleTimer","mutableTimerSeconds","mutableTimer","setTimeout","clearTimeout","HeaderContext_1","SignatureSentContext_1","ViewChangingContext_1","RequestReceivedContext","HeaderContext","viewNumber","myIndex","primaryIndex","expectedView","blockReceivedTimeSeconds","signatures","transactionHashes","ViewChangingContext","SignatureSentContext","BlockSentContext_1","cloneBlockSent","BlockSentContext","InitialContext_1","cloneInitial","InitialContext","mutableFastForwardSeconds","mutableItems","mutableResolvers","mutableDoneInternal","asyncIterator","item","shift","pushTimer","resolver","context_1","consensusMessage","validatorIndex","ConsensusMessageType","ChangeView","contextIn","newViewNumber","mutableExpectedView","cloneExpectedView","checkExpectedView","initializeConsensus","handleChangeView","PrepareRequest","mutableSignatures","signature","newContext","nextContext","res","addTransaction","minerTransaction","syncMemPool","handlePrepareRequest","PrepareResponse","cloneSignatures","checkSignatures","handlePrepareResponse","transactionHashesSet","bignumber_js_1","RequestSentContext","requestSentContext","cloneRequestSent","randomUInt64","mutableTransactions","calculateNetworkFee","isZero","mod","UINT_MAX","addn","toNumber","createMinerTransaction","maxTransactionsPerBlock","mutableNetworkFees","first","second","div","comparedTo","_unused","unshift","previousHeader","getConsensusAddress","sign","signAndRelay","PrepareRequestConsensusMessage","nullthrows","incrementExpectedView","signAndRelayChangeView","initializeConsensusInitial","requestChangeView","makeErrorWithCode","reason","stream_1","COMMAND_LENGTH","PAYLOAD_MAX_SIZE","calculateChecksum","toUInt32LE","hash256","deserializeMessageHeader","reader","readUInt32LE","InvalidFormatError","assertCommand","readFixedString","checksum","createSerializeWire","serializeWireBase","payloadBuffer","readBytes","payloadBufferChecksum","payloadOptions","ConsensusPayload","FilterAddPayload","FilterLoadPayload","deserializeWireBase","BinaryReader","writer","writeUInt32LE","writeFixedString","alloc","writeBytes","InvalidMessageTransformEncodingError","SIZE_OF_MESSAGE_HEADER","IOHelper","sizeOfUInt32LE","sizeOfFixedString","Transform","readableObjectMode","chunk","encoding","callback","remainingBuffer","mutableMessages","processBuffer","remaining","clone","NetworkAddress_1","readArray","writeArray","readVarBytesLE","writeVarBytesLE","readUInt8","writeUInt8","readUInt256","writeUInt256","InventoryType_1","assertInventoryType","BlockBase","merkleBlockPayloadSizeInternal","lazy","sizeOfArray","sizeOfUInt256","sizeOfVarBytesLE","deserializeBlockBaseWireBase","readVarUIntLE","INT_MAX_VALUE","writeVarUIntLE","readUInt64LE","readUInt16LE","readVarString","readBoolean","writeUInt64LE","writeUInt16LE","writeVarString","writeBoolean","Network","_peer","_buffer","_endpoint","JSONRPCError","RPC_METHODS","getaccountstate","getassetstate","getbestblockhash","getblock","getblockcount","getblockhash","getblocksysfee","getconnectioncount","getcontractstate","getrawmempool","getrawtransaction","getstorage","gettxout","invoke","invokefunction","invokescript","sendrawtransaction","submitblock","validateaddress","getpeers","relaytransaction","getoutput","getclaimamount","getallstorage","testinvocation","gettransactionreceipt","getinvocationdata","getvalidators","getnetworksettings","runconsensusnow","updatesettings","getsettings","fastforwardoffset","fastforwardtotime","getneotrackerurl","resetproject","UNKNOWN","INVALID","rpcTag","RPC_METHOD","requestDurations","requestErrors","SINGLE_REQUESTS_HISTOGRAM","SINGLE_REQUEST_ERRORS_COUNTER","createJSONRPCHandler","handlers","handleSingleRequest","requestIn","labels","request","Array","isArray","validateRequest","handlerParams","tags","TagMap","handleRequestSafe","batchRequest","handleRequest","errorResponse","RPC_TYPE","getTransactionReceipt","JSONHelper","writeUInt64","createHandler","checkHeight","height","addressToScriptHash","serializeJSON","watchTimeoutMS","block$","timeout","readUInt160","readBuffer","receipt","invokeScript","isvalid","transactionJSON","resultJSON","writeUInt160","fixed8ToDecimal","switchMap","fee","issueGASFee","runConsensusNow","newSettings","resume","initializeConsensusCommon","UnsignedConsensusPayload","relayConsensusPayload","getInitialContextAdd","findIndex","ecPointEqual","p","M","mutablePublicKeyToSignature","j","createMultiSignatureWitness","Witness","ChangeViewConsensusMessage","getPrimaryIndexType","verified","transactionsLength","consensusAddress","cloneSignatureSent","PrepareResponseConsensusMessage","cloneViewChanging","requestChangeViewBackup","Context","_options","class","provider","req","LOCAL_NETWORK_NAME","JSONRPCLocalProvider","getOptions","handleResponse","Context_1","computeRoot","toJSON","NotFoundError","keyString","keys_1","uInt256ToBuffer","bufferToUInt256","ScriptVerifyError","governingHash","unspentCoins","ValidatorCache_1","processTransaction","allOutputs","negative","updateAccountBalance","updateValidatorVotes","updateValidatorsCountVotes","processOutput","accountHashes","touchedValidators","touchedValidatorsSet","vote","deleteValidator","validatorVotesChanges","validatorRegisteredChanges","allDescriptors","descriptors","accountDescriptors","descriptor","groupedAccountDescriptors","bufferToUInt160","getBalance","voteHex","readECPoint","validatorDescriptors","bufferToECPoint","current","tryGetValidatorsCount","addValidatorsCount","updateValidatorsCount","tryGetValidator","addValidator","updateValidator","mutableValidatorsCountVotes","numValidators","weightedAverage","weightedFilter","count","gt","weight","standbyValidatorsSet","validatorsPublicKeySet","aValidator","bValidator","ecPointCompare","cmp","standbyValidatorsArray","hex","aKey","bKey","execute","Halt","gasConsumed","gasCost","InvocationResultError","RequestSentContext_1","InvalidCommandError","isCommand","AddrPayload_1","FilterAddPayload_1","FilterLoadPayload_1","GetBlocksPayload_1","HeadersPayload_1","InvPayload_1","MerkleBlockPayload_1","VersionPayload_1","fromByteArray","readUInt16BE","canonical","getAddress6","toByteArray","split","addressSerialized","writeUInt16BE","InvalidInventoryTypeError","inventoryType","isInventoryType"],"mappings":"yDAAA,+F,wWC0GA,MAAMA,EAAqB,CAACC,YAAaC,aACnCC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,kBAEhDC,EAAmBC,OAAO,cAC1BC,EAAcD,OAAO,SA2BdE,EAAiD,IAAIC,IAAI,CACpE,CAAC,QA3B2C,CAC5CC,UAAYC,GACHA,IAASA,EAAYN,IAAqBM,aAAeC,UAElEC,UAAYF,IACV,MAAM,MAAEG,EAAF,MAASC,GAAU,IAAIC,eAE7B,OADAC,EAAON,EAAKG,GACLC,GAETG,YAAcP,GACLQ,EAAMR,KAkBf,CAAC,QAd0B,CAC3BD,UAAYC,GAAsBA,GAAQA,EAAYJ,IAAiBI,aAAeS,MACtFP,UAAYF,IACV,MAAMU,EAAUV,GAAOA,EAAIU,QACrBC,EAAQX,GAAOA,EAAIW,MACzB,OAAOC,OAAOC,OAAO,GAAIb,EAAK,CAAEU,UAASC,WAE3CJ,YAAcP,IACZ,MAAMY,OAAOC,OAAOJ,QAAST,QASjC,IAAIc,EAAiC,EAE/B,SAAUN,EAAMO,EAA6BC,GAEjD,GADIC,EAASF,KAAWA,EAAWG,EAAeH,KAC7CI,EAAWJ,GACd,MAAMN,MAAM,+FAGd,OADAW,EAAiBL,GAwNnB,SAASM,EAAQC,EAAqBC,EAA0B,GAAIP,EAAS,cAC3E,OAAO,IAAIQ,MAAMR,EAAQ,CACvBS,UAAS,CAACC,EAASC,EAAenB,IACzBc,EAAG,CACRM,KAAM,YACNL,WACAI,kBAGJE,MAAK,CAACH,EAASI,EAAUH,IAGe,SAAlCJ,EAASA,EAASQ,OAAS,GAAsBV,EAAQC,EAAIC,EAASS,MAAM,GAAI,IAC7EV,EAAG,CACRM,KAAM,QACNL,SAA4C,UAAlCA,EAASA,EAASQ,OAAS,GAAiBR,EAASS,MAAM,GAAI,GAAKT,EAC9EI,cAAiD,UAAlCJ,EAASA,EAASQ,OAAS,GAAiBJ,EAAc,GAAKA,IAGlF,IAAID,EAASO,EAAUzB,GACrB,GAAIyB,IAAavC,EACf,OAAO,EAGT,GAAiB,SAAbuC,GAA2C,IAApBV,EAASQ,OAClC,MAAO,CAAEG,KAAM,IAAM1B,GAChB,GAAiB,SAAbyB,EAAqB,CAC9B,MAAME,EAAIb,EAAG,CACXM,KAAM,MACNL,aAEF,OAAOa,QAAQC,QAAQF,GAAGD,KAAKI,KAAKH,GAEpC,OAAOd,EAAQC,EAAIC,EAASgB,OAAON,GAAiBP,EAASO,KAGjEO,IAAG,CAACd,EAASO,EAAUQ,EAAOC,IACxBT,IAAavC,GAIV4B,EAAG,CACRM,KAAM,MACNL,WACAU,WACAQ,YApQCpB,CACLsB,UACE,IAAIC,EAAuB,GAQ3B,MAPsB,UAAlBC,EAASjB,MAAsC,cAAlBiB,EAASjB,OAAsBgB,EAAOC,EAASlB,cAAcmB,IAAIC,IAO3FC,SA6Lb,SAAyBjC,EAAoBkC,EAAaC,GACxD,MAAMC,EAAK,GAAH,OAAM/D,EAAN,YAAa0B,KAErB,OAAO,IAAIsB,QAASC,IAClBe,EAAqBrC,GAAU,SAASsC,EAAQC,GAC1CA,EAAMC,KAAKJ,KAAOA,GAA0B,WAApBG,EAAMC,KAAK3B,QAxB7C,SAA8Bb,EAAoByC,GAE1CzC,EAAU0C,oBAAoB,UAAWD,GAuB3CE,CAAqB3C,EAAUsC,GAC/BhB,EAAQiB,OAIVL,EAAMrC,OAAOC,OAAO,GAAIoC,EAAK,CAAEE,OAC/BpC,EAAS4C,YAAYV,EAAKC,KA/MDU,CACrB7C,EACAH,OAAOC,OAAO,GAAIgC,EAAU,CAAElB,cAAeiB,IAC7CiB,EAAuBjB,KAEDW,KACEd,QAE5B,GACAzB,GAIE,SAAU8C,EAAc9D,GAC5B,OAAIA,aAAeb,YACVa,GAGRA,EAAYN,IAAoB,EAC1BM,GAGH,SAAUM,EAAOyD,EAAoBhD,GAEzC,GADIE,EAASF,KAAWA,EAAWG,EAAeH,KAC7CI,EAAWJ,GACd,MAAMN,MAAM,+FAEdW,EAAiBL,GACjBqC,EAAqBrC,GAAU4B,eAAeW,GAC5C,IAAKA,EAAMC,KAAKJ,KAAOG,EAAMC,KAAKhC,SAAU,OAC5C,IAAIyC,EACJ,MAAMnB,EAAWS,EAAMC,KACvB,IACE,MAAMU,QAAapB,EAAStB,SAASS,MAAM,GAAI,GAAGkC,OAAO,CAAClE,EAAKmE,IAAanE,EAAImE,GAAWJ,GAC3F,IAAInB,EAAkB,GAoBtB,GAlBsB,UAAlBC,EAASjB,MAAsC,cAAlBiB,EAASjB,OACxCgB,EAAOC,EAASlB,cAAcmB,IAAIE,IAEd,UAAlBH,EAASjB,OAEToC,EADEnB,EAAStB,SAASQ,OAAS,QACbkC,EAAKpB,EAAStB,SAASsB,EAAStB,SAASQ,OAAS,OAAOa,SAEzDqB,KAAQrB,IAGN,cAAlBC,EAASjB,OAEToC,EADEnB,EAAStB,SAASQ,OAAS,QACb,IAAIkC,EAAKpB,EAAStB,SAASsB,EAAStB,SAASQ,OAAS,OAAOa,SAE7D,IAAIqB,KAAQrB,GAE9BoB,EAAUF,EAAWE,IAED,QAAlBnB,EAASjB,MAAoC,QAAlBiB,EAASjB,KAAgB,CACtD,MAAM5B,EAAM6C,EAAStB,SAASQ,OAAS,QAAUkC,EAAKpB,EAAStB,SAASsB,EAAStB,SAASQ,OAAS,IAAMkC,EACnF,QAAlBpB,EAASjB,MACX5B,EAAI6C,EAASZ,UAAYY,EAASJ,MAGlCuB,GAAU,GAEVA,EAAUhE,GAGd,MAAOoE,GACPJ,EAAUI,EACVJ,EAAQpE,IAAe,EAIzB,OADAoE,EA+OJ,SAA8BnB,EAA6B7C,GACzD,MAAO,CACL4B,KAAM,SACNuB,GAAIN,EAASM,GACbV,MAAOM,EAAU/C,IAnPPqE,CAAqBxB,EAAUmB,GACjCjD,EAAsB4C,YAAYK,EAASH,EAAuB,CAACG,QAI/E,SAASjB,EAAUuB,GAEjB,IAAK,MAAOC,EAAKC,KAAoB3E,EACnC,GAAI2E,EAAgBzE,UAAUuE,GAC5B,MAAO,CACL1C,KAAM2C,EAEN9B,MAAO+B,EAAgBtE,UAAUoE,IAMvC,IAAIG,EAAuC,IAkL7C,SAASC,EACPjC,EACAkC,EACAC,EAAiB,GACjBC,EAA8B,MAE9B,IAAKpC,EAAO,OACPoC,IAASA,EAAU,IAAIC,SAC5B,GAAID,EAAQE,IAAItC,GAAQ,OACxB,GAAqB,iBAAVA,EAAoB,OACV,iBAAVA,GAAoBoC,EAAQG,IAAIvC,GAC3C,GAAIvD,YAAY+F,OAAOxC,GAAQ,OAC/B,GAAIkC,EAAelC,EAAOmC,GAAO,OAEjC,MAAMM,EAAOtE,OAAOsE,KAAKzC,GACzB,IAAK,MAAM8B,KAAOW,EAAMR,EAA4BjC,EAAc8B,GAAMI,EAAgB,IAAIC,EAAML,GAAMM,GAhMxGH,CAA2BJ,EAAK,CAAC7B,EAAOmC,KACtC,IAAK,MAAOL,EAAKC,KAAoB3E,EACnC,GAAI2E,EAAgBzE,UAAU0C,GAS5B,OARAgC,EAAgBU,KAAK,CACnBP,OACAQ,aAAc,CACZxD,KAAM2C,EACN9B,MAAO+B,EAAgBtE,UAAUuC,OAI9B,EAIX,OAAO,IAGT,IAAK,MAAM4C,KAAgBZ,EAAiB,CACxBY,EAAaT,KAAK5C,MAAM,GAAI,GAAGkC,OAAO,CAAClE,EAAKuE,IAAQvE,EAAIuE,GAAMD,GACtEe,EAAaT,KAAKS,EAAaT,KAAK7C,OAAS,IAAM,KAE/D,MAAO,CACLH,KAAM,MACNa,MAAO6B,EACPG,mBAIJ,SAASzB,EAAYsB,GACnB,GAAIzE,EAAiBkF,IAAIT,EAAI1C,MAAO,CAElC,OADwB/B,EAAiByF,IAAIhB,EAAI1C,MAC1BrB,YAAY+D,EAAI7B,OAClC,GAoBT,SAA2B6B,GACzB,MAAoB,QAAbA,EAAI1C,KArBA2D,CAAkBjB,GAAM,CACjC,IAAK,MAAMkB,KAAqBlB,EAAIG,iBAAmB,GAAI,CACzD,IAAK5E,EAAiBkF,IAAIS,EAAkBJ,aAAaxD,MACvD,MAAMnB,MAAM,uBAAD,OAAwB6D,EAAI1C,KAA5B,gBAAwC4D,EAAkBZ,KAAKa,KAAK,OACjF,MACMC,EADkB7F,EAAiByF,IAAIE,EAAkBJ,aAAaxD,MAC3CrB,YAAYiF,EAAkBJ,aAAa3C,OAC5EkD,EAA2BrB,EAAI7B,MAAO+C,EAAkBZ,KAAMc,GAEhE,OAAOpB,EAAI7B,MAEX,MAAMhC,MAAM,uBAAD,OAAwB6D,EAAI1C,KAA5B,MAIf,SAAS+D,EAA2B3F,EAAS4E,EAAgBgB,GAC3D,MAAMC,EAAUjB,EAAK5C,OAAO,GAAG,GACf4C,EAAK5C,MAAM,GAAI,GAAGkC,OAAO,CAAClE,EAAUuE,IAAgBvE,EAAIuE,GAAMvE,GACtE6F,GAAWD,EAOrB,SAAS1E,EAAe4E,GACtB,GAA8B,WAA1BC,KAAKC,YAAYC,KAAmB,MAAMxF,MAAM,wBACpD,MAAO,CACLyF,iBAAkBH,KAAKG,iBAAiB5D,KAAKyD,MAC7CtC,oBAAqBsC,KAAKtC,oBAAoBnB,KAAKyD,MACnDpC,YAAa,CAACV,EAAKkD,IAAaL,EAAEnC,YAAYV,EAAK,IAAKkD,IAItD,SAAUhF,EAAWJ,GACzB,MAAO,qBAAsBA,GAAY,wBAAyBA,GAAY,gBAAiBA,EAGjG,SAASK,EAAiBL,IAsB1B,SAAuBA,GACrB,MAAqC,gBAA9BA,EAASiF,YAAYC,MAtBxBG,CAAcrF,IAAWA,EAASsF,QAGxC,SAASjD,EAAqBrC,EAAoByC,GAU/CzC,EAAiBmF,iBAAiB,UAAW1C,GAYhD,SAASvC,EAASF,GAGhB,MAAO,CAAC,SAAU,SAAU,WAAY,SAAU,UAAUuF,MAAOC,GAASA,KAAQxF,GA0EhF,SAAUyF,EAAeC,GAC7B,OAAOxH,EAAmByH,KAAM9E,GAAS6E,aAAiB7E,GAsCtD,SAAUiC,EAAuB7D,GACrC,MAAMmC,EAAoB,GAC1B,IAAK,MAAMoE,KAnBb,SAAUI,EACRlE,EACAmC,EAAiB,GACjBC,EAA8B,MAE9B,IAAKpC,EAAO,OAEZ,GADKoC,IAASA,EAAU,IAAIC,SACxBD,EAAQE,IAAItC,GAAQ,OACxB,GAAqB,iBAAVA,EAAoB,OAE/B,GADqB,iBAAVA,GAAoBoC,EAAQG,IAAIvC,GACvCvD,YAAY+F,OAAOxC,GAAQ,YACzB,CAAEA,QAAOmC,QAEf,MAAMM,EAAOtE,OAAOsE,KAAKzC,GACzB,IAAK,MAAM8B,KAAOW,QAAayB,EAAsBlE,EAAc8B,GAAM,IAAIK,EAAML,GAAMM,GAKtE8B,CAAqB3G,GAClCwG,EAAeD,EAAK9D,QAAQN,EAAEgD,KAAKoB,EAAK9D,OAE9C,OAAON,I,iCCvYH,SAAUyE,EAAYC,GAC1B,OA7DwB9F,EA6DA8F,EA5DjB,CAAC,cAAe,mBAAoB,sBAAuB,QAAS,SAASP,MAAOC,GAASA,KAAQxF,GA6DxG8F,EA1DN,SAAkB9F,GAChB,MAAO,CAAC,SAAU,SAAU,WAAY,SAAU,UAAUuF,MAAOC,GAASA,KAAQxF,GA0DhFE,CAAS4F,GAjDf,SAAwBf,GACtB,GAA8B,WAA1BC,KAAKC,YAAYC,KACnB,MAAMxF,MAAM,wBAGd,MAAO,CACLyF,iBAAkBH,KAAKG,iBAAiB5D,KAAKyD,MAC7CtC,oBAAqBsC,KAAKtC,oBAAoBnB,KAAKyD,MACnDpC,YAAa,CAACV,EAAKkD,IAAaL,EAAEnC,YAAYV,EAAK,IAAKkD,GACxDE,MAAO,OAGPS,MAAO,QAsCL5F,CAAe2F,GAxDrB,SAAkB9F,GAChB,MAAO,CAAC,YAAa,cAAe,YAAa,mBAAoB,uBAAuBuF,MACzFC,GAASA,KAAQxF,GAuDhBgG,CAASF,GAhCN,CACLX,kBAFoBc,EAkCHH,GAhCQX,iBAAiB5D,KAAK0E,GAC/CvD,oBAAqBuD,EAAOvD,oBAAoBnB,KAAK0E,GACrDrD,YAAaqD,EAAOrD,YAAYrB,KAAK0E,GACrCX,MAAO,OAGPS,MAAOE,EAAOC,UAAU3E,KAAK0E,IAIjC,SAA0BjG,GACxB,MAAO,CACLmF,iBAAkBnF,EAASmF,iBAAiB5D,KAAKvB,GACjD0C,oBAAqB1C,EAAS0C,oBAAoBnB,KAAKvB,GACvD4C,YAAa5C,EAAS4C,YAAYrB,KAAKvB,GACvCsF,MAAO,KACLa,EAASnG,IAEX+F,MAAO,KACA/F,EAAiB+F,OACnB/F,EAAiB+F,UAapBK,CAAiBN,GAnCvB,IAAwBG,EAhCEjG,EAsEpB,SAAUmG,EAASnG,GACnBA,EAASsF,OACXtF,EAASsF,QAxEb,6F,gCCTA,4BAGA,EAAQ/F,OAAO,IAAsByF,O,kCCHrC,sLA0BM,MAAOqB,EAIX,YACmBC,EACAC,EACAC,GAFA,KAAAF,UACA,KAAAC,kBACA,KAAAC,QAEjBC,KAAKC,aAAeD,KAAKE,gBAGpB,cACL,OAAOF,KAAKC,aAAavF,KAAK,QAKzB,kBAC0ByF,IAA3BH,KAAKI,0BACDJ,KAAKI,oBACXJ,KAAKI,uBAAoBD,GAKtB,oBAAoBpE,GAGzB,aAFsBiE,KAAKC,cAEZlE,GAGT,sBACN,MAAMsE,EAAoB,SAAOC,mBAAmB,IAAUC,yBACxDC,EAAmB,SAAOC,gBAAgB,IAAUC,wBAC1D,SAAOC,aAAaN,EAAmBG,GAEvC,MAAMI,EAAW,qBAAW,CAC1BC,QAAS,SAAOC,gBAAgB,SAAOC,uBAAuBV,IAC9DW,kBAAmB,CAAC,SAAOC,gBAAgBT,IAC3CU,YAAY,IAERC,EAAU,kBAAe,CAC7BC,GAAI,IAA8B,eAAtBpB,KAAKH,QAAQzF,KAAwB,IAAM4F,KAAKH,QAAQlE,IAAM,OAC1E0F,QAAS,CAAEC,aAAcV,EAASU,gBAG9BC,QAAmB,aAAWC,OAAO,CACzCZ,WACAO,UACAM,GAAA,OAEIC,EAAc,CAClBC,UAAW,CACTC,WAAY,SAAOC,mBAAmBxB,GACtCa,YAAY,IAGVY,EAAO,IAAI,OAAK,CACpBP,aACA1B,QAAS6B,EACTK,cAAe,IAAM,IAAI,MAK3B,OAFA/B,KAAKI,wBAA0B0B,EAAKjD,QAE7B,wBAAc,CACnB0C,aACAO,OACAE,mBAAoBhC,KAAKiC,MAAMnH,KAAKkF,MACpCkC,uBAAwB/G,cAIpB,oBACA6E,KAAKF,gBAAgBmC,cACrBjC,KAAKF,gBAAgBqC,eAAe,CAAEC,gBAAiB,WAEvDpC,KAAKD,W,kCCxGf,8CAEO,MAAMsC,EAAY,OAAH,UACjB,c,kCCFLjJ,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIuH,EAAmB,EAAQ,MAC/BD,EAAQpB,QAAUqB,EAAiBC,gB,kCCFnCrJ,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBC,EAAc,EAAQ,IACtBC,EAAwB,EAAQ,KAChCC,EAASH,EAAQI,aAAa,EAAQ,MACtCC,EAAkB,EAAQ,MAC1BC,EAAW,EAAQ,KACnBC,EAAOP,EAAQI,aAAa,EAAQ,OAC1CP,EAAQE,eAAiB,EAAGrB,KAAIC,cAC5B,MAAM6B,EAAU/H,OAASgI,kBACrB,IAAIC,EAAOD,EACX,GAAoB,iBAATC,EACP,IACI,MAAMC,QAAejC,EAAGtD,IAAI8E,EAAsBlF,KAAK4F,4BAA4BF,IACnFA,EAAOP,EAAOU,sBAAsBF,GAExC,MAAOG,GACH,GAAIA,EAAMC,SACN,MAAM,IAAIT,EAASU,iBAAiB,GAAGN,KAE3C,MAAMI,EAGd,OAAOJ,GAELO,EAAaV,EAAKW,kBAAkB,CACtCxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBC,OAC/DC,iBAAmBC,GAAWtB,EAAYuB,OAAOC,gBAAgB,CAC7D9C,UACA4C,aAGFG,EAAYjJ,OAASgI,kBACvB,MAAMC,QAAaF,EAAQ,CAAEC,gBAC7B,OAAOQ,EAAW7F,IAAI,CAAEsF,UAEtBW,EAAS,CACXjG,IAAKsG,EACLC,OAAQpB,EAAKqB,aAAa,CAAExG,IAAKsG,IACjCG,aAActB,EAAKuB,mBAAmB,CAClCpD,KACAqD,UAAW7B,EAAsBlF,KAAKgH,iBACtCC,kBAAoBtB,IAAW,CAC3BD,KAAMP,EAAOU,sBAAsBF,KAEvCvF,IAAK6F,EAAW7F,OAGlB8G,EAAY3B,EAAKW,kBAAkB,CACrCxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBe,MAC/Db,iBAAmBC,GAAWtB,EAAYmC,MAAMX,gBAAgB,CAC5D9C,UACA4C,aAGFc,EAAW5J,OAASgI,kBACtB,MAAMC,QAAaF,EAAQ,CAAEC,gBAC7B,OAAOyB,EAAU9G,IAAI,CAAEsF,UAErByB,EAAQ,CACV/G,IAAKiH,EACLV,OAAQpB,EAAKqB,aAAa,CAAExG,IAAKiH,IACjCR,aAActB,EAAKuB,mBAAmB,CAClCpD,KACAqD,UAAW7B,EAAsBlF,KAAKsH,gBACtCL,kBAAoBtB,IAAW,CAC3BD,KAAMP,EAAOoC,qBAAqB5B,KAEtCvF,IAAK8G,EAAU9G,OAGjBoH,EAAcjC,EAAKW,kBAAkB,CACvCxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBoB,YAC/DlB,iBAAmBC,GAAWtB,EAAYwC,2BAA2B,CACjE9D,UACA4C,aAGFmB,EAASnC,EAAKW,kBAAkB,CAClCxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBsB,OAC/DpB,iBAAmBC,GAAWtB,EAAY0C,OAAOlB,gBAAgB,CAAE9C,UAAS4C,aAEhF,MAAO,CACHF,SACAc,QACAS,UAAWrC,EAAKW,kBAAkB,CAC9BxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBwB,UAC/DtB,iBAAmBC,GAAWtB,EAAY4C,UAAUpB,gBAAgB,CAChE9C,UACA4C,aAGRuB,QAASvC,EAAKwC,qBAAqB,CAC/BrE,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsB0B,QAC/DE,OAAQ9C,EAAsBlF,KAAKiI,cACnCC,OAAQhD,EAAsBlF,KAAKmI,cACnC7B,iBAAmBC,GAAWtB,EAAYmD,QAAQ3B,gBAAgB,CAC9D9C,UACA4C,aAGR8B,iBAAkB9C,EAAK+C,wBAAwB,CAC3C5E,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBiC,iBAC/DE,UAAWrD,EAAsBlF,KAAKwI,0BACtCC,UAAWvD,EAAsBlF,KAAK0I,0BACtCpC,iBAAmBC,GAAWtB,EAAY0D,iBAAiBlC,gBAAgB,CACvE9C,UACA4C,aAGRqC,eAAgBrD,EAAK+C,wBAAwB,CACzC5E,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBwC,eAC/DL,UAAWrD,EAAsBlF,KAAK6I,wBACtCJ,UAAWvD,EAAsBlF,KAAK8I,wBACtCxC,iBAAmBC,GAAWtB,EAAY8D,eAAetC,gBAAgB,CACrE9C,UACA4C,aAGRyC,OAAQzD,EAAK+C,wBAAwB,CACjC5E,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsB4C,OAC/DT,UAAWrD,EAAsBlF,KAAKiJ,gBACtCR,UAAWvD,EAAsBlF,KAAKkJ,gBACtC5C,iBAAmBC,GAAWtB,EAAYkE,sBAAsB,CAC5DxF,UACA4C,aAGR6C,MAAO7D,EAAKW,kBAAkB,CAC1BxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBgD,MAC/D9C,iBAAmBC,GAAWtB,EAAYoE,MAAM5C,gBAAgB,CAC5D9C,UACA4C,aAGRiB,cACA8B,gBAAiB/D,EAAKW,kBAAkB,CACpCxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBkD,gBAC/DhD,iBAAmBC,GAAWtB,EAAYsE,gBAAgB9C,gBAAgB,CAAE9C,UAAS4C,aAEzFmB,SACA8B,SAAUjE,EAAKW,kBAAkB,CAC7BxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBoD,SAC/DlD,iBAAmBC,GAAWtB,EAAYwE,SAAShD,gBAAgB,CAC/D9C,UACA4C,aAGRmD,YAAanE,EAAK+C,wBAAwB,CACtC5E,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsBsD,YAC/DnB,UAAWrD,EAAsBlF,KAAK2J,qBACtClB,UAAWvD,EAAsBlF,KAAK4J,qBACtCtD,iBAAmBC,GAAWtB,EAAY4E,YAAYpD,gBAAgB,CAClE9C,UACA4C,aAGRuD,UAAWvE,EAAKwC,qBAAqB,CACjCrE,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsB0D,UAC/D9B,OAAQ9C,EAAsBlF,KAAK+J,gBACnC7B,OAAQhD,EAAsBlF,KAAKgK,gBACnC1D,iBAAmBC,GAAWtB,EAAYgF,UAAUxD,gBAAgB,CAChE9C,UACA4C,aAGR2D,eAAgB3E,EAAKW,kBAAkB,CACnCxC,KACAyC,aAAcjB,EAAsBlF,KAAKoG,sBAAsB8D,eAC/D5D,iBAAmBC,GAAWtB,EAAYkF,eAAe1D,gBAAgB,CACrE9C,UACA4C,aAGR6D,gBAAiB7E,EAAK8E,0BAA0B,CAC5C3G,KACArE,IAAK6F,EAAsBlF,KAAKsK,mBAChChE,iBAAmBC,GAAWtB,EAAYsF,gBAAgB9D,gBAAgB,CACtE9C,UACA4C,aAGR,oBACU7C,EAAG9B,SAEb,aAAa4I,GACT,MACMC,EADcD,EAAU5M,IAAIyH,EAAgBqF,eACtB1L,OAAO,CAAC2L,EAAKC,KACrCD,EAAI1K,QAAQ2K,GACLD,GACR,UACGjH,EAAGmH,MAAMJ,IAEnB,cACI,MAAMI,EAAQ,SACR,IAAI3N,QAAQ,CAACC,EAAS2N,KACxBpH,EAAGqH,kBACEC,GAAG,OAAS3L,IACbwL,EAAM5K,KAAK,CAAEvD,KAAM,MAAO2C,UAEzB2L,GAAG,QAAUlF,IACdgF,EAAOhF,KAENkF,GAAG,MAAO,KACX7N,cAGFuG,EAAGmH,MAAMA,O,kCC7N3BnP,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BC,EAAU,EAAQ,IAElBC,EAAgB5N,GAAU,GAAGA,MAE7B6N,EAAa7N,GAAU,GAAGA,KAC1B8N,EAAmBF,EAAa,KAChCG,EAA4BH,EAAa,KACzCI,EAA0BJ,EAAa,KACvCK,EAAkBL,EAAa,KAC/BM,EAAiBN,EAAa,KAC9BO,EAAiBP,EAAa,KAC9BQ,EAAqBR,EAAa,KAClCS,EAAkBT,EAAa,KAC/BU,EAAsBV,EAAa,KACnCW,EAAuBX,EAAa,KACpCY,EAAkBZ,EAAa,KAC/Ba,EAA2Bb,EAAa,KACxCc,EAAoBd,EAAa,KACjCe,EAAuBf,EAAa,KACpCgB,EAAqBhB,EAAa,KAClCiB,EAA0BjB,EAAa,KACvCkB,EAAiBlB,EAAa,KAC9Bb,EAAqBa,EAAa,KAElCnE,EAAmB,GAAGqF,KACtB/E,EAAkB,GAAG+E,KACrBC,EAAkCC,GAAW,EAAG7G,OAAM8G,WAAY,GAAGD,IAAStB,EAAgB9F,OAAO/B,gBAAgBsC,KAAQuF,EAAgB9F,OAAOsH,gBAAgBD,EAAM9G,QAAQ8G,EAAME,QACxLC,EAA+BJ,GAAW,EAAG7G,UAAW,GAAG6G,IAAStB,EAAgB9F,OAAO/B,gBAAgBsC,KAC3GkH,EAA+BL,GAAW,EAAG7G,UAAW0F,EAAU,GAAGmB,IAAStB,EAAgB9F,OAAO/B,gBAAgBsC,MACrH8C,EAA4BmE,EAA4BrB,GACxD5C,EAA4BkE,EAA4BtB,GACxDzC,EAA0B8D,EAA4BpB,GACtDzC,EAA0B8D,EAA4BrB,GAEtD5B,EAAuB,EAAGjE,OAAM6G,YAAa,CAC/CL,OACSzJ,IAATiD,OAAqBjD,EAAYwI,EAAgB9F,OAAO/B,gBAAgBsC,QAC7DjD,IAAX8J,OAAuB9J,EAAY8J,EAAOM,SAAS,QAElDC,OAAO5B,EAAQ6B,MAAMC,SACrBzM,KAAK,IAEJ0M,EAAqB,EAAGP,WAAY,GAAGlB,IAAkBkB,EAAMG,SAAS,GAAI,KAI5E9C,EAAkBoC,EAClBnC,EAAkBoB,EAAUe,GAG5Be,EAA6BX,GAAYC,GAAU,GAAGD,IAFhC,GAAG7G,UAAWuF,EAAgB9F,OAAO/B,gBAAgBsC,GAEZyH,CAAoBX,KACnFY,EAA6Bb,GAAYC,GAAU,GAAGD,IAFhC,GAAG7G,UAAWuF,EAAgB9F,OAAOsH,gBAAgB/G,GAEZ2H,CAAoBb,KACnFvE,EAAgBoD,EAChBlD,EAAgBiD,EAAUC,GAE1BjF,EAAwB,CAC1B0B,QAASoF,EAA0B7B,GACnChD,iBAAkBiE,EAA+BhB,GACjD1C,eAAgB0D,EAA+Bf,GAC/CvC,OAAQiE,EACR7D,MAAOgE,EAA0B3B,GACjCtE,MAAOiG,EAA0B1B,GACjC9D,UAAWwF,EAA0BzB,GACrCtF,OAAQ+G,EAA0BxB,GAClCpE,YAAa4F,EAA0BtB,GACvCpE,OAXuB,EAAGgF,QAAOhH,UAAW,GAAGqG,IAAkBd,EAAgB9F,OAAOsH,gBAAgB/G,KAAQgH,IAYhHpD,gBAAiB8D,EAA0BpB,GAC3CxC,SAAU0D,EAA0BjB,GACpCvC,YAnC4B,EAAGhE,OAAMrG,SAAU,GAAG6M,IAAuBjB,EAAgB9F,OAAO/B,gBAAgBsC,KAAQrG,EAAIwN,SAAS,SAoCrI/C,UAxB0B,EAAGwD,eAAgB,GAAGnB,IAAqBlB,EAAgB9F,OAAO5B,gBAAgB+J,KAyB5GpD,eAAgBkD,EAA0BhB,IAE9CvH,EAAQ7E,KAAO,CACXsK,qBACA1E,4BAnDiC8G,GAAU,GAAGb,IAAsBa,IAoDpE1F,mBACAM,kBACAkB,4BACAE,4BACAG,0BACAC,0BACAa,uBACAC,qBAzC0BvK,GAAQ+L,EAAUzB,EAAqBtK,IA0CjE4N,qBACAhE,gBAzCoB,EAAGsE,gBAAiB,CAAC/B,OAAgC/I,IAAf8K,OAA2B9K,EAAY8K,EAAWV,SAAS,GAAI,IAAIC,OAAO5B,EAAQ6B,MAAMC,SAASzM,KAAK,IA0ChK2I,gBAzCoB,EAAGsE,eAAgBpC,EAAU,CAACI,OAA+B/I,IAAd+K,OAA0B/K,EAAY+K,EAAUX,SAAS,GAAI,IAAIC,OAAO5B,EAAQ6B,MAAMC,SAASzM,KAAK,KA0CvKwJ,kBACAC,kBACA/B,gBACAE,gBACA/B,0B,kCC5FJ1K,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBE,EAAwB,EAAQ,KAChCgG,EAAU,EAAQ,IAClB/F,EAASH,EAAQI,aAAa,EAAQ,MACtCE,EAAW,EAAQ,KAwKnBmI,EAAuBC,IACzB,OAAQA,EAAOhR,MACX,IAAK,UACD,MAAO,CACHA,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsB0B,QAAQ4F,EAAOrO,MAE7E,IAAK,iBACD,MAAO,CACH3C,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBwC,eAAe8E,EAAOrO,MAEpF,IAAK,mBACD,MAAO,CACH3C,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBiC,iBAAiBqF,EAAOrO,MAEtF,IAAK,WACD,MAAO,CACH3C,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBoD,SAASkE,EAAOrO,MAE9E,IAAK,cACD,MAAO,CACH3C,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBsD,YAAYgE,EAAOrO,MAEjF,IAAK,YACD,MAAO,CACH3C,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsB0D,UAAU4D,EAAOrO,MAE/E,QAEI,MADA6L,EAAQ6B,MAAMY,YAAYD,GACpB,IAAIpI,EAASsI,mBAG/B/I,EAAQ6F,cAAiBgD,IACrB,GAAoB,QAAhBA,EAAOhR,KACP,MA9MiB,CAACmR,IACtB,MAAMH,EAASG,EACf,OAAQH,EAAOhR,MACX,IAAK,UACD,MAAO,CACH,CACIA,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsB0B,QAAQ4F,EAAOnQ,OACrEA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,iBACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBwC,eAAe,CACjElD,KAAMgI,EAAOnQ,MAAMmI,KACnB8G,MAAOkB,EAAOnQ,MAAMiP,QAExBjP,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,mBACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBiC,iBAAiB,CACnE3C,KAAMgI,EAAOnQ,MAAMmI,KACnB8G,MAAOkB,EAAOnQ,MAAMiP,QAExBjP,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,SACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsB4C,OAAO,CACzD0D,MAAOgB,EAAOnQ,MAAMmP,QAExBnP,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,QACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBgD,MAAMsE,EAAOnQ,OACnEA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,QACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBe,MAAMuG,EAAOnQ,OACnEA,MAAOmQ,EAAOnQ,MAAMuQ,iBAExB,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKsH,gBAChC/J,MAAO4H,EAAO4I,mBAAmBL,EAAOnQ,MAAMmI,QAG1D,IAAK,YACD,MAAO,CACH,CACIhJ,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBwB,UAAU8F,EAAOnQ,OACvEA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,SACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBC,OAAOqH,EAAOnQ,OACpEA,MAAOmQ,EAAOnQ,MAAMuQ,iBAExB,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKgH,iBAChCzJ,MAAO4H,EAAO6I,oBAAoBN,EAAOnQ,MAAMmI,OAEnD,CACIhJ,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAK4F,4BAA4B8H,EAAOnQ,MAAMmP,OACzEnP,MAAO4H,EAAO6I,oBAAoBN,EAAOnQ,MAAMmI,QAG3D,IAAK,cACD,MAAO,CACH,CACIhJ,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBoB,YAAYkG,EAAOnQ,OACzEA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,SACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBsB,OAAO,CACzDhC,KAAMgI,EAAOnQ,MAAMmI,KACnBgH,MAAOgB,EAAOnQ,MAAMmP,QAExBnP,MAAOmQ,EAAOnQ,MAAMmK,OAAOoG,kBAGvC,IAAK,kBACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBkD,gBAAgBoE,EAAOnQ,OAC7EA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,WACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBoD,SAASkE,EAAOnQ,OACtEA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,cACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsBsD,YAAY,CAC9DhE,KAAMgI,EAAOnQ,MAAMmI,KACnBrG,IAAKqO,EAAOnQ,MAAM8B,MAEtB9B,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,YACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsB0D,UAAU,CAC5DwD,UAAWI,EAAOnQ,MAAM+P,YAE5B/P,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,iBACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKoG,sBAAsB8D,eAAewD,EAAOnQ,OAC5EA,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,IAAK,kBACD,MAAO,CACH,CACIpR,KAAM,MACN2C,IAAK6F,EAAsBlF,KAAKsK,mBAChC/M,MAAOmQ,EAAOnQ,MAAMuQ,kBAGhC,QAEI,MADA5C,EAAQ6B,MAAMY,YAAYD,GACpB,IAAIpI,EAASsI,iBAAiBC,EAASnR,QA0C1CuR,CAAiBP,EAAOA,QAEnC,GAAoB,WAAhBA,EAAOhR,KACP,MAAO,CAAC+Q,EAAoBC,EAAOA,SAGvC,MADAxC,EAAQ6B,MAAMY,YAAYD,GACpB,IAAIpI,EAAS4I,yB,kCC1NvBxS,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM4Q,EAAc,EAAQ,IACtB7I,EAAW,EAAQ,KACnB8I,EAAuB,EAAQ,MACrC,SAASxH,GAAa,IAAExG,IACpB,OAAO3C,MAAO4B,IACV,IAEI,aADqBe,EAAIf,GAG7B,MAAOyG,GACH,GAAIA,EAAMC,UAA2B,kBAAfD,EAAMuI,KACxB,OAEJ,MAAMvI,IAqBlB,SAASI,GAAkB,GAAExC,EAAE,aAAEyC,EAAY,iBAAEG,IAC3C,MAAMlG,EAAM3C,MAAO4B,IACf,MAAMiP,EAAanI,EAAa9G,GAChC,IACI,MAAMsG,QAAejC,EAAGtD,IAAIkO,GAC5B,OAAOhI,EAAiBX,GAE5B,MAAOG,GACH,GAAIA,EAAMC,UAA2B,kBAAfD,EAAMuI,KACxB,MAAM,IAAI/I,EAASU,iBAAiBsI,GAExC,MAAMxI,IAGd,MAAO,CAAE1F,MAAKuG,OAAQC,EAAa,CAAExG,SAGzC,SAASmO,GAAW,GAAE7K,EAAE,OAAEsE,EAAM,OAAEE,EAAM,iBAAE5B,IACtC,OAAO8H,EAAqBI,mBAAmB,IAAM9K,EAAG+K,kBAAkB,CACtEC,IAAK1G,EACL2G,IAAKzG,KACL0G,KAAKT,EAAYvQ,IAAI0I,IAtC7BzB,EAAQ+B,aAAeA,EAgBvB/B,EAAQiC,mBAfR,UAA4B,GAAEpD,EAAE,UAAEqD,EAAS,kBAAEE,EAAiB,IAAE7G,IAC5D,OAAO3C,UACH,IACI,MAAMkI,QAAejC,EAAGtD,IAAI2G,GAE5B,aADoB3G,EAAI6G,EAAkBtB,IAG9C,MAAOG,GACH,GAAIA,EAAMC,UAA2B,kBAAfD,EAAMuI,KACxB,OAEJ,MAAMvI,KAqBlBjB,EAAQqB,kBAAoBA,EAO5BrB,EAAQ0J,WAAaA,EAarB1J,EAAQkD,qBAZR,UAA8B,GAAErE,EAAE,aAAEyC,EAAY,OAAE6B,EAAM,OAAEE,EAAM,iBAAE5B,IAC9D,MAAMuI,EAAc3I,EAAkB,CAClCxC,KACAyC,eACAG,qBAEJ,MAAO,CACHlG,IAAKyO,EAAYzO,IACjBuG,OAAQkI,EAAYlI,OACpBmI,KAAMP,EAAW,CAAE7K,KAAIsE,SAAQE,SAAQ5B,uBAqB/CzB,EAAQyD,wBAjBR,UAAiC,GAAE5E,EAAE,aAAEyC,EAAY,UAAEoC,EAAS,UAAEE,EAAS,iBAAEnC,IACvE,MAAMuI,EAAc3I,EAAkB,CAClCxC,KACAyC,eACAG,qBAEJ,MAAO,CACHlG,IAAKyO,EAAYzO,IACjBuG,OAAQkI,EAAYlI,OACpBoI,QAAU/O,GAASuO,EAAW,CAC1B7K,KACAsE,OAAQO,EAAUvI,GAClBkI,OAAQO,EAAUzI,GAClBsG,uBAmBZzB,EAAQmK,qBAdR,UAA8B,IAAE5O,IAC5B,OAAO3C,UACH,IAEI,aADqB2C,IAGzB,MAAO0F,GACH,GAAIA,EAAMC,UAA2B,kBAAfD,EAAMuI,KACxB,OAEJ,MAAMvI,KAoBlBjB,EAAQwF,0BAfR,UAAmC,GAAE3G,EAAE,IAAErE,EAAG,iBAAEiH,IAC1C,MAAMlG,EAAM3C,UACR,IACI,MAAMkI,QAAejC,EAAGtD,IAAIf,GAC5B,OAAOiH,EAAiBX,GAE5B,MAAOG,GACH,GAAIA,EAAMC,UAA2B,kBAAfD,EAAMuI,KACxB,MAAM,IAAI/I,EAASU,iBAAiB3G,GAExC,MAAMyG,IAGd,MAAO,CAAE1F,MAAKuG,OAAQC,EAAa,CAAExG,W,kCCtHzC1E,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0R,EAAS,EAAQ,IACvBpK,EAAQ2J,mBAAsBU,GAAc,IAAID,EAAOE,WAAYC,IAC/D,MAAMC,EAASH,IACf,IAAII,GAAO,EACX,MAAMC,EAAU,KACPD,IACDA,GAAO,EACPD,EAAOG,eAAe,MAAOC,GAC7BJ,EAAOG,eAAe,QAASE,GAC/BL,EAAOG,eAAe,OAAQG,KAGhCF,EAAQ,KACVF,IACAH,EAASQ,YAEPF,EAAW5J,IACbyJ,IACAH,EAAStJ,MAAMA,IAEb6J,EAAUtR,GAAS+Q,EAASS,KAAKxR,GAIvC,OAHAgR,EAAOS,KAAK,QAASJ,GACrBL,EAAOS,KAAK,MAAOL,GACnBJ,EAAOrE,GAAG,OAAQ2E,GACXJ,K,kCCzBX7T,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIwS,EAAe,EAAQ,MAC3BlL,EAAQmL,WAAaD,EAAaC,Y,kCCFlCtU,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BgF,EAAkB,EAAQ,KAC1BC,EAAW,EAAQ,KACnBjL,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClBiF,EAAU,EAAQ,IAClBC,EAAsBpL,EAAQqL,gBAAgB,EAAQ,OACtDpB,EAAS,EAAQ,IACjBd,EAAc,EAAQ,IACtB7I,EAAW,EAAQ,KACnBgL,EAAkB,EAAQ,KAC1BC,EAAuB,EAAQ,KAC/BC,EAAyB,EAAQ,MACjCC,EAASP,EAASQ,YAAYR,EAASS,WAAY,CAAEC,UAAW,eAChEC,EAAgBZ,EAAgBa,YAAYC,mBAAmB,mBAAoBd,EAAgBe,YAAYC,MAC/GC,EAAejB,EAAgBa,YAAYC,mBAAmB,kBAAmBd,EAAgBe,YAAYC,MAC7GE,EAAgBlB,EAAgBa,YAAYC,mBAAmB,mBAAoBd,EAAgBe,YAAYC,MAC/GG,EAAkBnB,EAAgBa,YAAYO,oBAAoB,mBAAoBpB,EAAgBe,YAAYM,GAAI,yCACtHC,EAAkBtB,EAAgBa,YAAYO,oBAAoB,kBAAmBpB,EAAgBe,YAAYQ,IAAK,iDACtHC,EAA2CxB,EAAgBa,YAAYY,WAAW,2CAA4CN,EAAiBnB,EAAgB0B,gBAAgBC,aAAc,GAAI,uCAAwC,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAM,KAAM,IAAM,MAChS3B,EAAgBa,YAAYe,aAAaJ,GACzC,MAAMK,EAA8C7B,EAAgBa,YAAYY,WAAW,8CAA+Cb,EAAeZ,EAAgB0B,gBAAgBI,MAAO,GAAI,6BACpM9B,EAAgBa,YAAYe,aAAaC,GACzC,MAAME,EAAmC/B,EAAgBa,YAAYY,WAAW,6BAA8BR,EAAcjB,EAAgB0B,gBAAgBM,WAAY,GAAI,2BAC5KhC,EAAgBa,YAAYe,aAAaG,GACzC,MAAME,EAA8CjC,EAAgBa,YAAYY,WAAW,wCAAyCP,EAAelB,EAAgB0B,gBAAgBM,WAAY,GAAI,yCACnMhC,EAAgBa,YAAYe,aAAaK,GACzC,MAAMC,EAA+ClC,EAAgBa,YAAYY,WAAW,+CAAgDH,EAAiBtB,EAAgB0B,gBAAgBC,aAAc,GAAI,8CAA+C,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,KAAM,GAAI,KAAM,KACjS3B,EAAgBa,YAAYe,aAAaM,GACzC,MAAMnC,EACF,YAAY7N,GACRG,KAAK8P,yBAA0B,EAC/B9P,KAAK+P,kBAAoB,IAAIjC,EAAoBkC,QAAQ,CACrDC,WAAY,CAACC,EAAGC,IAAMD,EAAErL,MAAMuF,MAAQ+F,EAAEtL,MAAMuF,QAElDpK,KAAKoQ,eAAiB,IAAIC,IAC1BrQ,KAAKsQ,gBAAiB,EACtBtQ,KAAKuQ,cAAgB,IAAI5D,EAAO6D,QAChCxQ,KAAKyQ,cAAgBtV,MAAOuV,IACxBvC,EAAOwC,MAAM,CAAElS,KAAM,kCACduP,EAAgByC,cAAczQ,KAAM0Q,IAE/C1Q,KAAK4Q,qBAAuBzV,MAAO0V,IAC/B1C,EAAOwC,MAAM,CAAElS,KAAM,0CACrB,MAAMqS,QAAmBlW,QAAQmW,IAAIF,EAAOvV,IAAIH,MAAO6V,GAAUhR,KAAKiR,gBAAgBD,KAChFE,EAAuBJ,EAAWtG,OAAO5B,EAAQ6B,MAAMC,SAC7D,GAAIoG,EAAWvW,SAAW2W,EAAqB3W,OAC3C,MAAM,IAAIyI,EAASmO,iBAAiBL,EAAWvW,OAAS2W,EAAqB3W,QAEjF,MAAM6W,EAAqBF,EAAqB1G,OAAQ6G,IACpD,GAAIA,EAAUC,QACV,MAAM,IAAItO,EAASuO,iBAAiB5I,EAAgB9F,OAAOsH,gBAAgBkH,EAAUjM,OAAO0B,OAAQuK,EAAUjM,OAAOnK,MAAMsP,SAAS,KAExI,IAAK5B,EAAgB9F,OAAO2O,aAAaH,EAAUjM,OAAO0B,MAAO9G,KAAKY,SAAS6Q,eAAerO,MAC1F,MAAM,IAAIJ,EAAS0O,kBAAkB/I,EAAgB9F,OAAOsH,gBAAgBkH,EAAUjM,OAAO0B,OAAQ6B,EAAgB9F,OAAOsH,gBAAgBnK,KAAKY,SAAS6Q,eAAerO,OAE7K,OAAO,IAEX,OAAOT,EAAY8H,MAAMmG,qBAAqB,CAC1Ce,MAAOP,EAAmB9V,IAAKsW,IAAS,CACpC3W,MAAO2W,EAAKxM,OAAOnK,MACnB4W,YAAaD,EAAKC,YAClBC,UAAWF,EAAKE,aAEpBC,kBAAmB/R,KAAKY,SAASmR,kBACjCC,iBAAkBhS,KAAKY,SAASoR,iBAChCC,aAAc9W,MAAOiP,IACjB,MAAMrG,QAAe/D,KAAK+D,OAAOjG,IAAI,CACjCqF,YAAaiH,IAKjB,aAHwBpK,KAAKsF,UAAUxH,IAAI,CACvCsF,KAAMW,EAAOX,QAEA8O,cAI7BlS,KAAKmS,aAAehX,OAASiX,kBAAiBhP,OAAMiP,cAChD,IAAI,aAAEC,GAAiBD,EACvB,GAA4B,IAAxBC,EAAa/X,OAAc,CAC3B,MAAMgY,EAAU,IAAI5J,EAAgB6J,cACpCD,EAAQE,wBAAwBrP,GAChCkP,EAAeC,EAAQxS,aAEtB,IAAK4I,EAAgB9F,OAAO6P,aAAatP,EAAMuF,EAAgBgK,OAAOC,aAAaN,IACpF,MAAM,IAAItP,EAAS6P,mBAEvB,MAAMtR,EAAavB,KAAK8S,wBAClBC,EAAiB,GACvB,IAAIC,EAAoB,IAAInF,EAAQoF,GAAG,GACvC,MAAMC,QAAsBlT,KAAKyB,GAAG0R,eAAe,CAC/CC,QAAS,CAAC,CAAErH,KAAMsG,EAAQgB,YAAc,CAAEtH,KAAMuG,IAChD/Q,aACA6Q,kBACAkB,YAAa3Q,EAAY4Q,YAAYC,aACrC9M,OAAQ/D,EAAY8Q,YACpBC,IAAK/Q,EAAY8H,MAAMkJ,oBACvBC,UAAW,CACPC,MAAO,EAAG3a,UAAS4a,iBACff,EAAepV,KAAK,IAAIgF,EAAYoR,UAAU,CAC1C3J,MAAO4I,EACPc,aACA5a,aAEJ8Z,EAAoBA,EAAkBxV,IAAImF,EAAY8H,MAAMuJ,MAEhEC,SAAU,EAAG7Y,OAAM0Y,iBACff,EAAepV,KAAK,IAAIgF,EAAYuR,mBAAmB,CACnD9J,MAAO4I,EACPc,aACA1Y,UAEJ4X,EAAoBA,EAAkBxV,IAAImF,EAAY8H,MAAMuJ,SAIlE3Q,EAAS,CAAE8Q,QAASpB,EAAgB3P,OAAMiP,YAC1C,MAAElZ,EAAK,MAAEib,EAAK,aAAEC,GAAiBnB,EACvC,OAAIkB,IAAUzL,EAAgB2L,QAAQC,MAC3Bnb,OAAOC,OAAOD,OAAOC,OAAO,GAAIgK,GAAS,CAAEmR,oBAAiCrU,IAAjBkU,EAA6B,0CAA4CA,IAE1H,IAAjBlb,EAAMoB,OACCnB,OAAOC,OAAOD,OAAOC,OAAO,GAAIgK,GAAS,CAAEmR,eAAgB,oEAC1D,2HAA2Hrb,EAAMoB,oBAEjIpB,EAAM,GACTsb,YAGFpR,EAFIjK,OAAOC,OAAOD,OAAOC,OAAO,GAAIgK,GAAS,CAAEmR,eAAgB,mCAI1ExU,KAAK0U,qBAAuBvZ,MAAO+J,IAC/B,MAAMnJ,QAAaiE,KAAK4H,eAAevD,OAAO,CAC1CjB,KAAM8B,EAAY9B,OAEtB,QAAajD,IAATpE,EACA,OAEJ,MAAO+K,EAAO6N,EAAWR,SAAiBvZ,QAAQmW,IAAI,MAC/B5Q,IAAnBpE,EAAK6Y,UAA0Bha,QAAQC,aAAQsF,GAAaH,KAAK8G,MAAMhJ,IAAI,CAAEsF,KAAMrH,EAAK6Y,YACxFha,QAAQmW,IAAIhV,EAAK8Y,eAAevZ,IAAIH,MAAO2Z,GAAiB9U,KAAKkH,SAAS7C,OAAO,CAAEjB,KAAM0R,MACzF/Y,EAAKgZ,iBAAiBC,GAAGjZ,EAAKkZ,iBACxBra,QAAQC,QAAQ,IAChBmF,KAAK0G,OACF+F,QAAQ,CACTxB,WAAYlP,EAAKgZ,iBACjB7J,UAAWnP,EAAKkZ,gBAAgBC,IAAIvS,EAAY8H,MAAMuJ,OAErD1H,KAAKT,EAAYsJ,WACjBC,cAEb,MAAO,CACHtO,QACA6N,UAAWA,EAAUnK,OAAO5B,EAAQ6B,MAAMC,SAC1C2K,sBAAuBtZ,EAAKsZ,sBAC5BC,uBAAwBvZ,EAAKuZ,uBAC7BC,YAAaxZ,EAAKwZ,YAClBlS,OAAQtH,EAAKsH,OACb8Q,UACAqB,eAAgBzZ,EAAKyZ,iBAG7BxV,KAAKyV,sBAAwBta,MAAO+J,GAAgBlF,KAAKgH,gBAAgB3C,OAAO,CAAEjB,KAAM8B,EAAY9B,OACpGpD,KAAK0V,aAAeva,MAAOiI,GAASpD,KAAK+F,iBACpC0G,QAAQ,CAAErJ,SACVkJ,KAAKT,EAAYsJ,WACjBC,YACA1a,KAAMib,GAAWA,EAAOra,IAAKL,GAAUA,EAAMiP,QAClDlK,KAAK4V,WAAaza,MAAOiI,UACCpD,KAAKsG,eACtBmG,QAAQ,CAAErJ,SACVkJ,KAAKT,EAAYsJ,WACjBC,aACU9Z,IAAKL,GAAUA,EAAMiP,OAExClK,KAAK6V,iBAAmB1a,SAAY6E,KAAKwH,UAAUgF,KAAKF,KAAKT,EAAYsJ,WAAWC,YACpFpV,KAAK8V,QAAU3a,MAAO+O,IAClB,MAAMlD,QAAwBhH,KAAKgH,gBAAgB3C,OAAO,CACtDjB,KAAM8G,EAAM9G,OAEhB,YAA4BjD,IAApB6G,QAA6E7G,IAA5C6G,EAAgB+O,WAAW7L,EAAME,QAE9EpK,KAAKiR,gBAAkB9V,MAAO+O,IAC1B,MAAOlD,EAAiB5B,SAAgBxK,QAAQmW,IAAI,CAChD/Q,KAAKgH,gBAAgB3C,OAAO,CAAEjB,KAAM8G,EAAM9G,OAC1CpD,KAAKoF,OAAOtH,IAAIoM,KAEpB,QAAwB/J,IAApB6G,EACA,OAEJ,MAAM8K,EAAY9K,EAAgB+O,WAAW7L,EAAME,OACnD,QAAkBjK,IAAd2R,EACA,OAEJ,MAAMR,EAAUtK,EAAgBsK,QAAQpH,EAAME,OAC9C,MAAO,CACHhF,SACAyM,YAAa7K,EAAgB6K,YAC7BC,YACAR,UAAWA,IAGnBtR,KAAKmB,QAAUtB,EAAQsB,QACvBnB,KAAKgW,oBAAsBnW,EAAQoW,aACnCjW,KAAKkW,qBAAuBrW,EAAQsW,cACpCnW,KAAKoW,qBAAuBvW,EAAQwW,cACpCrW,KAAKyB,GAAK5B,EAAQ4B,GAClBzB,KAAKsW,UAAY,IAAI3J,EAAO4J,gBAAgB1W,EAAQe,UACpD+M,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAAS5H,EACT5T,MAAO+E,KAAK0W,mBAEhB,CACID,QAAS7H,EACT3T,MAAO+E,KAAK0W,qBAGpB,MAAMnY,EAAOyB,KACbA,KAAK2W,uBAAyB,CAC1B,mBACI,OAAOpY,EAAKqC,SAASU,eAG7BtB,KAAK4W,WAAa,CACd,gBACI,OAAOrY,EAAK6G,OAAOtH,KAEvB,qBACI,OAAOS,EAAKqC,SAAS6Q,gBAEzB,mBACI,OAAOlT,EAAKqC,SAASiW,cAEzB,WACI,OAAOtY,EAAKqC,SAASkW,MAEzB,2BACI,OAAOvY,EAAKqC,SAASmW,uBAG7B/W,KAAKgX,qBAAuB,CACxB,qBACI,OAAOzY,EAAKqC,SAASqW,gBAEzB,iBACI,OAAO1Y,EAAKqY,YAEhB,2BACI,OAAOrY,EAAKmW,sBAEhB,4BACI,OAAOnW,EAAKkX,uBAEhB,mBACI,OAAOlX,EAAKmX,cAEhB,iBACI,OAAOnX,EAAKqX,aAGpB5V,KAAKnB,QAET,qBAAoB,SAAE+B,EAAQ,QAAEO,EAAO,GAAEM,IACrC,MAAOwU,EAAcI,SAAuBzb,QAAQmW,IAAI,CACpD5P,EAAQ0D,MAAMN,eACdpD,EAAQ4C,OAAOQ,iBAEnB,IAAI4R,OACiBhW,IAAjB8V,IACAE,QAAsBhV,EAAQ0D,MAAMR,OAAO,CAAElB,YAAa8S,EAAa7L,MAAQ,KAEnF,MAAM7I,EAAa,IAAImM,EAAW,CAC9BuI,eACAI,gBACAF,gBACAvV,WACAO,UACAM,OAQJ,YANsBtB,IAAlBkW,SACM9U,EAAW2V,eAAe,CAACtW,EAASuW,aAAapT,cAEtC5D,IAAjB8V,SACM1U,EAAW6V,aAAa,CAAEvS,MAAOjE,EAASuW,eAE7C5V,EAEX,eACI,OAAOvB,KAAKsW,UAAUe,WAE1B,mBACI,QAAiClX,IAA7BH,KAAKgW,oBACL,MAAM,IAAIhT,EAASsU,+BAEvB,OAAOtX,KAAKgW,oBAEhB,oBACI,OAAOhW,KAAKkW,qBAEhB,oBACI,QAAkC/V,IAA9BH,KAAKoW,qBACL,MAAM,IAAIpT,EAASsU,+BAEvB,OAAOtX,KAAKoW,qBAEhB,wBACI,YAAoCjW,IAA7BH,KAAKgW,qBAAqC,EAAIhW,KAAKiW,aAAa7L,MAE3E,aACI,OAAOpK,KAAKuQ,cAEhB,wBACI,OAAOvQ,KAAK8P,wBAEhB,cACI,OAAO9P,KAAKmB,QAAQqE,QAExB,uBACI,OAAOxF,KAAKmB,QAAQ4E,iBAExB,qBACI,OAAO/F,KAAKmB,QAAQmF,eAExB,aACI,OAAOtG,KAAKmB,QAAQuF,OAExB,YACI,OAAO1G,KAAKmB,QAAQ2F,MAExB,YACI,OAAO9G,KAAKmB,QAAQ0D,MAExB,gBACI,OAAO7E,KAAKmB,QAAQmE,UAExB,aACI,OAAOtF,KAAKmB,QAAQ4C,OAExB,kBACI,OAAO/D,KAAKmB,QAAQ+D,YAExB,sBACI,OAAOlF,KAAKmB,QAAQ6F,gBAExB,aACI,OAAOhH,KAAKmB,QAAQiE,OAExB,eACI,OAAOpF,KAAKmB,QAAQ+F,SAExB,kBACI,OAAOlH,KAAKmB,QAAQiG,YAExB,gBACI,OAAOpH,KAAKmB,QAAQqG,UAExB,qBACI,OAAOxH,KAAKmB,QAAQyG,eAExB,sBACI,OAAO5H,KAAKmB,QAAQ2G,gBAExB,aACI,GAAK9H,KAAKsQ,eAAV,CAGA,GAAItQ,KAAK8P,wBAAyB,CAC9B,MAAMyH,EAAqB,IAAI3c,QAASC,IACpCmF,KAAKwX,0BAA4B3c,IAErCmF,KAAKsQ,gBAAiB,QAChBiH,EACNvX,KAAKwX,+BAA4BrX,OAGjCH,KAAKsQ,gBAAiB,EAE1BnC,EAAOsJ,KAAK,CAAEhZ,KAAM,uBAAyB,4BAEjD,eAAemC,GACXZ,KAAKsW,UAAU/I,KAAK3M,GAExB,oBAAmB,MAAEiE,EAAK,OAAE6S,GAAS,IACjC,OAAO,IAAI9c,QAAQ,CAACC,EAAS2N,KACrBxI,KAAKoQ,eAAe7S,IAAIsH,EAAM8S,SAC9B9c,KAGJmF,KAAKoQ,eAAe5S,IAAIqH,EAAM8S,SAC9B3X,KAAK+P,kBAAkB6H,MAAM,CACzB/S,QACAhK,UACA2N,SACAkP,WAEJ1X,KAAK6X,wBAGb,qBAAqBC,IAErB,kBAAkBjT,SACRA,EAAMkT,OAAO,CACfZ,aAAcnX,KAAKY,SAASuW,aAC5Ba,YAAahY,KAAK6E,MAAMR,OACxB4T,aAAcjY,KAAK+D,OAAOM,OAC1ByR,QAAS9V,KAAK8V,QACdoC,SAAUlY,KAAK8G,MAAMhJ,IACrBqa,UAAWnY,KAAKoF,OAAOtH,IACvBsa,cAAepY,KAAKwF,QAAQnB,OAC5BoM,cAAezQ,KAAKyQ,cACpBzP,kBAAmBhB,KAAKY,SAASI,kBACjC6U,iBAAkB7V,KAAK6V,iBACvBjF,qBAAsBzV,MAAO0V,GAAW7Q,KAAK4Q,qBAAqBC,GAClEsB,aAAchX,MAAO0E,GAAYG,KAAKmS,aAAatS,GACnDwY,mBAA4ClY,IAA7BH,KAAKgW,oBAAoC,EAAIhW,KAAKgW,oBAAoB5L,MACrFqH,eAAgBzR,KAAKY,SAAS6Q,eAC9BoF,aAAc7W,KAAKY,SAASiW,aAC5BC,KAAM9W,KAAKY,SAASkW,KACpBC,qBAAsB/W,KAAKY,SAASmW,uBAG5C,6BAA6BuB,SACnBA,EAAQP,OAAO,CACjBtH,cAAetV,SAAY6E,KAAKyQ,cAAc,IAC9C0B,aAAchX,MAAO0E,GAAYG,KAAKmS,aAAatS,GACnD0Y,kBAA2CpY,IAA7BH,KAAKgW,oBAAoC,EAAIhW,KAAKgW,oBAAoB5L,MACpFoO,iBAAkBxY,KAAKiW,aAAa7S,OAG5C,yBAAwB,YAAE8B,EAAW,QAAEuT,IACnC,IAiBI,MAAO,CAAEC,oBAhBmBxT,EAAY6S,OAAO,CAC3CnH,qBAAsB5Q,KAAK4Q,qBAC3BkF,QAAS9V,KAAK8V,QACdoC,SAAUlY,KAAK8G,MAAMhJ,IACrBqa,UAAWnY,KAAKoF,OAAOtH,IACvBsa,cAAepY,KAAKwF,QAAQnB,OAC5BrD,kBAAmBhB,KAAKY,SAASI,kBACjC6U,iBAAkB7V,KAAK6V,iBACvB1D,aAAchX,MAAO0E,GAAYG,KAAKmS,aAAatS,GACnD4R,eAAgBzR,KAAKY,SAAS6Q,eAC9BoF,aAAc7W,KAAKY,SAASiW,aAC5BC,KAAM9W,KAAKY,SAASkW,KACpBC,qBAAsB/W,KAAKY,SAASmW,qBACpCsB,cAAerY,KAAK0W,kBACpB+B,aAIR,MAAOjV,GACH,QAAmBrD,IAAfqD,EAAMuI,MAA4C,iBAAfvI,EAAMuI,OAAsBvI,EAAMuI,KAAK4M,SAAS,UACnF,MAAM,IAAI3V,EAAS4V,mBAAmBpV,EAAMtK,SAEhD,MAAMsK,GAGd,mBAAmBqV,GACf,MAAM3T,EAAc,IAAIvC,EAAYmW,sBAAsB,CACtDD,SACAnF,IAAK/K,EAAgB9F,OAAOkW,qBAEhC,OAAO/Y,KAAKgZ,kBAAkB9T,GAElC,wBAAwBA,GACpB,MAAM3D,EAAavB,KAAK8S,wBAClBC,EAAiB,GACvB,IAAIC,EAAoB,IAAInF,EAAQoF,GAAG,GA+BvC,MAAO,CACH5P,aA/BiB4K,EAAqBgL,mBAAmB9d,SAAY6E,KAAKyB,GAAG0R,eAAe,CAC5FC,QAAS,CAAC,CAAErH,KAAM7G,EAAY2T,SAC9BtX,aACA6Q,gBAAiB,CACbhY,KAAMuI,EAAYuW,oBAAoBC,YACtCle,MAAOiK,GAEX0O,UAAW,CACPC,MAAO,EAAG3a,UAAS4a,iBACff,EAAepV,KAAK,IAAIgF,EAAYoR,UAAU,CAC1C3J,MAAO4I,EACPc,aACA5a,aAEJ8Z,EAAoBA,EAAkBxV,IAAImF,EAAY8H,MAAMuJ,MAEhEC,SAAU,EAAG7Y,OAAM0Y,iBACff,EAAepV,KAAK,IAAIgF,EAAYuR,mBAAmB,CACnD9J,MAAO4I,EACPc,aACA1Y,UAEJ4X,EAAoBA,EAAkBxV,IAAImF,EAAY8H,MAAMuJ,OAGpEV,YAAa3Q,EAAY4Q,YAAY6F,YACrC1S,OAAQ/D,EAAY8Q,YACpBC,IAAKxO,EAAYwO,IACjB2F,mBAAmB,KAInBlF,QAASpB,GAGjB,oBACU/S,KAAKsZ,aACLtZ,KAAKmB,QAAQc,QACnBjC,KAAKoW,0BAAuBjW,EAC5BH,KAAKgW,yBAAsB7V,EAC3BH,KAAKkW,0BAAuB/V,EAC5BH,KAAKnB,cACCmB,KAAKkX,eAAe,CAAClX,KAAKY,SAASuW,aAAapT,eAChD/D,KAAKoX,aAAa,CAAEvS,MAAO7E,KAAKY,SAASuW,eAEnD,2BACI,GAAInX,KAAK8P,0BAA4B9P,KAAKsQ,eACtC,OAGJ,IAAIiJ,EADJvZ,KAAK8P,yBAA0B,EAE/B,IAEI,IADAyJ,EAAQvZ,KAAKwZ,kBACNxZ,KAAKsQ,qBAA4BnQ,IAAVoZ,GAAuBA,EAAM1U,MAAMuF,QAAUpK,KAAK0W,kBAAoB,GAAG,CACnG,MAAM+C,EAAYC,KAAKC,MACjBC,EAAeL,EACfM,EAAU,CACZ,CAACjR,EAAQkR,OAAOC,iBAAkBR,EAAM1U,MAAMuF,MAC9C3L,KAAM,0CAEV,UACUuB,KAAKga,qBAAqBJ,EAAa/U,MAAO+U,EAAalC,QACjEvJ,EAAOwC,MAAMkJ,GACblM,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAAS3H,EACT7T,MAAOye,KAAKC,MAAQF,KAIhC,MAAOQ,GAQH,MAPA9L,EAAO3K,MAAMpK,OAAOC,OAAO,CAAE4gB,OAAOJ,IACpClM,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAASlI,EACTtT,MAAO,KAGTgf,EAEVV,EAAM1e,UACNmF,KAAKuQ,cAAchD,KAAKgM,EAAM1U,OAC9B8I,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAAS7H,EACT3T,MAAOse,EAAM1U,MAAMuF,OAEvB,CACIqM,QAASxH,EACThU,MAAO2N,EAAQ6B,MAAMyP,aAAeX,EAAM1U,MAAMsV,aAGxDZ,EAAQvZ,KAAKwZ,uBAEHrZ,IAAVoZ,GACAvZ,KAAK+P,kBAAkB6H,MAAM2B,GAGrC,MAAO/V,QACWrD,IAAVoZ,GACAA,EAAM/Q,OAAOhF,GAGrB,QACIxD,KAAK8P,yBAA0B,OACQ3P,IAAnCH,KAAKwX,4BACLxX,KAAKwX,4BACLxX,KAAKwX,+BAA4BrX,IAI7C,kBACI,IAAIoZ,EAAQvZ,KAAKoa,kBACjB,UAAiBja,IAAVoZ,GAAuBA,EAAM1U,MAAMuF,OAASpK,KAAK0W,mBACpD6C,EAAM1e,UACN0e,EAAQvZ,KAAKoa,kBAEjB,OAAOb,EAEX,kBACI,GAAIvZ,KAAK+P,kBAAkBxV,OAAS,EAChC,OAAOyF,KAAK+P,kBAAkBsK,UAItC,QACIra,KAAKuQ,cAAgB,IAAI5D,EAAO6D,QAChCxQ,KAAK8P,yBAA0B,EAC/B9P,KAAK+P,kBAAoB,IAAIjC,EAAoBkC,QAAQ,CACrDC,WAAY,CAACC,EAAGC,IAAMD,EAAErL,MAAMuF,MAAQ+F,EAAEtL,MAAMuF,QAElDpK,KAAKoQ,eAAiB,IAAIC,IAC1BrQ,KAAKwX,+BAA4BrX,EACjCH,KAAKsQ,gBAAiB,EACtBnC,EAAOsJ,KAAK,CAAEhZ,KAAM,wBAA0B,2BAElD,2BAA2BoG,EAAO6S,GAC9B/J,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAAS5H,EACT5T,MAAO4J,EAAMuF,SAGhBsN,SACK1X,KAAKsa,YAAYzV,GAE3B,MAAMtD,EAAavB,KAAK8S,8BAClBvR,EAAW6V,aAAavS,SACxB7E,KAAKmB,QAAQoZ,OAAOhZ,EAAWiZ,gBACrCxa,KAAKkW,qBAAuBlW,KAAKgW,oBACjChW,KAAKgW,oBAAsBnR,EAC3B7E,KAAKoW,qBAAuBvR,EAAMd,OAEtC,wBACI,OAAO,IAAImK,EAAuBuM,qBAAqB,CACnD7Z,SAAUZ,KAAKY,SACfqV,aAAcjW,KAAKgW,oBACnBK,cAAerW,KAAKoW,qBACpBjV,QAASnB,KAAKmB,QACdM,GAAIzB,KAAKyB,GACTgP,cAAezQ,KAAKyQ,iBAIhClO,EAAQmL,WAAaA,G,kCC1nBrBtU,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBgY,EAAkB,EAAQ,MAC1BC,EAASjY,EAAQqL,gBAAgB,EAAQ,OACzC6M,EAAe,CAACC,EAAShb,EAAU,UAA2BM,IAApBN,EAAQib,QAClDH,EAAO3K,QAAQ5W,OAAOC,OAAOD,OAAOC,OAAO,GAAIwG,GAAU,CAAEkb,KAAM,CAAEF,WAAWG,YAAaN,EAAgBO,eAC3GN,EAAO3K,QAAQ5W,OAAOC,OAAOD,OAAOC,OAAO,GAAIwG,GAAU,CAAEkb,KAAM,CAAEF,WAAWG,YAAaN,EAAgBO,cAAwDN,EAAO3K,QAAQkL,QAAQ,IAC1LC,EAAmC,oBAAXC,QAA4C,oBAAXC,OAAyB,GAAK,CAAEP,QAAS,CAAEQ,UAAU,IACpH/Y,EAAQgZ,aAAeX,EAAa,gBAAiBO,GACrD5Y,EAAQiZ,aAAeZ,EAAa,SAAUO,GAC9C5Y,EAAQ8L,WAAauM,EAAa,OAAQO,GAC1C5Y,EAAQkZ,UAAYb,EAAa,MAAOO,GACxC5Y,EAAQmZ,UAAYd,EAAa,MAAOO,GACxC5Y,EAAQoZ,WAAaf,EAAa,OAAQO,GAC1C5Y,EAAQqZ,WAAahB,EAAa,OAAQO,GAC1C,IAAIU,EAAU,CACVtZ,EAAQgZ,aACRhZ,EAAQiZ,aACRjZ,EAAQ8L,WACR9L,EAAQkZ,UACRlZ,EAAQmZ,UACRnZ,EAAQoZ,WACRpZ,EAAQqZ,YAEZrZ,EAAQuZ,kBAAqBC,GAAUF,EAAQG,QAAS7N,IACpDA,EAAO4N,MAAQA,IAEnBxZ,EAAQ0Z,eAAkB9N,GAAWwM,EAAO3K,QAAQkM,MAAM/N,GAC1D5L,EAAQ6L,YAAc,CAAC+N,EAAQC,KAC3B,MAAMC,EAAQF,EAAOE,MAAMD,GAE3B,OADAP,EAAUA,EAAQ9gB,OAAOshB,GAClBA,I,kCC/BXjjB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtC,EAAQ,IAChBqhB,aAAa,EAAQ,MAAa/Z,I,kCCF1CnJ,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIshB,GAAS,EACbha,EAAQ0Y,UAAY,IAAMsB,EAC1Bha,EAAQia,UAAaC,IACjBF,EAASE,I,kCCJbrjB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtB+Z,EAAWha,EAAQqL,gBAAgB,EAAQ,KAC3ClC,EAAc,EAAQ,IAwH5BtJ,EAAQoa,eAvHR,MACI,YAAYpb,GACRvB,KAAKuB,WAAaA,EAClBvB,KAAK4c,gBAAkB,GACvB5c,KAAK6c,kBAAoB,GAE7B,iBAAiBzZ,GACb,IAAIoC,EAAUxF,KAAK4c,gBAAgBjU,EAAgB9F,OAAOia,aAAa1Z,IAQvE,YAPgBjD,IAAZqF,IACAA,QAAgBxF,KAAKuB,WAAWiE,QAAQnB,OAAO,CAAEjB,eAErCjD,IAAZqF,IACAA,EAAU,IAAI7C,EAAYmD,QAAQ,CAAE1C,UAExCpD,KAAK4c,gBAAgBjU,EAAgB9F,OAAOia,aAAa1Z,IAASoC,EAC3DA,EAEX,2BAA2BpC,EAAM0D,EAAO7L,GACpC,MAAM8hB,EAAWpU,EAAgB9F,OAAOma,aAAalW,SAC/C9G,KAAKid,WAAW7Z,GACtB,MAAMuU,EAAUhP,EAAgB9F,OAAOia,aAAa1Z,GAC9CoC,EAAUxF,KAAK4c,gBAAgBjF,GAC/BuF,EAAU1X,EAAQ2X,SAASJ,GACjC/c,KAAK4c,gBAAgBjF,GAAWnS,EAAQ4X,OAAO,CAC3CD,SAAU/jB,OAAOC,OAAOD,OAAOC,OAAO,GAAImM,EAAQ2X,UAAW,CAAE,CAACJ,GAAW9hB,EAAMuC,SAAgB2C,IAAZ+c,EAAwBvU,EAAgB8B,MAAM4S,KAAOH,OAGlJ,mBAAmBlS,GACf,MAAMsS,EAAe3U,EAAgB9F,OAAO0a,aAAavS,GACzD,IAAIxD,EAAYxH,KAAK6c,kBAAkBS,GAQvC,YAPkBnd,IAAdqH,IACAA,QAAkBxH,KAAKuB,WAAWiG,UAAUnD,OAAO,CAAE2G,oBAEvC7K,IAAdqH,IACAA,EAAY,IAAI7E,EAAYgF,UAAU,CAAEqD,eAE5ChL,KAAK6c,kBAAkBS,GAAgB9V,EAChCA,EAEX,mBAAmBA,GACfxH,KAAK6c,kBAAkBlU,EAAgB9F,OAAO0a,aAAa/V,EAAUwD,YAAcxD,EAEvF,sBAAsBwD,GAClBhL,KAAK6c,kBAAkBlU,EAAgB9F,OAAO0a,aAAavS,SAAc7K,EAE7E,2BAA2B6K,EAAW/P,SAC5B+E,KAAKwd,aAAaxS,GACxB,MAAMsS,EAAe3U,EAAgB9F,OAAO0a,aAAavS,GACnDxD,EAAYxH,KAAK6c,kBAAkBS,GACzC,QAAkBnd,IAAdqH,EACA,MAAM,IAAIvO,MAAM,YAEpB+G,KAAK6c,kBAAkBS,GAAgB9V,EAAU4V,OAAO,CACpDK,MAAOjW,EAAUiW,MAAMjgB,IAAIvC,KAGnC,sBAAsB+P,EAAWoS,SACvBpd,KAAKwd,aAAaxS,GACxB,MAAMsS,EAAe3U,EAAgB9F,OAAO0a,aAAavS,GACnDxD,EAAYxH,KAAK6c,kBAAkBS,GACzC,QAAkBnd,IAAdqH,EACA,MAAM,IAAIvO,MAAM,YAEpB,MAAMykB,EAAelW,EAAU4V,OAAOA,GAEtC,OADApd,KAAK6c,kBAAkBS,GAAgBI,EAChCA,EAEX,yBACI,MAAMC,QAAmB3d,KAAKuB,WAAWiG,UAAUgF,KAAKF,KAAKT,EAAYsJ,WAAWC,YAC9EwI,EAA8BlB,EAAS1M,QAAQ6N,UAAUF,EAAWriB,IAAKkM,GAAc,CAACmB,EAAgB9F,OAAO0a,aAAa/V,EAAUwD,WAAYxD,KAUxJ,OATApO,OAAO0kB,QAAQ9d,KAAK6c,mBAAmBb,QAAQ,EAAEhR,EAAWxD,MACxD,MAAM8V,EAAe3U,EAAgB9F,OAAO0a,aAAavS,QACvC7K,IAAdqH,SACOoW,EAA4BN,GAGnCM,EAA4BN,GAAgB9V,IAG7CpO,OAAOuc,OAAOiI,GAEzB,2BACI,IAAI9V,EAAkB9H,KAAK+d,uBAQ3B,YAPwB5d,IAApB2H,IACAA,QAAwB9H,KAAKuB,WAAWuG,gBAAgBzD,eAEpClE,IAApB2H,IACAA,EAAkB,IAAInF,EAAYsF,iBAEtCjI,KAAK+d,uBAAyBjW,EACvBA,EAEX,iCAAiCsC,EAAOnP,SAC9B+E,KAAKge,qBACX,MAAMlW,EAAkB9H,KAAK+d,uBAC7B,QAAwB5d,IAApB2H,EACA,MAAM,IAAI7O,MAAM,YAEpB,MAAMwkB,EAAQ3V,EAAgB2V,MAAMrT,GACpCpK,KAAK+d,uBAAyBjW,EAAgBsV,OAAO,CACjDK,MAAO3V,EAAgB2V,MAClBjjB,MAAM,EAAG4P,GACTrP,aAAkBoF,IAAVsd,EAAsB9U,EAAgB8B,MAAM4S,KAAOI,GAAOjgB,IAAIvC,IACtEF,OAAO+M,EAAgB2V,MAAMjjB,MAAM4P,EAAQ,MAGxD,yBAAyBtC,GACrB9H,KAAK+d,uBAAyBjW,EAElC,4BAA4BsV,SAClBpd,KAAKge,qBACX,MAAMlW,EAAkB9H,KAAK+d,uBAC7B,QAAwB5d,IAApB2H,EACA,MAAM,IAAI7O,MAAM,YAGpB,OADA+G,KAAK+d,uBAAyBjW,EAAgBsV,OAAOA,GAC9Cpd,KAAK+d,0B,kCC1HpB3kB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClBiF,EAAU,EAAQ,IAClB6O,EAAWha,EAAQqL,gBAAgB,EAAQ,KAC3C/K,EAAW,EAAQ,KACnBgL,EAAkB,EAAQ,KAC1BiQ,EAAiB,EAAQ,MACzBhQ,EAAuB,EAAQ,KACrC,MAAMwM,EACF,YAAY5a,GACRG,KAAKY,SAAWf,EAAQe,SACxBZ,KAAKke,qBAAuBre,EAAQoW,aACpCjW,KAAKme,sBAAwBte,EAAQwW,cACrCrW,KAAKmB,QAAUtB,EAAQsB,QACvBnB,KAAKyB,GAAK5B,EAAQ4B,GAClBzB,KAAKyQ,cAAgB5Q,EAAQ4Q,cAC7B,MAAMrL,EAAS,IAAI6Y,EAAeG,mBAAmB,IAAMpe,KAAKmB,QAAQiE,QACxEpF,KAAKqe,OAAS,CACV7Y,QAAS,IAAIyY,EAAeK,mCAAmC,CAC3D7f,KAAM,UACN8f,eAAgB,IAAMve,KAAKmB,QAAQqE,QACnC4X,OAAQ,CAACniB,EAAOmiB,IAAWniB,EAAMmiB,OAAOA,GACxCoB,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAO/B,gBAAgB/D,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,UAAWa,UAChD0jB,mBAAqB5hB,IAAQ,CAAG3C,KAAM,UAAW2C,UAErDuJ,eAAgB,IAAI2X,EAAeW,gCAAgC,CAC/DngB,KAAM,iBACNogB,kBAAmB,IAAM7e,KAAKmB,QAAQmF,eACtCkY,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,KAAM8G,MAAOjP,EAAMiP,QAC9DuU,aAAe1hB,GAAQ,GAAG4L,EAAgB9F,OAAO/B,gBAAgB/D,EAAIqG,SAASuF,EAAgB9F,OAAOsH,gBAAgBpN,EAAImN,MAAM9G,SAASrG,EAAImN,MAAME,QAClJ0U,kBAAmB,CAAC7jB,EAAO8B,IAAQ4L,EAAgB9F,OAAO6P,aAAazX,EAAMmI,KAAMrG,EAAIqG,MACvFsb,gBAAkBzjB,IAAU,CAAGb,KAAM,iBAAkBa,UACvD0jB,mBAAqB5hB,IAAQ,CAAG3C,KAAM,iBAAkB2C,UAE5DgJ,iBAAkB,IAAIkY,EAAeW,gCAAgC,CACjEngB,KAAM,mBACNogB,kBAAmB,IAAM7e,KAAKmB,QAAQ4E,iBACtCyY,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,KAAM8G,MAAOjP,EAAMiP,QAC9DuU,aAAe1hB,GAAQ,GAAG4L,EAAgB9F,OAAO/B,gBAAgB/D,EAAIqG,SAASuF,EAAgB9F,OAAOsH,gBAAgBpN,EAAImN,MAAM9G,SAASrG,EAAImN,MAAME,QAClJ0U,kBAAmB,CAAC7jB,EAAO8B,IAAQ4L,EAAgB9F,OAAO6P,aAAazX,EAAMmI,KAAMrG,EAAIqG,MACvFsb,gBAAkBzjB,IAAU,CAAGb,KAAM,mBAAoBa,UACzD0jB,mBAAqB5hB,IAAQ,CAAG3C,KAAM,mBAAoB2C,UAE9D2J,OAAQ,IAAIuX,EAAec,0BAA0B,CACjDtgB,KAAM,SACNogB,kBAAmB,IAAM7e,KAAKmB,QAAQuF,OACtC8X,gBAAkBvjB,IAAU,CACxBmP,MAAOnP,EAAMmP,QAEjBqU,aAAe1hB,GAAQA,EAAIqN,MAAMG,SAAS,IAC1CuU,kBAAmB,CAAC7jB,EAAO8B,UAA4BoD,IAAnBpD,EAAIkO,YAA4BhQ,EAAMmP,MAAMgC,IAAIrP,EAAIkO,oBACjE9K,IAAlBpD,EAAImO,WAA2BjQ,EAAMmP,MAAMiC,IAAItP,EAAImO,YACxDwT,gBAAkBzjB,IAAU,CAAGb,KAAM,SAAUa,YAEnD6L,MAAO,IAAImX,EAAee,0BAA0B,CAChDvgB,KAAM,QACN8N,YAAa,IAAMvM,KAAKmB,QAAQ2F,MAChCsW,OAAQ,CAACniB,EAAOmiB,IAAWniB,EAAMmiB,OAAOA,GACxCoB,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAOsH,gBAAgBpN,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,QAASa,YAElD4J,MAAO,IAAIoZ,EAAegB,sBAAsB,CAC5CxgB,KAAM,QACN8N,YAAa,KAAM,CACfzO,IAAKkC,KAAKmB,QAAQ0D,MAAM/G,IACxBuG,OAAQrE,KAAKmB,QAAQ0D,MAAMR,SAE/Bqa,gBAAkBzjB,IAAU,CAAGb,KAAM,QAASa,YAElDqK,UAAW,IAAI2Y,EAAeiB,oBAAoB,CAC9CzgB,KAAM,YACN8N,YAAa,IAAMvM,KAAKmB,QAAQmE,UAChCkZ,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAOsH,gBAAgBpN,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,YAAaa,YAEtD8I,OAAQ,IAAIka,EAAegB,sBAAsB,CAC7CxgB,KAAM,SACN8N,YAAa,KAAM,CACfzO,IAAKkC,KAAKmB,QAAQ4C,OAAOjG,IACzBuG,OAAQrE,KAAKmB,QAAQ4C,OAAOM,SAEhCqa,gBAAkBzjB,IAAU,CAAGb,KAAM,SAAUa,YAEnDiK,YAAa,IAAI+Y,EAAeiB,oBAAoB,CAChDzgB,KAAM,cACN8N,YAAa,IAAMvM,KAAKmB,QAAQ+D,YAChCsZ,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAOsH,gBAAgBpN,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,cAAea,UACpDkkB,MAAOhkB,MAAOF,UACJL,QAAQmW,IAAI9V,EAAMmkB,QAAQ9jB,IAAIH,MAAOkkB,EAAKjV,IAAUhF,EAAO5H,IAAI,CAAE4F,KAAMnI,EAAMmI,KAAMgH,QAAOhF,OAAQia,OAE5GC,YAAY,IAEhBtY,gBAAiB,IAAIiX,EAAee,0BAA0B,CAC1DvgB,KAAM,kBACN8N,YAAa,IAAMvM,KAAKmB,QAAQ6F,gBAChCoW,OAAQ,CAACniB,EAAOmiB,IAAWniB,EAAMmiB,OAAOA,GACxCoB,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAOsH,gBAAgBpN,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,kBAAmBa,UACxDqkB,YAAY,IAEhBla,SACA8B,SAAU,IAAI+W,EAAesB,0BAA0B,CACnD9gB,KAAM,WACN8N,YAAa,IAAMvM,KAAKmB,QAAQ+F,SAChCsX,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAO/B,gBAAgB/D,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,WAAYa,UACjD0jB,mBAAqB5hB,IAAQ,CAAG3C,KAAM,WAAY2C,UAEtDqK,YAAa,IAAI6W,EAAeuB,sCAAsC,CAClE/gB,KAAM,cACNogB,kBAAmB,IAAM7e,KAAKmB,QAAQiG,YACtCgW,OAAQ,CAACniB,EAAOmiB,IAAWniB,EAAMmiB,OAAOA,GACxCoB,gBAAkBvjB,IAAU,CACxBmI,KAAMnI,EAAMmI,KACZrG,IAAK9B,EAAM8B,MAEf0hB,aAAe1hB,GAAQ,GAAG4L,EAAgB9F,OAAO/B,gBAAgB/D,EAAIqG,SAASrG,EAAIA,IAAIwN,SAAS,SAC/FuU,kBAAmB,CAAC7jB,EAAO8B,UAAsBoD,IAAbpD,EAAIqG,MAAsBuF,EAAgB9F,OAAO6P,aAAazX,EAAMmI,KAAMrG,EAAIqG,cAC9FjD,IAAfpD,EAAIkN,QAAwBlN,EAAIkN,OAAOnL,MAAM,CAAC2gB,EAAMC,IAAQzkB,EAAM8B,IAAI2iB,KAASD,IACpFf,gBAAkBzjB,IAAU,CAAGb,KAAM,cAAea,UACpD0jB,mBAAqB5hB,IAAQ,CAAG3C,KAAM,cAAe2C,UAEzDyK,UAAW,IAAIyW,EAAeK,mCAAmC,CAC7D7f,KAAM,YACN8f,eAAgB,IAAMve,KAAKmB,QAAQqG,UACnCgX,gBAAkBvjB,IAAU,CAAG+P,UAAW/P,EAAM+P,YAChDyT,aAAe1hB,GAAQ4L,EAAgB9F,OAAO5B,gBAAgBlE,EAAIiO,WAClE0T,gBAAkBzjB,IAAU,CAAGb,KAAM,YAAaa,UAClDmiB,OAAQ,CAACniB,EAAOmiB,IAAWniB,EAAMmiB,OAAOA,GACxCuB,mBAAqB5hB,IAAQ,CAAG3C,KAAM,YAAa2C,UAEvD6K,eAAgB,IAAIqW,EAAeiB,oBAAoB,CACnDzgB,KAAM,iBACN8N,YAAa,IAAMvM,KAAKmB,QAAQyG,eAChC4W,gBAAkBvjB,IAAU,CAAGmI,KAAMnI,EAAMmI,OAC3Cqb,aAAe1hB,GAAQ4L,EAAgB9F,OAAOsH,gBAAgBpN,EAAIqG,MAClEsb,gBAAkBzjB,IAAU,CAAGb,KAAM,iBAAkBa,YAE3D6M,gBAAiB,IAAImW,EAAe0B,kCAAkC,CAClElhB,KAAM,kBACN8N,YAAa,IAAMvM,KAAKmB,QAAQ2G,gBAChC4W,gBAAkBzjB,IAAU,CAAGb,KAAM,kBAAmBa,UACxDmiB,OAAQ,CAACniB,EAAOmiB,IAAWniB,EAAMmiB,OAAOA,MAGhDpd,KAAKwF,QAAUxF,KAAKqe,OAAO7Y,QAC3BxF,KAAKsG,eAAiBtG,KAAKqe,OAAO/X,eAClCtG,KAAK+F,iBAAmB/F,KAAKqe,OAAOtY,iBACpC/F,KAAK0G,OAAS1G,KAAKqe,OAAO3X,OAC1B1G,KAAK8G,MAAQ9G,KAAKqe,OAAOvX,MACzB9G,KAAK6E,MAAQ7E,KAAKqe,OAAOxZ,MACzB7E,KAAKsF,UAAYtF,KAAKqe,OAAO/Y,UAC7BtF,KAAK+D,OAAS/D,KAAKqe,OAAOta,OAC1B/D,KAAKkF,YAAclF,KAAKqe,OAAOnZ,YAC/BlF,KAAKgH,gBAAkBhH,KAAKqe,OAAOrX,gBACnChH,KAAKoF,OAASpF,KAAKqe,OAAOjZ,OAC1BpF,KAAKkH,SAAWlH,KAAKqe,OAAOnX,SAC5BlH,KAAKoH,YAAcpH,KAAKqe,OAAOjX,YAC/BpH,KAAKwH,UAAYxH,KAAKqe,OAAO7W,UAC7BxH,KAAK4H,eAAiB5H,KAAKqe,OAAOzW,eAClC5H,KAAK8H,gBAAkB9H,KAAKqe,OAAOvW,gBAEvC,mBACI,QAAkC3H,IAA9BH,KAAKke,qBACL,MAAM,IAAIlb,EAASsU,+BAEvB,OAAOtX,KAAKke,qBAEhB,wBACI,YAAqC/d,IAA9BH,KAAKke,qBAAqC,EAAIle,KAAKke,qBAAqB9T,MAEnF,oBACI,QAAmCjK,IAA/BH,KAAKme,sBACL,MAAM,IAAInb,EAASsU,+BAEvB,OAAOtX,KAAKme,sBAEhB,eACI,OAAO/kB,OAAOuc,OAAO3V,KAAKqe,QAAQ3hB,OAAO,CAAC2L,EAAKuX,IAAUvX,EAAItN,OAAO6kB,EAAMpF,gBAAiB,IAE/F,sBACI,OAAOphB,OAAOuc,OAAO3V,KAAKqe,QAAQ3hB,OAAO,CAAC2L,EAAKuX,IAAUvX,EAAItN,OAAO6kB,EAAMC,uBAAwB,IAEtG,mBAAmBhb,GACf,MAAOib,EAAoBC,SAA6BnlB,QAAQmW,IAAI,CAChD,IAAhBlM,EAAMuF,MAAcxP,QAAQC,aAAQsF,GAAaH,KAAKsF,UAAUxH,IAAI,CAAEsF,KAAMyB,EAAMmb,eAClFplB,QAAQmW,IAAI,IACL,IAAIV,IAAIxL,EAAM6L,aAAahU,OAAO,CAAC2L,EAAKnD,IAAgBmD,EAAItN,OAAOmK,EAAYka,QAAQ9jB,IAAK8J,GAAWuD,EAAgB9F,OAAO/B,gBAAgBsE,EAAOvE,WAAY,MACtKvF,IAAIH,MAAOiI,GAASpD,KAAKkH,SAAS7C,OAAO,CAAEjB,KAAMuF,EAAgB9F,OAAOod,gBAAgB7c,OAC1FpD,KAAK6E,MAAMrH,IAAIqH,GACf7E,KAAK+D,OAAOvG,IAAIqH,EAAMd,UAEpBmc,OAAuC/f,IAAvB2f,EAChB,CACEK,2BAA4BxX,EAAgB8B,MAAM2V,aAClDC,sBAAuB1X,EAAgB8B,MAAM2V,aAC7ClO,UAAWvJ,EAAgB8B,MAAM4S,MAEnC,CACE8C,2BAA4BL,EAAmBK,2BAC/CE,sBAAuBP,EAAmBO,sBAC1CnO,UAAW4N,EAAmB5N,WAEhCoO,EAAkB,GACxBP,EAAoBvV,OAAO5B,EAAQ6B,MAAMC,SAASsR,QAASuE,IACvDD,EAAgBC,EAAe5I,SAAW4I,IAE9C,MAAOC,EAAMC,GAAQ/D,EAAS1M,QAAQ0Q,UAAU7b,EAAM6L,aAAapV,IAAI,CAAC4J,EAAawa,IAAQ,CAACA,EAAKxa,IAAe,EAAEwa,EAAKxa,MAAmBA,EAAY9K,OAASuI,EAAYge,gBAAgBC,OAAS1b,aAAuBvC,EAAYke,kBACpO3b,EAAY9K,OAASuI,EAAYge,gBAAgBxZ,UAAYjC,aAAuBvC,EAAYme,qBAChG5b,EAAY9K,OAASuI,EAAYge,gBAAgBI,OAAS7b,aAAuBvC,EAAYqe,oBAC7F9b,EAAYka,QAAQlgB,KAAMkG,QAAuFjF,IAA5EmgB,EAAgB3X,EAAgB9F,OAAO/B,gBAAgBsE,EAAOvE,aACjGmS,SAA2BpY,QAAQmW,IAAI,CAC1C0P,EAAKlmB,OAAS,EACRyF,KAAKihB,oBAAoBpc,EAAO4b,EAAMP,EAAcC,2BAA4BD,EAAcG,uBAC9FzlB,QAAQC,QAAQqlB,EAAcG,uBACpCG,EAAKjmB,OAAS,EAENyF,KAAKkhB,wBAAwBrc,EAAO2b,EAAMN,EAAcC,4BAC1DvlB,QAAQC,kBAEZmF,KAAKsF,UAAU9H,IAAI,IAAImF,EAAY4C,UAAU,CAC/CnC,KAAMyB,EAAMzB,KACZ+c,2BAA4BD,EAAcC,2BAA2B3iB,IAAI,IAAIqQ,EAAQoF,GAAGpO,EAAM6L,aAAanW,SAC3G8lB,sBAAuBrN,EACvBd,UAAWgO,EAAchO,UAAU1U,IAAIqH,EAAMoN,aAAa,CACtDkG,UAAWnY,KAAKoF,OAAOtH,IACvB2T,eAAgBzR,KAAKY,SAAS6Q,eAC9BoF,aAAc7W,KAAKY,SAASiW,aAC5BC,KAAM9W,KAAKY,SAASkW,KACpBC,qBAAsB/W,KAAKY,SAASmW,2BAIhD,8BAA8BlS,EAAO6L,EAAcyP,GAC/C,MAAMgB,EAAS,GACTtQ,EAAS,GACTuQ,EAAmB,GACzB,IAAK,MAAMC,KAAqB3Q,EAAc,CAC1C,MAAMxL,EAAcmc,EAAkB,GACtCF,EAAOxjB,QAAQuH,EAAYic,QACvBjc,EAAY9K,OAASuI,EAAYge,gBAAgBC,OAAS1b,aAAuBvC,EAAYke,kBAC7FhQ,EAAOlT,QAAQuH,EAAY2L,QAE/BuQ,EAAiBzjB,QAAQqC,KAAKshB,mBAAmBpc,UAE/CtK,QAAQmW,IAAI,CACdnW,QAAQmW,IAAIL,EAAapV,IAAIH,OAAQukB,EAAKxa,KAAiBlF,KAAKkF,YAAY1H,IAAI0H,KAChFtK,QAAQmW,IAAIL,EAAapV,IAAIH,OAAQukB,EAAKxa,KAAiBlF,KAAKgH,gBAAgBxJ,IAAI,IAAImF,EAAYsE,gBAAgB,CAChH7D,KAAM8B,EAAY9B,KAClByO,YAAahN,EAAMuF,MACnBmX,UAAW1c,EAAMzB,KACjBgH,MAAOsV,EACP8B,YAAarB,EAA2B3iB,IAAI,IAAIqQ,EAAQoF,GAAGyM,EAAM,SAErE1f,KAAKyhB,eAAeN,EAAQtQ,EAAQuQ,GACpCphB,KAAK0hB,YAAYP,EAAQtQ,EAAQhM,KAGzC,0BAA0BA,EAAO6L,EAAcyP,EAA4BE,GACvE,IAAIrN,EAAoBqN,EAAsB7iB,IAAImL,EAAgB8B,MAAMuJ,KACxE,IAAK,MAAO0L,EAAKxa,KAAgBwL,EAC7BsC,QAA0BhT,KAAK2hB,mBAAmB9c,EAAOK,EAAawa,EAAKS,EAA4BnN,GAE3G,OAAOA,EAAkBkC,IAAIvM,EAAgB8B,MAAMuJ,KAEvD,yBAAyBnP,EAAO+c,EAAeC,EAAkB1B,EAA4B2B,GACzF,IAAI9O,EAAoB8O,EACxB,MAAM5c,EAAc0c,EACd/Q,EAAS3L,EAAY9K,OAASuI,EAAYge,gBAAgBC,OAAS1b,aAAuBvC,EAAYke,iBAAmB3b,EAAY2L,OAAS,GACpJ,IAAIkR,EAAiB,GACjBC,EAAmB,GACnBC,EAAyB,GAqB7B,GApBI/c,EAAY9K,OAASuI,EAAYge,gBAAgBuB,OAAShd,aAAuBvC,EAAYwf,oBAC1FJ,iBAAgBC,mBAAkBC,gCAAiCjU,EAAgBoU,qBAAqB,CACvG1R,aAAc,CAACxL,GACf+X,WAAY9hB,MAAOiI,GAASpD,KAAKwF,QAAQnB,OAAO,CAAEjB,SAAQ1I,KAAM8K,QAAyBrF,IAAZqF,EAAwB,IAAI7C,EAAYmD,QAAQ,CAAE1C,SAAUoC,GACzI6c,mBAAoBriB,KAAKY,SAAS6Q,eAAekG,iBAGnD/c,QAAQmW,IAAI,CACd/Q,KAAKkF,YAAY1H,IAAI0H,GACrBlF,KAAKgH,gBAAgBxJ,IAAI,IAAImF,EAAYsE,gBAAgB,CACrD7D,KAAM8B,EAAY9B,KAClBme,UAAW1c,EAAMzB,KACjByO,YAAahN,EAAMuF,MACnBA,MAAOyX,EACPL,YAAarB,EAA2B3iB,IAAI,IAAIqQ,EAAQoF,GAAG4O,EAAmB,OAElF7hB,KAAKyhB,eAAevc,EAAYic,OAAQtQ,EAAQ7Q,KAAKshB,mBAAmBpc,GAAc6c,GACtF/hB,KAAK0hB,YAAYxc,EAAYic,OAAQtQ,EAAQhM,GAC7C7E,KAAKsiB,wBAAwBN,EAAkBC,KAE/C/c,EAAY9K,OAASuI,EAAYge,gBAAgB4B,UAAYrd,aAAuBvC,EAAY6f,0BAC1FxiB,KAAK8G,MAAMtJ,IAAI,IAAImF,EAAYoE,MAAM,CACvC3D,KAAM8B,EAAY9B,KAClBhJ,KAAM8K,EAAY4B,MAAM1M,KACxBqE,KAAMyG,EAAY4B,MAAMrI,KACxBgkB,OAAQvd,EAAY4B,MAAM2b,OAC1BC,UAAWxd,EAAY4B,MAAM4b,UAC7BC,MAAOzd,EAAY4B,MAAM6b,MACzBC,MAAO1d,EAAY4B,MAAM8b,MACzBC,OAAQ3d,EAAY4B,MAAM8b,MAC1BE,WAAY9iB,KAAK0W,kBAAoB,IACrCqM,UAAU,UAGb,GAAI7d,EAAY9K,OAASuI,EAAYge,gBAAgBqC,OAAS9d,aAAuBvC,EAAYsgB,iBAAkB,CACpH,MAAMC,QAAgBtoB,QAAQmW,IAAI3X,OAAO0kB,QAAQ5Y,EAAYie,sBAAsB,CAC/EhL,UAAWnY,KAAKoF,OAAOtH,cAErBlD,QAAQmW,IAAImS,EAAQ5nB,IAAIH,OAAQ4hB,EAAU9hB,MAC5C,MAAMmI,EAAOuF,EAAgB9F,OAAOugB,gBAAgBrG,GAC9CjW,QAAc9G,KAAK8G,MAAMhJ,IAAI,CAAEsF,eAC/BpD,KAAK8G,MAAMsW,OAAOtW,EAAO,CAC3Buc,UAAWvc,EAAMuc,UAAU7lB,IAAIvC,EAAMqoB,iBAI5C,GAAIpe,EAAY9K,OAASuI,EAAYge,gBAAgB4C,YAAcre,aAAuBvC,EAAY6gB,4BACjGxjB,KAAKwH,UAAUhK,IAAI,IAAImF,EAAYgF,UAAU,CAC/CqD,UAAW9F,EAAY8F,kBAG1B,GAAI9F,EAAY9K,OAASuI,EAAYge,gBAAgB8C,SAAWve,aAAuBvC,EAAY+gB,mBAAoB,MAIvGvjB,UAHMH,KAAKkH,SAAS7C,OAAO,CACxCjB,KAAM8B,EAAYgC,SAAS9D,cAGrBpD,KAAKkH,SAAS1J,IAAI0H,EAAYgC,eAGvC,GAAIhC,EAAY9K,OAASuI,EAAYge,gBAAgBgD,YAAcze,aAAuBvC,EAAYmW,sBAAuB,CAC9H,MAAM8K,EAAsB,IAAInJ,EAAqB,CACjD7Z,SAAUZ,KAAKY,SACfqV,aAAcjW,KAAKke,qBACnB7H,cAAerW,KAAKqW,cACpBlV,QAASnB,KACTyB,GAAIzB,KAAKyB,GACTgP,cAAezQ,KAAKyQ,gBAElB6E,EAAyB,GACzBC,EAAc,GACdpB,EAAU,GACV9Q,QAAe4K,EAAqBgL,mBAAmB9d,SAAY6E,KAAKyB,GAAG0R,eAAe,CAC5FC,QAAS,CAAC,CAAErH,KAAM7G,EAAY2T,SAC9BtX,WAAYqiB,EACZxR,gBAAiB,CACbhY,KAAMuI,EAAYuW,oBAAoBC,YACtCle,MAAOiK,GAEXoO,YAAa3Q,EAAY4Q,YAAY6F,YACrC1S,OAAQ,CACJmd,WAAYhf,EAAMuF,MAClBmX,UAAW1c,EAAMzB,KACjBye,mBACAiC,gBAAiB5e,EAAY9B,MAEjCsQ,IAAKxO,EAAYwO,IACjBE,UAAW,CACPC,MAAO,EAAG3a,UAAS4a,iBACfK,EAAQxW,KAAK,IAAIgF,EAAYoR,UAAU,CACnC3J,MAAO4I,EACPc,aACA5a,aAEJ8Z,EAAoBA,EAAkBxV,IAAImL,EAAgB8B,MAAMuJ,MAEpEC,SAAU,EAAG7Y,OAAM0Y,iBACfK,EAAQxW,KAAK,IAAIgF,EAAYuR,mBAAmB,CAC5C9J,MAAO4I,EACPc,aACA1Y,UAEJ4X,EAAoBA,EAAkBxV,IAAImL,EAAgB8B,MAAMuJ,MAEpE+P,kBAAmB,EAAGC,OAAMC,SACxB3O,EAAuB3X,KAAK,CAACqmB,EAAMC,KAEvCC,WAAY,EAAGrjB,UAAS4c,YACpBlI,EAAY5X,KAAK,CAACkD,EAAS4c,MAGnC0G,gBAAiBtf,KAEfuf,EAAoBxpB,QAAQmW,IAAIoD,EAAQ7Y,IAAIH,MAAOuL,GAAW1G,KAAK0G,OAAOlJ,IAAIkJ,KACpF,GAAIrD,aAAkBV,EAAY0hB,wBAAyB,CACvD,MACMzP,EADiBgP,EAAoB9c,MAAM0T,eAE5Clf,IAAK8P,GAA2B,QAAhBA,EAAOhR,MAAyC,UAAvBgR,EAAOA,OAAOhR,KAAmBgR,EAAOA,OAAOnQ,MAAMmI,UAAOjD,GACrGmkB,KAAMrpB,QAAoBkF,IAAVlF,GACfspB,EAAqBX,EAAoB1c,SAASsT,eAClD3F,EAAiB0P,EAClBjpB,IAAK8P,GAA2B,QAAhBA,EAAOhR,MAAyC,aAAvBgR,EAAOA,OAAOhR,KAAsBgR,EAAOA,OAAOnQ,MAAMmI,UAAOjD,GACxGqK,OAAO5B,EAAQ6B,MAAMC,SACpB2K,EAAwBkP,EACzBjpB,IAAK8P,GAA2B,WAAhBA,EAAOhR,MAA4C,aAAvBgR,EAAOA,OAAOhR,KAAsBgR,EAAOA,OAAOrO,IAAIqG,UAAOjD,GACzGqK,OAAO5B,EAAQ6B,MAAMC,SACpB8K,EAAiBoO,EAAoBxc,YACtCoT,eACAlf,IAAK8P,IACN,MAAMoZ,EAA4B,QAAhBpZ,EAAOhR,MAAyC,gBAAvBgR,EAAOA,OAAOhR,KACnD,CAAEa,MAAOmQ,EAAOA,OAAOnQ,MAAOwpB,QAASrZ,EAAOqZ,cAC9CtkB,EACN,QAAkBA,IAAdqkB,EAAyB,CACzB,MAAM3kB,EAAU,CACZuD,KAAMohB,EAAUvpB,MAAMmI,KACtBrG,IAAKynB,EAAUvpB,MAAM8B,IACrB9B,MAAOupB,EAAUvpB,MAAMA,OAE3B,MAA6B,QAAtBupB,EAAUC,QAAoB,IAAI9hB,EAAY+hB,iBAAiB7kB,GAAW,IAAI8C,EAAYgiB,oBAAoB9kB,GAEzH,MAAM+kB,EAA+B,WAAhBxZ,EAAOhR,MAA4C,gBAAvBgR,EAAOA,OAAOhR,KAAyBgR,EAAOA,OAAOrO,SAAMoD,EAC5G,QAAqBA,IAAjBykB,EACA,OAAO,IAAIjiB,EAAYkiB,oBAAoBD,KAI9Cpa,OAAO5B,EAAQ6B,MAAMC,SAC1BkZ,EAAoB/D,sBAAsB7D,QAAS5Q,IAC/CpL,KAAKqe,OAAOjT,EAAOhR,MAAM0qB,iBAAiB1Z,EAAOrO,IAAKqO,EAAOnQ,eAE3DL,QAAQmW,IAAI,CACd/Q,KAAK4H,eAAepK,IAAI,IAAImF,EAAYkF,eAAe,CACnDzE,KAAM8B,EAAY9B,KAClBwR,YACAC,iBACAQ,wBACAC,yBACAC,cACAsO,WAAYhf,EAAMuF,MAClByX,mBACA9M,iBAAkB+M,EAClB7M,gBAAiBjC,EACjB3P,SACAmS,oBAEJ4O,eAIExpB,QAAQmW,IAAI,CACd/Q,KAAK4H,eAAepK,IAAI,IAAImF,EAAYkF,eAAe,CACnDzE,KAAM8B,EAAY9B,KAClBwR,eAAWzU,EACX0U,eAAgB,GAChBQ,sBAAuB,GACvBC,uBAAwB,GACxBC,YAAa,GACbsO,WAAYhf,EAAMuF,MAClByX,mBACA9M,iBAAkB+M,EAClB7M,gBAAiBjC,EACjB3P,SACAmS,eAAgB,MAEpB4O,IAIZ,OAAOpR,EAEX,8BAA8BgP,EAAkBC,GAC5C,MAAMna,QAAwB9H,KAAK8H,gBAAgBzD,SAC7C0gB,OAA2C5kB,IAApB2H,EAAgC,GAAK,IAAIA,EAAgB2V,OACtF,IAAK,MAAOrT,EAAOnP,KAAUgnB,EAAuBnE,UAChDiH,EAAqB3a,GAASnP,QAE5BL,QAAQmW,IAAI,CACdnW,QAAQmW,IAAI3X,OAAO0kB,QAAQkE,GAAkB1mB,IAAIH,OAAQmiB,GAAgB0H,aAAYvH,aACjF,MAAMzS,EAAYrC,EAAgB9F,OAAOoiB,aAAa3H,GAChD9V,QAAkBxH,KAAKwH,UAAUnD,OAAO,CAAE2G,mBAC9B7K,IAAdqH,QACMxH,KAAKwH,UAAUhK,IAAI,IAAImF,EAAYgF,UAAU,CAC/CqD,YACAga,aACAvH,iBAGkBtd,IAAf6kB,IAA6BA,QAA+B7kB,IAAf6kB,IAA6Bxd,EAAUwd,mBAC/E7kB,IAAVsd,GAAuBA,EAAMzI,GAAGrM,EAAgB8B,MAAM4S,YAAqBld,IAAVsd,GAAuBjW,EAAUiW,MAAMzI,GAAGrM,EAAgB8B,MAAM4S,aAC7Hrd,KAAKwH,UAAU0d,OAAO,CAAEla,UAAWxD,EAAUwD,kBAG7ChL,KAAKwH,UAAU4V,OAAO5V,EAAW,CAAEiW,QAAOuH,uBAGpC7kB,IAApB2H,EACM9H,KAAK8H,gBAAgBtK,IAAI,IAAImF,EAAYsF,gBAAgB,CACvDwV,MAAOsH,KAET,iBACQ/kB,KAAK8H,gBAAgBsV,OAAOtV,EAAiB,CAC/C2V,MAAOsH,KAFb,KAOd,qBAAqB5D,EAAQtQ,EAAQuO,EAAS2C,EAAiB,IAC3D,MAAOoD,EAAcC,SAAsBxqB,QAAQmW,IAAI,CACnD/Q,KAAKqlB,gBAAgBlE,GACrBnhB,KAAKqlB,gBAAgBxU,KAEnByU,EAAgBlsB,OAAO0kB,QAAQpB,EAAS1M,QAAQuV,QAAQJ,EACzD7pB,IAAI,EAAG8J,YAAa,CAACA,EAAOvE,QAASuE,EAAO0B,MAAO1B,EAAOnK,MAAMqoB,QAChEvoB,OAAOqkB,EAAQ9jB,IAAI,EAAG8J,YAAa,CAACA,EAAOvE,QAASuE,EAAO0B,MAAO1B,EAAOnK,SAAU,EAAE4F,KAAa8H,EAAgB9F,OAAOia,aAAajc,KACrI2kB,EAAexlB,KAAKylB,eAAeN,GACnCO,EAAiBhJ,EAAS1M,QAAQ2V,UAAU3lB,KAAKylB,eAAeL,GAAgBzP,GAAWA,EAAOra,IAAI,EAAG4O,WAAYA,IACrH0b,EAAiBlJ,EAAS1M,QAAQuV,QAAQnG,EAAUha,GAAWuD,EAAgB9F,OAAOia,aAAa1X,EAAOA,OAAOvE,gBACjHjG,QAAQmW,IAAIuU,EAAchqB,IAAIH,OAAQ0F,EAAS8U,MACjD,MAAMkQ,EAAQL,EAAa3kB,GACrByQ,EAAUoU,EAAe7kB,GACzBilB,EAAOF,EAAe/kB,GACtBsH,EAAU4Z,EAAelhB,SACzBb,KAAK+lB,cAAcpd,EAAgB9F,OAAOmjB,aAAanlB,GAAU8U,EAAOra,IAAI,EAAE2qB,EAAUnf,EAAO7L,KAAW,CAAC6L,EAAO7L,SAAmBkF,IAAV0lB,EAAsB,GAAKA,OAAmB1lB,IAAZmR,EAAwB,GAAKA,OAAkBnR,IAAT2lB,EAAqB,GAAKA,OAAkB3lB,IAAZgI,EAAwB,GAAKA,MAG9Q,mBAAmBjD,GACf,OAAOA,EAAYka,QAAQ9jB,IAAI,CAAC8J,EAAQgF,KAAU,CAC9ChF,SACA8E,MAAO,IAAIvH,EAAYujB,MAAM,CAAE9iB,KAAM8B,EAAY9B,KAAMgH,aAG/D,sBAAsB+W,GAClB,OAAOvmB,QAAQmW,IAAIoQ,EAAO7lB,IAAIH,MAAO+O,IAE1B,CAAEA,QAAO9E,aADKpF,KAAKoF,OAAOtH,IAAIoM,OAI7C,eAAeib,GACX,OAAOzI,EAAS1M,QAAQuV,QAAQJ,EAAc,EAAG/f,YAAauD,EAAgB9F,OAAOia,aAAa1X,EAAOvE,UAE7G,oBAAoBA,EAAS8U,EAAQkQ,EAAOvU,EAAS8N,EAAS3B,GAC1D,MAAMjY,QAAgBxF,KAAKwF,QAAQnB,OAAO,CAAEjB,KAAMvC,IAC5Csc,EAAWxH,EAAOjZ,OAAO,CAAC2L,GAAMvB,EAAO7L,MACzC,MAAM8B,EAAM4L,EAAgB9F,OAAOma,aAAalW,GAKhD,YAJiB3G,IAAbkI,EAAItL,KACJsL,EAAItL,GAAO4L,EAAgB8B,MAAM4S,MAErChV,EAAItL,GAAOsL,EAAItL,GAAKS,IAAIvC,GACjBoN,QACIlI,IAAZqF,EACG,GACApM,OAAO0kB,QAAQtY,EAAQ2X,UAAUzgB,OAAO,CAAC2L,GAAMtL,EAAK9B,UACpCkF,IAAVlF,EACO7B,OAAOC,OAAOD,OAAOC,OAAO,GAAIgP,GAAM,CAAE,CAACtL,GAAM4L,EAAgB8B,MAAM4S,OAEzEjkB,OAAOC,OAAOD,OAAOC,OAAO,GAAIgP,GAAM,CAAE,CAACtL,GAAM9B,IACvD,KACDkrB,EAAW,GACjBA,EAASxoB,QAAQkoB,EAAMvqB,IAAIH,OAAS+O,WAAYlK,KAAKsG,eAAe4e,OAAO,CACvE9hB,KAAMvC,EACNqJ,YAEJic,EAASxoB,QAAQyhB,EAAQ9jB,IAAIH,OAAS+O,WAAYlK,KAAKsG,eAAe9I,IAAI,IAAImF,EAAY8D,eAAe,CAAErD,KAAMvC,EAASqJ,aAC1Hic,EAASxoB,QAAQ2T,EAAQhW,IAAIH,MAAO+O,GAAUlK,KAAK+F,iBAAiBmf,OAAO,CACvE9hB,KAAMvC,EACNqJ,YAEJic,EAASxoB,QAAQkoB,EACZrb,OAAO,EAAGpF,YAAauD,EAAgB9F,OAAO2O,aAAapM,EAAO0B,MAAO9G,KAAKY,SAAS6Q,eAAerO,OACtG9H,IAAIH,OAAS+O,WAAYlK,KAAK+F,iBAAiBvI,IAAI,IAAImF,EAAY0D,iBAAiB,CAAEjD,KAAMvC,EAASqJ,kBAC1F/J,IAAZqF,EACA2gB,EAASxoB,KAAKqC,KAAKwF,QAAQhI,IAAI,IAAImF,EAAYmD,QAAQ,CACnD1C,KAAMvC,EACNsc,WACAM,YAIJ0I,EAASxoB,KAAKqC,KAAKwF,QAAQ4X,OAAO5X,EAAS,CAAE2X,WAAUM,UAAS/iB,KAAKS,MAAOirB,IACpEA,EAAWC,qBACLrmB,KAAKwF,QAAQ0f,OAAO,CAAE9hB,KAAMvC,aAIxCjG,QAAQmW,IAAIoV,GAEtB,kBAAkBhF,EAAQtQ,EAAQhM,GAC9B,MAAMyhB,EAAcnF,EACf7lB,IAAK4O,IAAU,CAAG9P,KAAM,QAAS8P,QAAO9G,KAAM8G,EAAM9G,QACpDrI,OAAO8V,EAAOvV,IAAK4O,IAAU,CAAG9P,KAAM,QAAS8P,QAAO9G,KAAM8G,EAAM9G,SACjEmjB,EAAkBntB,OAAO0kB,QAAQpB,EAAS1M,QAAQuV,QAAQe,EAAa,EAAGljB,UAAWuF,EAAgB9F,OAAOma,aAAa5Z,WACzHxI,QAAQmW,IAAIwV,EAAgBjrB,IAAIH,OAAQiI,EAAMuS,KAAY3V,KAAKwmB,WAAW7d,EAAgB9F,OAAO4jB,aAAarjB,GAAOuS,EAAQ9Q,KAEvI,iBAAiBzB,EAAMkjB,EAAazhB,GAChC,MAAMiM,QAAmB9Q,KAAKgH,gBAAgBlJ,IAAI,CAAEsF,SAC9C2S,EAAa3c,OAAOC,OAAO,GAAIyX,EAAWiF,YAC1CzE,EAAUlY,OAAOC,OAAO,GAAIyX,EAAWQ,SAC7C,IAAK,MAAMoV,KAAcJ,EACG,UAApBI,EAAWtsB,KACX2b,EAAW2Q,EAAWxc,MAAME,OAASvF,EAAMuF,MAG3CkH,EAAQoV,EAAWxc,MAAME,QAAS,QAGpCpK,KAAKgH,gBAAgBoW,OAAOtM,EAAY,CAC1CiF,aACAzE,aAIZ/O,EAAQkY,qBAAuBA,G,kCCrmB/BrhB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BC,EAAU,EAAQ,IAClB+D,EAAS,EAAQ,IACjBd,EAAc,EAAQ,IAyB5B,MAAM8a,EACF,YAAY9mB,GACRG,KAAKuM,YAAc1M,EAAQ0M,YAC3BvM,KAAKvB,KAAOoB,EAAQpB,KACpBuB,KAAK0e,gBAAkB7e,EAAQ6e,gBAC/B1e,KAAK2e,mBAAqB9e,EAAQ8e,mBAClC3e,KAAKmf,MAAQtf,EAAQsf,MACrBnf,KAAK4mB,cAAgB,GACrB5mB,KAAKlC,IAhCb,UAAmB,cAAE+oB,EAAa,YAAEta,IAChC,OAAOpR,MAAO4B,IACV,MAAM+pB,EAAgBD,EAAc9pB,GACpC,QAAsBoD,IAAlB2mB,EAA6B,CAC7B,GAA2B,WAAvBA,EAAc1sB,KACd,MAAM,IAAInB,MAAM,aAEpB,OAAO6tB,EAAc7rB,MAEzB,OAAOsR,IAAczO,IAAIf,IAuBdgqB,CAAU,CACjBxa,YAAavM,KAAKuM,YAClBsa,cAAe7mB,KAAK6mB,cAAc/rB,KAAKkF,QAE3CA,KAAKqE,OAxBb,UAAsB,cAAEwiB,EAAa,YAAEta,IACnC,OAAOpR,MAAO4B,IACV,MAAM+pB,EAAgBD,EAAc9pB,GACpC,QAAsBoD,IAAlB2mB,EAA6B,CAC7B,GAA2B,WAAvBA,EAAc1sB,KACd,OAEJ,OAAO0sB,EAAc7rB,MAEzB,OAAOsR,IAAclI,OAAOtH,IAeduH,CAAa,CACvBiI,YAAavM,KAAKuM,YAClBsa,cAAe7mB,KAAK6mB,cAAc/rB,KAAKkF,QAE3CA,KAAKgnB,YAAejqB,GAAQiD,KAAKuM,cAAclI,OAAOtH,GAE1D,eACI,MAAM4hB,EAAqB3e,KAAK2e,mBAChC,OAAOvlB,OAAOuc,OAAO3V,KAAK4mB,eAAetrB,IAAKL,IAC1C,GAAmB,WAAfA,EAAMb,KAAmB,CACzB,QAA2B+F,IAAvBwe,EACA,MAAM,IAAI1lB,MAAM,kBAEpB,MAAO,CAAEmB,KAAM,SAAUgR,OAAQuT,EAAmB1jB,EAAM8B,MAE9D,MAAO,CAAE3C,KAAM,MAAOgR,OAAQpL,KAAK0e,gBAAgBzjB,EAAMgsB,UAAWxC,QAASxpB,EAAMwpB,WAG3F,sBACI,MAAM9F,EAAqB3e,KAAK2e,mBAChC,OAAOvlB,OAAO0kB,QAAQ9d,KAAK4mB,eAAetrB,IAAI,EAAEyB,EAAK9B,MACjD,GAAmB,WAAfA,EAAMb,KAAmB,CACzB,QAA2B+F,IAAvBwe,EACA,MAAM,IAAI1lB,MAAM,kBAEpB,MAAO,CAAEmB,KAAMukB,EAAmB1jB,EAAM8B,KAAK3C,KAAM2C,MAAK9B,SAE5D,MAAO,CAAEb,KAAM4F,KAAK0e,gBAAgBzjB,EAAMgsB,UAAU7sB,KAAM2C,MAAK9B,WAGvE,cAAcisB,GACV,MAAM,IAAIjuB,MAAM,oBAGxBsJ,EAAQokB,qBAAuBA,EAC/B,MAAMQ,UAAyBR,EAC3B,YAAY9mB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdigB,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKye,aAAe5e,EAAQ4e,aAEhC,cAAc1hB,GACV,OAAOiD,KAAK4mB,cAAc5mB,KAAKye,aAAa1hB,IAEhD,iBAAiBA,EAAK9B,GAClB+E,KAAK4mB,cAAc7pB,GAAO9B,GAGlC,MAAMosB,UAA4BF,EAC9B,YAAYtnB,GACRunB,MAAM,CACF7a,YAAa,KAAM,CACfzO,IAAK+B,EAAQ0e,iBAAiBzgB,IAC9BuG,OAAQxE,EAAQ0e,iBAAiBla,SAErC5F,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKue,eAAiB1e,EAAQ0e,eAC9Bve,KAAKwe,gBAAkB3e,EAAQ2e,gBAC/Bxe,KAAKwM,KAAOG,EAAO5R,OAAO4R,EAAO2a,MAAM,IAAMtnB,KAAKue,iBAAiB/R,KAAKF,KAAKT,EAAY0b,UAAWtsB,QAE1EkF,IADAH,KAAK6mB,cAAc7mB,KAAKwe,gBAAgBvjB,IAEnD0R,EAAO6a,MAEX7a,EAAO8a,GAAGxsB,MACf0R,EAAO2a,MAAM,IAAM3a,EAAO8a,MAAMruB,OAAOuc,OAAO3V,KAAK4mB,eACpDtrB,IAAKL,GAA0B,QAAfA,EAAMb,KAAiBa,EAAMA,WAAQkF,GACrDqK,OAAO5B,EAAQ6B,MAAMC,aAGlC,MAAMgd,UAA+BP,EACjC,YAAYtnB,GACRunB,MAAM,CACF7a,YAAa,KAAM,CACfzO,IAAK+B,EAAQgf,oBAAoB/gB,IACjCuG,OAAQxE,EAAQgf,oBAAoBxa,SAExC5F,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAK6e,kBAAoBhf,EAAQgf,kBACjC7e,KAAKwe,gBAAkB3e,EAAQ2e,gBAC/Bxe,KAAK8e,kBAAoBjf,EAAQif,kBACjC9e,KAAKyM,QAAW1P,GAAQ4P,EAAO5R,OAAO4R,EAAO2a,MAAM,IAAMtnB,KAAK6e,oBACzDpS,QAAQ1P,GACRuP,KAAKT,EAAY0b,UAAWtsB,QAEPkF,IADAH,KAAK6mB,cAAc7mB,KAAKwe,gBAAgBvjB,IAEnD0R,EAAO6a,MAEX7a,EAAO8a,GAAGxsB,MACf0R,EAAO2a,MAAM,IAAM3a,EAAO8a,MAAMruB,OAAOuc,OAAO3V,KAAK4mB,eACpDtrB,IAAKL,GAAyB,QAAfA,EAAMb,MAAkB4F,KAAK8e,kBAAkB7jB,EAAMA,MAAO8B,GAAO9B,EAAMA,WAAQkF,GAChGqK,OAAO5B,EAAQ6B,MAAMC,aAGlC,SAASid,GAAU,MAAE/H,EAAK,gBAAEpB,EAAe,aAAEC,EAAY,WAAEa,IACvD,OAAOnkB,MAAOF,IACV,MAAM8B,EAAMyhB,EAAgBvjB,GAC5B,IAAKqkB,EAAY,CAEb,QAAqBnf,UADMyf,EAAMvb,OAAOtH,GAEpC,MAAM,IAAI9D,MAAM,uDAAyD,GAAG2mB,EAAMnhB,QAAQggB,EAAa1hB,YAG3FoD,IAAhByf,EAAMT,aACAS,EAAMT,MAAMlkB,GAEtB,MAAM6rB,EAAgBlH,EAAMiH,cAAc9pB,GAC1C6iB,EAAMgH,cAAchH,EAAMnB,aAAa1hB,IAAQ,CAC3C3C,KAAM,MACN6sB,SAAUhsB,EACVA,QACAwpB,aAA2BtkB,IAAlB2mB,EAA8B,MAAQ,WAI3D,SAASc,GAAa,MAAEhI,EAAOxC,OAAQyK,EAAU,gBAAErJ,IAC/C,OAAOrjB,MAAOF,EAAOmiB,KACjB,MAAMrgB,EAAMyhB,EAAgBvjB,GACtB6sB,EAAeD,EAAW5sB,EAAOmiB,GACjC0J,EAAgBlH,EAAMiH,cAAc9pB,GAS1C,OARA6iB,EAAMgH,cAAchH,EAAMnB,aAAa1hB,IAAQ,CAC3C3C,KAAM,MACN6sB,SAAUa,EACV7sB,MAAO6sB,EACPrD,aAA2BtkB,IAAlB2mB,GAAsD,WAAvBA,EAAc1sB,MAA+C,WAA1B0sB,EAAcrC,QACnF,SACA,OAEHqD,GAGf,SAASC,GAAa,MAAEnI,IACpB,OAAOzkB,MAAO4B,SAEWoD,UADMyf,EAAMoH,YAAYjqB,UAElC6iB,EAAMgH,cAAchH,EAAMnB,aAAa1hB,IAG9C6iB,EAAMgH,cAAchH,EAAMnB,aAAa1hB,IAAQ,CAAE3C,KAAM,SAAU2C,QA2B7EwF,EAAQylB,gCAvBR,cAA8Cb,EAC1C,YAAYtnB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,eAE1Bze,KAAKod,OAASwK,EAAa,CACvBhI,MAAO5f,KACPod,OAAQvd,EAAQud,OAChBoB,gBAAiB3e,EAAQ2e,kBAE7Bxe,KAAKklB,OAAS6C,EAAa,CAAEnI,MAAO5f,SA2B5CuC,EAAQyc,0BAvBR,cAAwCmI,EACpC,YAAYtnB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,aACtBa,WAAYzf,EAAQyf,aAExBtf,KAAKod,OAASwK,EAAa,CACvBhI,MAAO5f,KACPod,OAAQvd,EAAQud,OAChBoB,gBAAiB3e,EAAQ2e,oBAuBrCjc,EAAQgd,0BAlBR,cAAwC4H,EACpC,YAAYtnB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,eAE1Bze,KAAKklB,OAAS6C,EAAa,CAAEnI,MAAO5f,SAsB5CuC,EAAQ2c,oBAlBR,cAAkCiI,EAC9B,YAAYtnB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,aACtBa,WAAYzf,EAAQyf,eAyBhC/c,EAAQqc,gCApBR,cAA8C8I,EAC1C,YAAY7nB,GACRunB,MAAM,CACFvI,kBAAmBhf,EAAQgf,kBAC3BpgB,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,MACfX,gBAAiB3e,EAAQ2e,gBACzBM,kBAAmBjf,EAAQif,oBAE/B9e,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,eAE1Bze,KAAKklB,OAAS6C,EAAa,CAAEnI,MAAO5f,SA6B5CuC,EAAQid,sCAzBR,cAAoDkI,EAChD,YAAY7nB,GACRunB,MAAM,CACFvI,kBAAmBhf,EAAQgf,kBAC3BpgB,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,MACfX,gBAAiB3e,EAAQ2e,gBACzBM,kBAAmBjf,EAAQif,oBAE/B9e,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,eAE1Bze,KAAKod,OAASwK,EAAa,CACvBhI,MAAO5f,KACPod,OAAQvd,EAAQud,OAChBoB,gBAAiB3e,EAAQ2e,kBAE7Bxe,KAAKklB,OAAS6C,EAAa,CAAEnI,MAAO5f,SAuB5CuC,EAAQwc,0BAnBR,cAAwC2I,EACpC,YAAY7nB,GACRunB,MAAM,CACFvI,kBAAmBhf,EAAQgf,kBAC3BpgB,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,MACfX,gBAAiB3e,EAAQ2e,gBACzBM,kBAAmBjf,EAAQif,oBAE/B9e,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,iBA6BlClc,EAAQ+b,mCAxBR,cAAiD+I,EAC7C,YAAYxnB,GACRunB,MAAM,CACF7I,eAAgB1e,EAAQ0e,eACxB9f,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,MACfX,gBAAiB3e,EAAQ2e,kBAE7Bxe,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,eAE1Bze,KAAKod,OAASwK,EAAa,CACvBhI,MAAO5f,KACPod,OAAQvd,EAAQud,OAChBoB,gBAAiB3e,EAAQ2e,kBAE7Bxe,KAAKklB,OAAS6C,EAAa,CAAEnI,MAAO5f,SAsB5CuC,EAAQ0lB,uBAlBR,cAAqCZ,EACjC,YAAYxnB,GACRunB,MAAM,CACF7I,eAAgB1e,EAAQ0e,eACxB9f,KAAMoB,EAAQpB,KACdggB,aAAc5e,EAAQ4e,aACtBC,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,MACfX,gBAAiB3e,EAAQ2e,kBAE7Bxe,KAAKxC,IAAMmqB,EAAU,CACjB/H,MAAO5f,KACPwe,gBAAiB3e,EAAQ2e,gBACzBC,aAAc5e,EAAQ4e,iBAiClClc,EAAQ0c,sBA5BR,cAAoC0H,EAChC,YAAY9mB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdigB,gBAAiB7e,EAAQ6e,kBAE7B1e,KAAKkoB,mBAAqB,GAE9B,UAAUjtB,GAEN,QAAqBkF,UADMH,KAAKqE,OAAO,CAAElB,YAAalI,EAAMmP,QAExD,MAAM,IAAInR,MAAM,gDAEpB,MAAMguB,EAAW,CAAE7sB,KAAM,MAAO6sB,SAAUhsB,EAAOA,QAAOwpB,QAAS,OACjEzkB,KAAK4mB,cAAcje,EAAgB9F,OAAOsH,gBAAgBlP,EAAMmI,OAAS6jB,EACzEjnB,KAAKkoB,mBAAmB,GAAGjtB,EAAMmP,SAAW6c,EAEhD,cAAclqB,GACV,MAA+B,iBAApBA,EAAIoG,YACJnD,KAAK4mB,cAAcje,EAAgB9F,OAAOsH,gBAAgBpN,EAAIoG,cAElEnD,KAAKkoB,mBAAmB,GAAGnrB,EAAIoG,eAE1C,iBAAiBpG,EAAK9B,GAClB+E,KAAK4mB,cAAc7pB,GAAO9B,IAIlC,MAAMktB,EAA2BprB,GAAQ,GAAG4L,EAAgB9F,OAAOma,aAAajgB,EAAIqG,SAASrG,EAAIqN,QAwBjG7H,EAAQ6b,mBAvBR,cAAiC+I,EAC7B,YAAY5a,GACR6a,MAAM,CACF7a,cACA9N,KAAM,SACNggB,aAAc0J,EACdzJ,gBAAkBzjB,IAAU,CAAGb,KAAM,SAAUa,YAEnD+E,KAAKxC,IAAMrC,MAAOF,IACd,MAAM8B,EAAM,CAAEqG,KAAMnI,EAAMmI,KAAMgH,MAAOnP,EAAMmP,OAE7C,QAAqBjK,UADMH,KAAKqE,OAAOtH,GAEnC,MAAM,IAAI9D,MAAM,uDAAyD,GAAG+G,KAAKvB,QAAQuB,KAAKye,aAAa1hB,OAE/GiD,KAAK4mB,cAAc5mB,KAAKye,aAAa1hB,IAAQ,CACzC3C,KAAM,MACN6sB,SAAUhsB,EACVA,MAAOA,EAAMmK,OACbqf,QAAS,UA8BzB,MAAM2D,EACF,YAAYvoB,GACRG,KAAKuM,YAAc1M,EAAQ0M,YAC3BvM,KAAKvB,KAAOoB,EAAQpB,KACpBuB,KAAK0e,gBAAkB7e,EAAQ6e,gBAC/B1e,KAAK2e,mBAAqB9e,EAAQ8e,mBAClC3e,KAAKmf,MAAQtf,EAAQsf,MACrBnf,KAAKlC,IA/Bb,UAA2B,cAAE+oB,EAAa,YAAEta,IACxC,OAAOpR,UACH,MAAM2rB,EAAgBD,IACtB,QAAsB1mB,IAAlB2mB,EAA6B,CAC7B,GAA2B,WAAvBA,EAAc1sB,KACd,MAAM,IAAInB,MAAM,aAEpB,OAAO6tB,EAAc7rB,MAEzB,OAAOsR,IAAczO,OAsBVuqB,CAAkB,CACzB9b,YAAavM,KAAKuM,YAClBsa,cAAe7mB,KAAK6mB,cAAc/rB,KAAKkF,QAE3CA,KAAKqE,OAvBb,UAA8B,cAAEwiB,EAAa,YAAEta,IAC3C,OAAOpR,UACH,MAAM2rB,EAAgBD,IACtB,QAAsB1mB,IAAlB2mB,EAA6B,CAC7B,GAA2B,WAAvBA,EAAc1sB,KACd,OAEJ,OAAO0sB,EAAc7rB,MAEzB,OAAOsR,IAAclI,UAcPqI,CAAqB,CAC/BH,YAAavM,KAAKuM,YAClBsa,cAAe7mB,KAAK6mB,cAAc/rB,KAAKkF,QAG/C,eACI,MAAM2e,EAAqB3e,KAAK2e,mBAC1B1jB,EAAQ+E,KAAKsoB,aACnB,QAAcnoB,IAAVlF,EACA,MAAO,GAEX,GAAmB,WAAfA,EAAMb,KAAmB,CACzB,QAA2B+F,IAAvBwe,EACA,MAAM,IAAI1lB,MAAM,kBAEpB,MAAO,CAAC,CAAEmB,KAAM,SAAUgR,OAAQuT,MAEtC,MAAO,CAAC,CAAEvkB,KAAM,MAAOgR,OAAQpL,KAAK0e,gBAAgBzjB,EAAMgsB,UAAWxC,QAASxpB,EAAMwpB,UAExF,sBACI,MAAM9F,EAAqB3e,KAAK2e,mBAC1B1jB,EAAQ+E,KAAKsoB,aACnB,QAAcnoB,IAAVlF,EACA,MAAO,GAEX,GAAmB,WAAfA,EAAMb,KAAmB,CACzB,QAA2B+F,IAAvBwe,EACA,MAAM,IAAI1lB,MAAM,kBAEpB,MAAO,CAAC,CAAEmB,KAAMukB,IAAqBvkB,KAAM2C,IAAK,WAAY9B,MAAO7B,OAAOC,OAAOD,OAAOC,OAAO,GAAI4B,GAAQ,CAAE8B,IAAK,eAEtH,MAAO,CAAC,CAAE3C,KAAM4F,KAAK0e,gBAAgBzjB,EAAMgsB,UAAU7sB,KAAM2C,IAAK,WAAY9B,UAEhF,gBACI,OAAO+E,KAAKsoB,aAEhB,iBAAiBpB,EAAMjsB,GACnB+E,KAAKsoB,aAAertB,GAG5BsH,EAAQ6lB,6BAA+BA,EACvC,MAAMG,UAAiCH,GA6CvC7lB,EAAQod,kCAlBR,cAAgD4I,EAC5C,YAAY1oB,GACRunB,MAAM,CACF7a,YAAa1M,EAAQ0M,YACrB9N,KAAMoB,EAAQpB,KACdigB,gBAAiB7e,EAAQ6e,gBACzBC,mBAAoB9e,EAAQ8e,mBAC5BQ,MAAOtf,EAAQsf,QAEnBnf,KAAKxC,IAlCb,UAA2B,MAAEoiB,IACzB,OAAOzkB,MAAOF,SACUkF,IAAhByf,EAAMT,aACAS,EAAMT,MAAMlkB,GAEtB2kB,EAAM0I,aAAe,CACjBluB,KAAM,MACN6sB,SAAUhsB,EACVA,QACAwpB,QAAS,QAyBF+D,CAAkB,CACzB5I,MAAO5f,OAEXA,KAAKod,OAxBb,UAA8B,MAAEwC,EAAOxC,OAAQyK,IAC3C,OAAO1sB,MAAOF,EAAOmiB,KACjB,MAAM0K,EAAeD,EAAW5sB,EAAOmiB,GAOvC,OANAwC,EAAM0I,aAAe,CACjBluB,KAAM,MACN6sB,SAAUa,EACV7sB,MAAO6sB,EACPrD,QAAS,UAENqD,GAeOW,CAAqB,CAC/B7I,MAAO5f,KACPod,OAAQvd,EAAQud,Y,kCCrjB5BhkB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIytB,EAAS,EAAQ,MACrBnmB,EAAQomB,KAAOD,EAAOC,M,mCCHtB,YACAvvB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BgF,EAAkB,EAAQ,KAC1BC,EAAW,EAAQ,KACnBgb,EAAmB,EAAQ,MAC3BjmB,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClBigB,EAAU,EAAQ,MAClBC,EAAiBpmB,EAAQqL,gBAAgB,EAAQ,OACjDgb,EAAgBrmB,EAAQqL,gBAAgB,EAAQ,MAChDib,EAAe,EAAQ,KACvBtM,EAAWha,EAAQqL,gBAAgB,EAAQ,KAC3Ckb,EAAcvmB,EAAQqL,gBAAgB,EAAQ,OAC9Cmb,EAAY,EAAQ,KACpBlmB,EAAW,EAAQ,MACnBmmB,EAAY,EAAQ,MACpBC,EAAY,EAAQ,KACpBjb,EAASP,EAASQ,YAAYR,EAASS,WAAY,CAAEC,UAAW,kBAChE+a,EAAqBzgB,EAAQ0gB,WAAW1gB,EAAQkR,OAAOyP,cACvDC,EAAmB7b,EAAgBa,YAAYC,mBAAmB,oBAAqBd,EAAgBe,YAAYC,MACnH8a,EAAiB9b,EAAgBa,YAAYC,mBAAmB,kBAAmBd,EAAgBe,YAAYC,MAC/G+a,EAAc/b,EAAgBa,YAAYC,mBAAmB,eAAgBd,EAAgBe,YAAYC,MACzGgb,EAAuChc,EAAgBa,YAAYY,WAAW,uCAAwCoa,EAAkB7b,EAAgB0B,gBAAgBI,MAAO,CAAC4Z,GAAqB,+BAC3M1b,EAAgBa,YAAYe,aAAaoa,GACzC,MAAMC,EAAuCjc,EAAgBa,YAAYY,WAAW,uCAAwCqa,EAAgB9b,EAAgB0B,gBAAgBI,MAAO,CAAC4Z,GAAqB,8BACzM1b,EAAgBa,YAAYe,aAAaqa,GACzC,MAAMC,EAA4Blc,EAAgBa,YAAYY,WAAW,4BAA6Bsa,EAAa/b,EAAgB0B,gBAAgBM,WAAY,GAAI,wBACnKhC,EAAgBa,YAAYe,aAAasa,GACzC,MAKMC,EAA2B,IAAM,IAAIjB,EAAQkB,aAAa,IAAM,CAClEC,iBAAkB,IAClBC,QAAS,IAEPC,EAA4B,CAACC,EAAMC,KACrC,MAAMla,EAAIia,EAAKE,WAAWC,KAAKH,EAAKjlB,YAAYqlB,MAC1Cpa,EAAIia,EAAKC,WAAWC,KAAKF,EAAKllB,YAAYqlB,MAChD,OAAIra,EAAEsa,GAAGra,IACG,EAERA,EAAEqa,GAAGta,GACE,EAEJia,EAAKjlB,YAAY9B,KAAKqnB,QAAQL,EAAKllB,YAAY9B,OAWpDsnB,EAAuB,IAAIra,IAAI,CAAC,GAAI,UAAW,YAAa,YAAa,KAAM,QA4yBrF9N,EAAQomB,KA3yBR,MACI,aAAY,WAAEpnB,EAAU,cAAEQ,EAAa,QAAElC,IACrCG,KAAK2qB,4BAJkB,IAKvB3qB,KAAK4qB,cAAgBlO,EAAS1M,QAAQ6a,SAAS,KAC3C,MAAMC,EAAO9qB,KAAK+qB,gBACZ5U,EAAgBnW,KAAKuB,WAAW4U,cAChCtR,OAA0B1E,IAAlBgW,EAA8BnW,KAAKuB,WAAW0U,aAAeE,OAC9DhW,IAAT2qB,GAAsBjmB,EAAMuF,MAAQ0gB,EAAK/uB,KAAK8V,cAC1C7R,KAAKgrB,8BAXM,GAYXhrB,KAAK+qB,gBAAkB/qB,KAAKirB,aAAaH,GACzC9qB,KAAKkrB,QAAQC,kBAAkBL,GAC/B9qB,KAAKgrB,8BAAgC,GAEhChrB,KAAKorB,wBACNprB,KAAKqrB,gCAAkCxmB,EAAMuF,MAC7CpK,KAAKgrB,+BAAiC,GAGtChrB,KAAKgrB,8BAAgC,EACrChrB,KAAKqrB,8BAAgCxmB,EAAMuF,OAE/CpK,KAAKsrB,4BAA8B5R,KAAKC,MACxC3Z,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQC,UAC3BrT,QAAS,IAAI8Q,EAAUwC,iBAAiB,CACpCC,UAAW,CAAChnB,EAAMzB,YAI9BpD,KAAK4qB,kBAlCU,KAqCvB5qB,KAAK8rB,mBAAqBpP,EAAS1M,QAAQ+b,SAAS,KAChD/rB,KAAKgsB,MAAMhsB,KAAKwrB,cAAc,CAAEC,QAASvC,EAAUwC,QAAQO,WAC3DjsB,KAAKksB,yBACN,KACHlsB,KAAKmsB,YAAczP,EAAS1M,QAAQ+b,SAAS5wB,UACzC,MAAMsd,EAAUrf,OAAOuc,OAAO3V,KAAKosB,gBACnC,GAAI3T,EAAQle,OAhDF,IAgD0B,CAChC,MAAM8xB,QAA2BzxB,QAAQmW,IAAI0H,EAAQnd,IAAIH,MAAO+J,IAC5D,MAAMmlB,QAAmBnlB,EAAYonB,cAAc,CAC/CnU,UAAWnY,KAAKuB,WAAW6D,OAAOtH,IAClC2T,eAAgBzR,KAAKuB,WAAWX,SAAS6Q,eACzCoF,aAAc7W,KAAKuB,WAAWX,SAASiW,aACvCC,KAAM9W,KAAKuB,WAAWX,SAASkW,KAC/BC,qBAAsB/W,KAAKuB,WAAWX,SAASmW,uBAEnD,MAAO,CAAE7R,cAAamlB,iBAEH3N,EAAS1M,QAAQuc,KAAKF,EAAmB7xB,QAAQgyB,KAAKtC,GAA4BlqB,KAAKuB,WAAWX,SAAS6rB,aAAanxB,IAAKoxB,GAAsBA,EAAkBxnB,YAAYyS,SACzLqE,QAAS5Y,WACbpD,KAAKosB,eAAehpB,KAE/BuK,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAASiT,EACTzuB,MAAO7B,OAAOsE,KAAKsC,KAAKosB,gBAAgB7xB,YA5DlC,KAiEtByF,KAAK2sB,UAAYxxB,MAAO2vB,IACpB9qB,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQkB,QAC3BtU,QAAS,IAAI8Q,EAAUyD,eAAe,CAClCC,gBAAiB,EACjBC,SAAU3D,EAAU4D,SAASC,aAC7B9S,UAAWtiB,KAAKq1B,MAAMxT,KAAKC,MAAQ,KACnCwT,KAAMntB,KAAKotB,aACXC,MAAOrtB,KAAKqtB,MACZC,UAAWttB,KAAKstB,UAChBzb,YAAa7R,KAAKuB,WAAWmV,kBAC7BsV,OAAO,OAGf,MAAM9yB,QAAgB4xB,EAAKyC,eAAe,KAC1C,IAAIC,EACJ,GAAIt0B,EAAQ+B,MAAMwwB,UAAYvC,EAAUwC,QAAQkB,QAI5C,MAAM,IAAI5pB,EAASyqB,iBAAiBv0B,GAHpCs0B,EAAiBt0B,EAAQ+B,MAAMqd,QAKnCtY,KAAK0tB,aAAa5C,EAAM5xB,EAASs0B,GACjC,MAAM,KAAEG,GAAShrB,EAAYirB,kBAAkB9C,EAAKvxB,UACpD,IAAIsH,EACAuoB,EAAUyE,eAAeC,QAAQH,KACjC9sB,EAAU,IAAIuoB,EAAUyE,eAAe,CACnCF,OACAR,KAAMK,EAAeL,KACrBhT,UAAWqT,EAAerT,UAC1B4S,SAAUS,EAAeT,YAGjC/sB,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CAAEC,QAASvC,EAAUwC,QAAQqC,UACvE,MAAMC,QAAoBlD,EAAKyC,eAAe,KAC9C,GAAIS,EAAY/yB,MAAMwwB,UAAYvC,EAAUwC,QAAQqC,OAChD,MAAM,IAAI/qB,EAASyqB,iBAAiBO,GAExC,MAAO,CACHjyB,KAAM,CACFsxB,MAAOG,EAAeH,MACtBxb,YAAa2b,EAAe3b,YAC5Boc,wBAAoB9tB,EACpBU,WAEJmrB,MAAOwB,EAAexB,QAG9BhsB,KAAKkuB,gBAAkB,CAACpD,EAAMqD,KAC1B,MAAMC,EAAmBxlB,EAAQ6B,MAAMyP,aACjC2J,EAAa7jB,KAAKquB,kBAAkBvD,EAAKvxB,UAC/C,YAAmB4G,IAAfguB,EACO,CAAEG,SAAS,EAAMF,mBAAkBvK,mBAEhB1jB,IAA1BguB,EAAWtK,iBAA2C1jB,IAAf0jB,GAA4BsK,EAAWtK,WAAaA,EACpF,CAAEyK,SAAS,EAAMF,mBAAkBvK,cAE1CsK,EAAWtK,aAAeA,GAC1Bjb,EAAQ6B,MAAMyP,aAAeiU,EAAWC,iBAAmBpuB,KAAK2qB,4BACzD,CACH2D,SAAS,EACTF,iBAAkBD,EAAWC,iBAC7BvK,WAAYsK,EAAWtK,YAGxB,CAAEyK,SAAS,EAAOF,mBAAkBvK,eAE/C7jB,KAAKuuB,QAAWzyB,IACZ,GAAoB,yBAAhBA,EAAMA,MAAkC,CACxC,MAAM,cAAE0yB,GAAkB1yB,QACGqE,IAAzBH,KAAK+qB,iBACL/qB,KAAK+qB,gBAAgBhvB,KAAK8V,YAAc,IAAM2c,EAAczyB,KAAK8V,eACjE7R,KAAK+qB,gBAAkByD,EACvBxuB,KAAKyuB,qBACLzuB,KAAK4qB,qBAGY,gBAAhB9uB,EAAMA,YACcqE,IAAzBH,KAAK+qB,iBACL/qB,KAAK+qB,gBAAgBxxB,WAAauC,EAAMgvB,KAAKvxB,WAC7CyG,KAAK+qB,gBAAkB/qB,KAAKirB,eAC5BjrB,KAAKyuB,qBACLzuB,KAAK4qB,kBAGb5qB,KAAKuB,WAAaA,EAClBvB,KAAKkrB,QAAUnpB,EAAc,CACzB4qB,UAAW3sB,KAAK2sB,UAChBuB,gBAAiBluB,KAAKkuB,gBACtBQ,uBAAwB,IAAM,IAAIvF,EAAUwF,iBAAiB3uB,KAAKuB,WAAWoV,wBAC7EiY,kBAAmB,CAAC9D,EAAM5xB,KACtB8G,KAAK4uB,kBAAkB9D,EAAM5xB,IAEjC4yB,mBAAoB9rB,KAAK8rB,mBAAmBhxB,KAAKkF,MACjDuuB,QAASvuB,KAAKuuB,UAElBvuB,KAAKH,QAAUA,EACf,MAAM,aAAEutB,EAAe,GAAMvtB,EAC7BG,KAAKotB,aAAeA,EACpBptB,KAAKqtB,MAAQx1B,KAAKC,MAAMD,KAAKE,SAAW4Q,EAAgB8B,MAAMokB,iBAC9D7uB,KAAKstB,UAAY,+BACjBttB,KAAKosB,eAAiB,GACtBpsB,KAAK8uB,wBAA0BhF,IAC/B9pB,KAAK+uB,qBAAuB,IAAI1e,IAChCrQ,KAAKgvB,8BAAgClF,IACrC9pB,KAAKivB,2BAA6B,IAAI5e,IACtCrQ,KAAKkvB,yBAA2BpF,IAChC9pB,KAAKmvB,sBAAwB,IAAI9e,IACjCrQ,KAAKgrB,8BAAgC,EACrChrB,KAAKovB,eAAiB,IAAInG,EAAYjZ,QAAQ,KAC9ChQ,KAAKquB,kBAAoB,GAE7B,gBACI,OAAOruB,KAAKqvB,iBAEhB,qBACI,OAAOrvB,KAAKkrB,QAAQoE,eAAeh0B,IAAKwvB,GAASA,EAAKvxB,UAE1D,cACI,OAAOyG,KAAKosB,eAEhB,cACIpsB,KAAKosB,eAAiB,GACtBpsB,KAAK8uB,wBAA0BhF,IAC/B9pB,KAAK+uB,qBAAqBQ,QAC1BvvB,KAAKgvB,8BAAgClF,IACrC9pB,KAAKivB,2BAA2BM,QAChCvvB,KAAKkvB,yBAA2BpF,IAChC9pB,KAAKmvB,sBAAsBI,QAC3BvvB,KAAKgrB,8BAAgC,EACrChrB,KAAKovB,eAAentB,QACpBjC,KAAKquB,kBAAoB,GAE7B,cACI,IAAImB,EAAa5mB,EAAQ6mB,eACzB,IAOI,GANAzvB,KAAKkrB,QAAQrsB,QACbsP,EAAOwC,MAAM,CAAElS,KAAM,sBAAwB,qBAC7C+wB,EAAa5mB,EAAQ8mB,mBAAmBF,EAAY,KAChDxvB,KAAKkrB,QAAQ5R,OACbnL,EAAOwC,MAAM,CAAElS,KAAM,qBAAuB,4BAEjB0B,IAA3BH,KAAKH,QAAQ8B,UAAyB,CACtC,MAAM0tB,EAAmB,IAAIzG,EAAiB+G,UAAU,CACpD9vB,QAASG,KAAKH,QAAQ8B,UACtBG,KAAM9B,OAEVA,KAAKqvB,iBAAmBA,EACxB,MAAMO,QAA4BP,EAAiBxwB,QACnD2wB,EAAa5mB,EAAQ8mB,mBAAmBF,EAAYI,GAIxD,OAFA5vB,KAAK2qB,iCACqCxqB,IAAtCH,KAAKH,QAAQgwB,qBAvNE,IAuN4D7vB,KAAKH,QAAQgwB,qBACrFL,EAEX,MAAOvV,GAEH,YADMuV,IACAvV,GAGd,uBAAuB/U,GAAa,iBAAE4qB,GAAmB,EAAK,SAAEC,GAAW,GAAW,CAClFD,kBAAkB,EAClBC,UAAU,IAEV,MAAM1sB,EAAS,GACf,GAAI6B,EAAY9K,OAASuI,EAAYge,gBAAgBI,YACJ5gB,IAA7CH,KAAKosB,eAAelnB,EAAYyS,UAChC3X,KAAKivB,2BAA2B1xB,IAAI2H,EAAYyS,SAChD,OAAOtU,EAEX,IAAKrD,KAAKgvB,8BAA8BzxB,IAAI2H,EAAY9B,MAAO,CAC3DpD,KAAKivB,2BAA2BzxB,IAAI0H,EAAYyS,SAChD,IAEI,GADgBve,OAAOuc,OAAO3V,KAAKosB,gBACvB7xB,OAASy1B,OAAsBD,EAEvC,OADA/vB,KAAKgvB,8BAA8BxxB,IAAI0H,EAAY9B,MAC5CC,EAEX,IACI4sB,EADAC,EAAY,CAAE,CAACtnB,EAAQkR,OAAOqW,sBAAuBjrB,EAAYyS,SAErE,IACI,IAAIyY,EASAC,EARJ,IACID,QAAyBpwB,KAAKuB,WAAW2D,YAAYb,OAAO,CACxDjB,KAAM8B,EAAY9B,OAG1B,QACI8sB,EAAY92B,OAAOC,OAAO,CAAE,CAACuP,EAAQkR,OAAOwW,4BAA6CnwB,IAArBiwB,GAAkCF,GAG1G,QAAyB/vB,IAArBiwB,EAAgC,CAChCC,QAAqBrwB,KAAKuB,WAAWgvB,kBAAkB,CACnDrrB,cACAuT,QAASrf,OAAOuc,OAAO3V,KAAKosB,kBAEfiE,EAAa3X,cAAc5Z,MAAM,EAAG0V,yBAAwCrU,IAAnBqU,KAEtExU,KAAKosB,eAAelnB,EAAYyS,SAAWzS,EAC3CyI,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAASiT,EACTzuB,MAAO7B,OAAOsE,KAAKsC,KAAKosB,gBAAgB7xB,eAGlB4F,IAA1BH,KAAKqvB,kBACLrvB,KAAKqvB,iBAAiBmB,sBAAsBtrB,GAEhDlF,KAAKywB,yBAAyBvrB,SACxBlF,KAAKmsB,eAGnBnsB,KAAKgvB,8BAA8BxxB,IAAI0H,EAAY9B,MACnD6sB,EAAc,CAAEI,gBAChBliB,EAAOwC,MAAMvX,OAAOC,OAAO,CAAEoF,KAAM,yBAA2ByxB,IAElE,MAAOjW,GAEH,MADA9L,EAAO3K,MAAMpK,OAAOC,OAAO,CAAEoF,KAAM,wBAAyBwb,OAAOiW,IAC7DjW,EAEV,OAAOgW,EAEX,MAAOzsB,GACH,QAAmBrD,IAAfqD,EAAMuI,MACgB,iBAAfvI,EAAMuI,OACZvI,EAAMuI,KAAK4M,SAAS,WACrBmX,EACA,MAAMtsB,EAGd,QACIxD,KAAKivB,2BAA2B/J,OAAOhgB,EAAYyS,UAG3D,OAAOtU,EAEX,iBAAiBwB,SACP7E,KAAKoX,aAAavS,GAE5B,sBAAsByT,GAClB,MAAMpf,EAAU8G,KAAKwrB,cAAc,CAC/BC,QAASvC,EAAUwC,QAAQgF,IAC3BpY,QAAS,IAAI8Q,EAAUuH,WAAW,CAC9Bv2B,KAAMgvB,EAAUwH,cAAcjB,UAC9BkB,OAAQ,CAACvY,EAAQlV,UAGzBpD,KAAKovB,eAAep0B,IAAIsd,EAAQX,QAASW,GACzCtY,KAAKgsB,MAAM9yB,GAEf,cACI8G,KAAKgsB,MAAMhsB,KAAKwrB,cAAc,CAAEC,QAASvC,EAAUwC,QAAQoF,WAE/D,MAAM53B,GACF8G,KAAKkrB,QAAQc,MAAM9yB,EAAQsS,iBAE/B,yBAAyBtG,GACrB,MAOM6rB,EAPU/wB,KAAKwrB,cAAc,CAC/BC,QAASvC,EAAUwC,QAAQgF,IAC3BpY,QAAS,IAAI8Q,EAAUuH,WAAW,CAC9Bv2B,KAAMgvB,EAAUwH,cAAczX,YAC9B0X,OAAQ,CAAC3rB,EAAY9B,UAGEoI,gBAC/BxL,KAAKkrB,QAAQoE,eAAetT,QAAS8O,IAC7BA,EAAKkB,OAAShsB,KAAKgxB,WAAWlG,EAAK/uB,KAAKkyB,mBAAoB/oB,IAC5D4lB,EAAKmG,MAAMF,KAIvB,YAAYjG,EAAM5xB,GACd4xB,EAAKmG,MAAM/3B,EAAQsS,iBAEvB,aAAa0lB,GACT,IAAIC,EAAQnxB,KAAKkrB,QAAQoE,oBACRnvB,IAAb+wB,IACAC,EAAQA,EAAM3mB,OAAQsgB,GAASA,EAAKvxB,WAAa23B,EAAS33B,WAE9D,MAAM8J,EAASqZ,EAAS1M,QAAQohB,MAAMD,EAAQrG,GAASA,EAAK/uB,KAAK8V,aACjE,QAAe1R,IAAXkD,EAGJ,OAAOqZ,EAAS1M,QAAQqhB,QAAQF,EAAM3mB,OAAQsgB,GAASA,EAAK/uB,KAAK8V,cAAgBxO,EAAOtH,KAAK8V,cAAc,GAE/G,qBACI7R,KAAKqrB,mCAAgClrB,EACrCH,KAAKgrB,8BAAgC,EAEzC,sBACI,MAAMnmB,EAAQ7E,KAAKuB,WAAW0U,aACxBqb,EAAuBtxB,KAAKsrB,4BAClC,YAA+CnrB,IAAvCH,KAAKqrB,+BACTxmB,EAAMuF,MAAQpK,KAAKqrB,8BA1WN,IACoB,QA0WRlrB,IAAzBmxB,GACA5X,KAAKC,MAAQ2X,EA1WE,IA4WvB,aAAaxG,EAAM5xB,EAAS0zB,GACxB,GAAIA,EAAQS,QAAUrtB,KAAKqtB,MAEvB,MADArtB,KAAKkrB,QAAQqG,qBAAqBzG,EAAKvxB,UACjC,IAAIyJ,EAASyqB,iBAAiBv0B,EAAS,0BAGjD,QAAsBiH,IADAH,KAAKkrB,QAAQoE,eAAehL,KAAMkN,GAAc5E,EAAQS,QAAUmE,EAAUz1B,KAAKsxB,OAEnG,MAAM,IAAIrqB,EAASyuB,sBAAsB,+BAGjD,QACI,MAAM3G,EAAO9qB,KAAK+qB,gBACZlmB,EAAQ7E,KAAKuB,WAAW0U,aAC9B,YAAgB9V,IAAT2qB,GAAsBjmB,EAAMuF,OAAS0gB,EAAK/uB,KAAK8V,YAE1D,8BACI,UACU7R,KAAK0xB,0BAEf,MAAOC,KAGX,gCACI,MAAM,QAAEC,EAAU,IAAO5xB,KAAKH,cACxBjF,QAAQmW,IAAI6gB,EAAQt2B,IAAIH,MAAO02B,GAAW7xB,KAAK8xB,yBAAyBD,KAElF,+BAA+BA,GAC3B,IACI,MAAME,QAAiBhJ,EAAc/Y,QAAQ6hB,EAAQ,CACjDG,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,QAAS,MACT12B,GAAI,EACJq2B,OAAQ,WACRM,OAAQ,OAGhB,IAAKP,EAASQ,GACV,MAAM,IAAIt5B,MAAM,8BAA8B44B,MAAWE,EAASS,UAAUT,EAASU,cAEzF,MAAMpvB,QAAe0uB,EAASW,OAC9B,GAAsB,iBAAXrvB,QACUlD,IAAjBkD,EAAOG,OACiB,iBAAjBH,EAAOG,OACe,iBAAtBH,EAAOG,MAAMuI,MACY,iBAAzB1I,EAAOG,MAAMtK,QACpB,MAAM,IAAID,MAAMoK,EAAOG,OAETH,EAAOA,OAAOsvB,UAE3Br3B,IAAKwvB,IACN,MAAM,QAAEjqB,EAAO,KAAEssB,GAASrC,EAC1B,IAAI8H,EAAgB,IAAI5J,EAAa6J,SAAShyB,GAAS+xB,gBAIvD,OAHqBzyB,MAAjByyB,IACAA,EAAgB5J,EAAa6J,SAASC,aAAajyB,GAAS+xB,iBAEzD,CAAEjF,KAAuBxtB,MAAjByyB,EAA6B,GAAKA,EAAezF,UAE/D3iB,OAAQjR,IAAcmxB,EAAqBntB,IAAIhE,EAASo0B,OACxDryB,IAAK/B,GAAaoJ,EAAYowB,eAAe,CAC9C34B,KAAM,MACNuzB,KAAMp0B,EAASo0B,KACfR,KAAM5zB,EAAS4zB,QAEdnR,QAASziB,GAAayG,KAAKkrB,QAAQ8H,YAAYz5B,IAExD,MAAO0gB,GACH9L,EAAO3K,MAAM,CAAE/E,KAAM,qCAAsC,CAACmK,EAAQkR,OAAOmZ,UAAWpB,EAAQ5X,OAAO,kCAAkC4X,MAG/I,kBAAkB/G,EAAM5xB,GACpB,IACI,IAAI0B,QAAQO,MAAON,IACf,OAAQ3B,EAAQ+B,MAAMwwB,SAClB,KAAKvC,EAAUwC,QAAQwH,KACnBlzB,KAAKmzB,sBAAsBj6B,EAAQ+B,MAAMqd,SACzC,MACJ,KAAK4Q,EAAUwC,QAAQ7mB,YACb7E,KAAKozB,uBAAuBtI,EAAM5xB,EAAQ+B,MAAMqd,SACtD,MACJ,KAAK4Q,EAAUwC,QAAQ/pB,gBACb3B,KAAKqzB,2BAA2Bn6B,EAAQ+B,MAAMqd,SACpD,MACJ,KAAK4Q,EAAUwC,QAAQ4H,UACnBtzB,KAAKuzB,2BAA2BzI,EAAM5xB,EAAQ+B,MAAMqd,SACpD,MACJ,KAAK4Q,EAAUwC,QAAQ8H,YACnBxzB,KAAKyzB,6BAA6B3I,GAClC,MACJ,KAAK5B,EAAUwC,QAAQgI,WACnB1zB,KAAK2zB,4BAA4B7I,EAAM5xB,EAAQ+B,MAAMqd,SACrD,MACJ,KAAK4Q,EAAUwC,QAAQO,QACnBjsB,KAAK4zB,yBAAyB9I,GAC9B,MACJ,KAAK5B,EAAUwC,QAAQC,gBACb3rB,KAAK6zB,2BAA2B/I,EAAM5xB,EAAQ+B,MAAMqd,SAC1D,MACJ,KAAK4Q,EAAUwC,QAAQoI,cACb9zB,KAAK+zB,yBAAyBjJ,EAAM5xB,EAAQ+B,MAAMqd,SACxD,MACJ,KAAK4Q,EAAUwC,QAAQsI,iBACbh0B,KAAKi0B,4BAA4BnJ,EAAM5xB,EAAQ+B,MAAMqd,SAC3D,MACJ,KAAK4Q,EAAUwC,QAAQuG,cACbjyB,KAAKk0B,yBAAyBpJ,EAAM5xB,EAAQ+B,MAAMqd,SACxD,MACJ,KAAK4Q,EAAUwC,QAAQgF,IACnB1wB,KAAKm0B,qBAAqBrJ,EAAM5xB,EAAQ+B,MAAMqd,SAC9C,MACJ,KAAK4Q,EAAUwC,QAAQoF,QACnB9wB,KAAKo0B,yBAAyBtJ,GAC9B,MACJ,KAAK5B,EAAUwC,QAAQ2I,SACbr0B,KAAKwwB,sBAAsBt3B,EAAQ+B,MAAMqd,SAC/C,MACJ,KAAK4Q,EAAUwC,QAAQqC,OACnB/tB,KAAKs0B,wBAAwBxJ,GAC7B,MACJ,KAAK5B,EAAUwC,QAAQkB,QACnB5sB,KAAKu0B,yBAAyBzJ,GAC9B,MACJ,KAAK5B,EAAUwC,QAAQ8I,MAEvB,KAAKtL,EAAUwC,QAAQ+I,YAEvB,KAAKvL,EAAUwC,QAAQgJ,SAEvB,KAAKxL,EAAUwC,QAAQiJ,KAEvB,KAAKzL,EAAUwC,QAAQkJ,KAEvB,KAAK1L,EAAUwC,QAAQljB,OACnB,MACJ,QACII,EAAQ6B,MAAMY,YAAYnS,EAAQ+B,OAE1CJ,MACDg6B,MAAM,QAGb,MAAOlD,KAGX,sBAAsBuB,GAClBA,EAAK4B,UACAtqB,OAAQ3J,IAAa6pB,EAAqBntB,IAAIsD,EAAQ8sB,OACtDryB,IAAKuF,GAAY8B,EAAYowB,eAAe,CAC7C34B,KAAM,MACNuzB,KAAM9sB,EAAQ8sB,KACdR,KAAMtsB,EAAQssB,QAEbnR,QAASziB,GAAayG,KAAKkrB,QAAQ8H,YAAYz5B,IAExD,6BAA6BuxB,EAAMjmB,GAC/B,MAAMgf,EAAa7jB,KAAKquB,kBAAkBvD,EAAKvxB,UAC/CyG,KAAKquB,kBAAkBvD,EAAKvxB,UAAY1B,KAAKk9B,IAAIlwB,EAAMuF,WAAsBjK,IAAf0jB,EAA2B,EAAIA,SACvF7jB,KAAKg1B,WAAWnwB,GAE1B,mBAAmBA,GACf,KAAI7E,KAAKuB,WAAWmV,kBAAoB7R,EAAMuF,OAASpK,KAAK+uB,qBAAqBxxB,IAAIsH,EAAM8S,UAGtF3X,KAAK8uB,wBAAwBvxB,IAAIsH,EAAMzB,OAAO,CAC/CpD,KAAK+uB,qBAAqBvxB,IAAIqH,EAAM8S,SACpC,IAII,QAAmBxX,UAHMH,KAAKuB,WAAWsD,MAAMR,OAAO,CAClDlB,YAAa0B,EAAMzB,OAGnB,UACUpD,KAAKuB,WAAW6V,aAAa,CAAEvS,eACP1E,IAA1BH,KAAKqvB,kBACLrvB,KAAKqvB,iBAAiB4F,iBAE1B,MAAMnK,EAAO9qB,KAAK+qB,qBACL5qB,IAAT2qB,GAAsBjmB,EAAMuF,MAAQ0gB,EAAK/uB,KAAK8V,aAC9C7R,KAAKgsB,MAAMhsB,KAAKwrB,cAAc,CAC1BC,QAASvC,EAAUwC,QAAQgF,IAC3BpY,QAAS,IAAI8Q,EAAUuH,WAAW,CAC9Bv2B,KAAMgvB,EAAUwH,cAAc9rB,MAC9B+rB,OAAQ,CAAChsB,EAAMzB,WAI3B+K,EAAOsJ,KAAK,CAAEhZ,KAAM,kBAAmB,CAACmK,EAAQkR,OAAOC,iBAAkBlV,EAAMuF,QAEnF,MAAO6P,GAEH,MADA9L,EAAO3K,MAAM,CAAE/E,KAAM,kBAAmB,CAACmK,EAAQkR,OAAOC,iBAAkBlV,EAAMuF,MAAO6P,QACjFA,EAGdja,KAAK8uB,wBAAwBtxB,IAAIqH,EAAMzB,MACvCpD,KAAKkvB,yBAAyB1xB,IAAIqH,EAAMzB,MACxCyB,EAAM6L,aAAasL,QAAS9W,WACjBlF,KAAKosB,eAAelnB,EAAYyS,SACvC3X,KAAKgvB,8BAA8BxxB,IAAI0H,EAAY9B,QAEvDuK,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAASiT,EACTzuB,MAAO7B,OAAOsE,KAAKsC,KAAKosB,gBAAgB7xB,UAIpD,QACIyF,KAAK+uB,qBAAqB7J,OAAOrgB,EAAM8S,WAInD,iCAAiCW,GAC7B,MAAM,UAAE3W,GAAc3B,UACJG,IAAdwB,UACM3B,KAAKuB,WAAW2zB,uBAAuB5c,GAC7C3W,EAAUwzB,2BAA2B7c,IAG7C,2BAA2BwS,EAAMsK,QACQj1B,IAAjC2qB,EAAK/uB,KAAKkyB,oBACVnD,EAAK/uB,KAAKkyB,mBAAmBoH,OAAOD,EAAUr5B,MAGtD,6BAA6B+uB,GACzBA,EAAK/uB,KAAKkyB,wBAAqB9tB,EAEnC,4BAA4B2qB,EAAMwK,GAC9BxK,EAAK/uB,KAAKkyB,mBAzmBY,GAAGzjB,SAAQ+qB,IAAGC,WAAa,IAAI1M,EAAe9Y,QAAQ,CAChFylB,MAAOC,EAAO1R,KAAKxZ,GACnBmrB,WAAYJ,EACZK,OAAQJ,IAsmB2BK,CAAsBP,GAEzD,yBAAyBxK,GACrB,MAAMgK,EAAYpY,EAAS1M,QAAQuc,KAAK7P,EAAS1M,QAAQqhB,QAAQrxB,KAAKkrB,QAAQoE,eAAeh0B,IAAKkzB,GAAkBA,EAAczyB,KAAK8E,SAAS2J,OAAO5B,EAAQ6B,MAAMC,UAvlBjJ,KAwlBhBoqB,EAAUv6B,OAAS,GACnByF,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQwH,KAC3B5a,QAAS,IAAI8Q,EAAU0M,YAAY,CAAEhB,iBAIjD,iCAAiChK,EAAMiL,GACnC,MAAM9D,QAAgBjyB,KAAKg2B,WAAWD,EAAW/1B,KAAKuB,WAAWmV,mBACjE1W,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQgF,IAC3BpY,QAAS,IAAI8Q,EAAUuH,WAAW,CAC9Bv2B,KAAMgvB,EAAUwH,cAAc9rB,MAC9B+rB,OAAQoB,EAAQ32B,IAAKyI,GAAWA,EAAOX,WAInD,+BAA+B0nB,EAAMmL,GACjC,OAAQA,EAAQ77B,MACZ,KAAKgvB,EAAUwH,cAAczX,kBACnBve,QAAQmW,IAAIklB,EAAQpF,OAAOv1B,IAAIH,MAAOiI,IACxC,IAAI8B,EAAclF,KAAKosB,eAAezjB,EAAgB9F,OAAOma,aAAa5Z,SACtDjD,IAAhB+E,IACAA,QAAoBlF,KAAKuB,WAAW2D,YAAYb,OAAO,CAAEjB,eAEzCjD,IAAhB+E,GACAlF,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQ2I,GAC3B/b,QAASpT,QAIrB,MACJ,KAAKkkB,EAAUwH,cAAc9rB,YACnBlK,QAAQmW,IAAIklB,EAAQpF,OAAOv1B,IAAIH,MAAOiI,IACxC,MAAMyB,QAAc7E,KAAKuB,WAAWsD,MAAMR,OAAO,CAC7ClB,YAAaC,SAEHjD,IAAV0E,SACqC1E,IAAjC2qB,EAAK/uB,KAAKkyB,mBACVjuB,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQ7mB,MAC3ByT,QAASzT,KAIb7E,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQ+I,YAC3Bnc,QAAStY,KAAKk2B,yBAAyB,CACnCrxB,QACAsxB,MAAOtxB,EAAM6L,aAAapV,IAAK4J,GAAgBlF,KAAKgxB,WAAWlG,EAAK/uB,KAAKkyB,mBAAoB/oB,aAMjH,MACJ,KAAKkkB,EAAUwH,cAAcjB,UACzBsG,EAAQpF,OAAO7U,QAAS5Y,IACpB,MAAMkV,EAAUtY,KAAKovB,eAAetxB,IAAI6K,EAAgB9F,OAAOma,aAAa5Z,SAC5DjD,IAAZmY,GACAtY,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQ/pB,UAC3B2W,eAIZ,MACJ,QACI1P,EAAQ6B,MAAMY,YAAY4qB,EAAQ77B,OAG9C,kCAAkC0wB,EAAMiL,GACpC,MAAM9D,QAAgBjyB,KAAKg2B,WAAWD,EAAW/1B,KAAKuB,WAAW8U,cAAcjM,OAC/EpK,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQuG,QAC3B3Z,QAAS,IAAI8Q,EAAUgN,eAAe,CAAEnE,eAGhD,+BAA+BnH,EAAMuL,GACjC,MAAMpE,EAAUoE,EAAepE,QAAQznB,OAAQzG,IAAY/D,KAAKkvB,yBAAyB3xB,IAAIwG,EAAOX,QAAUpD,KAAKmvB,sBAAsB5xB,IAAIwG,EAAO4T,UACpJ,GAAIsa,EAAQ13B,OAAS,EAAG,CACpB03B,EAAQjW,QAASjY,IACb/D,KAAKmvB,sBAAsB3xB,IAAIuG,EAAO4T,WAE1C,UACU3X,KAAKuB,WAAW2V,eAAe+a,GACrCA,EAAQjW,QAASjY,IACb/D,KAAKkvB,yBAAyB1xB,IAAIuG,EAAOX,QAGjD,QACI6uB,EAAQjW,QAASjY,IACb/D,KAAKmvB,sBAAsBjK,OAAOnhB,EAAO4T,YAIjD3X,KAAKuB,WAAW8U,cAAcjM,MAAQ0gB,EAAK/uB,KAAK8V,aAChD7R,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQsI,WAC3B1b,QAAS,IAAI8Q,EAAUwC,iBAAiB,CACpCC,UAAW,CAAC7rB,KAAKuB,WAAW8U,cAAcjT,WAK1D,qBAAqB0nB,EAAM4F,GACvB,IAAIG,EACJ,OAAQH,EAAIt2B,MACR,KAAKgvB,EAAUwH,cAAczX,YACzB0X,EAASH,EAAIG,OAAOrmB,OAAQpH,IAAUpD,KAAKgvB,8BAA8BzxB,IAAI6F,KACxEpD,KAAKivB,2BAA2B1xB,IAAIoL,EAAgB9F,OAAOma,aAAa5Z,KAC7E,MACJ,KAAKgmB,EAAUwH,cAAc9rB,MACzB+rB,EAASH,EAAIG,OAAOrmB,OAAQpH,IAAUpD,KAAK8uB,wBAAwBvxB,IAAI6F,KAAUpD,KAAK+uB,qBAAqBxxB,IAAIoL,EAAgB9F,OAAOma,aAAa5Z,KACnJ,MACJ,KAAKgmB,EAAUwH,cAAcjB,UACzBkB,EAASH,EAAIG,OACb,MACJ,QACIjoB,EAAQ6B,MAAMY,YAAYqlB,EAAIt2B,MAC9By2B,EAAS,GAEbA,EAAOt2B,OAAS,GAChByF,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQoI,QAC3Bxb,QAAS,IAAI8Q,EAAUuH,WAAW,CAAEv2B,KAAMs2B,EAAIt2B,KAAMy2B,cAIhE,yBAAyB/F,GACrB9qB,KAAKurB,YAAYT,EAAM9qB,KAAKwrB,cAAc,CACtCC,QAASvC,EAAUwC,QAAQgF,IAC3BpY,QAAS,IAAI8Q,EAAUuH,WAAW,CAC9Bv2B,KAAMgvB,EAAUwH,cAAczX,YAC9B0X,OAAQz3B,OAAOuc,OAAO3V,KAAKosB,gBAAgB9wB,IAAK4J,GAAgBA,EAAY9B,WAIxF,4BAA4B8B,GACpBlF,KAAKs2B,UACDpxB,EAAY9K,OAASuI,EAAYge,gBAAgBI,WACnB5gB,IAA1BH,KAAKqvB,kBACLrvB,KAAKqvB,iBAAiBmB,sBAAsBtrB,SAI1ClF,KAAKu2B,iBAAiBrxB,IAIxC,wBAAwB4lB,GACpBA,EAAKxrB,QAET,yBAAyBwrB,GACrBA,EAAKxrB,QAET,iBAAiBy2B,EAAWS,GACxB,IAAIC,EAAuB77B,QAAQC,QAAQ27B,GACtCT,EAAUW,SAASC,OAAOhuB,EAAgB9F,OAAO+zB,gBAClDH,EAAuBz2B,KAAKuB,WAAWwC,OAClCM,OAAO,CAAElB,YAAa4yB,EAAUW,WAChCh8B,KAAMm8B,QAAsC12B,IAAnB02B,EAA+BL,EAAY3+B,KAAKi/B,IAAID,EAAezsB,MAAOosB,KAE5G,MAAOO,EAAkBC,SAAiBp8B,QAAQmW,IAAI,CAClDnW,QAAQmW,IAAIglB,EAAUlK,UAAUvwB,IAAIH,MAAOiI,GAASpD,KAAKuB,WAAWwC,OAAOM,OAAO,CAAElB,YAAaC,MACjGqzB,IAEEQ,EAAkBva,EAAS1M,QAAQknB,KAAKxa,EAAS1M,QAAQmnB,QAAQJ,EAAiBvsB,OAAO5B,EAAQ6B,MAAMC,SAAU,CAAE3G,GAAWA,EAAOqG,SAC3I,QAAwBjK,IAApB82B,EACA,MAAO,GAEX,MAAMpL,EAAYoL,EAAgB7sB,MAAQ,EAC1C,OAAIyhB,EAAY2K,EACL,GAEJ57B,QAAQmW,IAAI2L,EAAS1M,QAAQonB,MAAMvL,EAAWh0B,KAAKi/B,IAAIjL,EAvwB7C,IAuwB2EmL,IAAU17B,IAAIH,MAAOiP,GAAUpK,KAAKuB,WAAWwC,OAAOjG,IAAI,CAAEqF,YAAaiH,MAEzK,WAAWitB,EAAenyB,GACtB,MAAMoyB,EAAcD,EACpB,YAAoBl3B,IAAhBm3B,IAGIA,EAAYC,SAASryB,EAAY9B,OACrC8B,EAAYka,QAAQlgB,KAAMkG,GAAWkyB,EAAYC,SAASnyB,EAAOvE,WACjEqE,EAAYic,OAAOjiB,KAAMgL,GAAUotB,EAAYC,SAASrtB,EAAMsB,mBAC9DtG,EAAYkO,QAAQlU,KAAM2Z,GAAWye,EAAYC,SAAS5uB,EAAgBgK,OAAOC,aAAaiG,EAAOvG,iBACpGpN,EAAY9K,OAASuI,EAAYge,gBAAgB4B,UAC9Crd,aAAuBvC,EAAY6f,qBACnC8U,EAAYC,SAASryB,EAAY4B,MAAM8b,QAEnD,0BAAyB,MAAE/d,EAAK,MAAEsxB,IAC9B,MAAMqB,EAAO,IAAI70B,EAAY80B,WAAW5yB,EAAM6L,aAAapV,IAAK4J,GAAgBA,EAAY9B,OAAOs0B,KAAKvB,GAClGwB,EAAgBjC,EAAOkC,YAAY//B,KAAKC,OAAOq+B,EAAM57B,OAAS,GAAK,IACzE,IAAK,IAAIs9B,EAAI,EAAGA,EAAI1B,EAAM57B,OAAQs9B,GAAK,EAC/B1B,EAAM0B,KACNF,EAAc9/B,KAAKC,MAAM+/B,EAAI,KAAO,GAAKA,EAAI,GAGrD,OAAO,IAAIzO,EAAU0O,mBAAmB,CACpClL,QAAS/nB,EAAM+nB,QACf5M,aAAcnb,EAAMmb,aACpB+X,WAAYlzB,EAAMkzB,WAClB5d,UAAWtV,EAAMsV,UACjB/P,MAAOvF,EAAMuF,MACb4tB,cAAenzB,EAAMmzB,cACrBC,cAAepzB,EAAMozB,cACrBpf,OAAQhU,EAAMgU,OACdqf,iBAAkBrzB,EAAM6L,aAAanW,OACrCs2B,OAAQ2G,EAAKW,cACbhC,MAAOwB,IAGf,cAAc18B,GACV,OAAO,IAAIkuB,EAAUiP,QAAQ,CACzBC,MAAOr4B,KAAKuB,WAAWX,SAASU,aAChCrG,c,2DCl2BZ7B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIq9B,EAAc,EAAQ,MAC1B/1B,EAAQotB,UAAY2I,EAAY3I,W,kCCFhCv2B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BiF,EAAW,EAAQ,KACnBhF,EAAU,EAAQ,IAClB2vB,EAAmB,EAAQ,IAC3BC,EAAS,EAAQ,MACjBC,EAAW,EAAQ,KACnBC,EAAqB,EAAQ,MAC7BC,EAAmB,EAAQ,MAC3BC,EAA2B,EAAQ,MACnCC,EAAuB,EAAQ,MAC/BC,EAA8B,EAAQ,MACtCC,EAAiB,EAAQ,MACzB5qB,EAASP,EAASQ,YAAYR,EAASS,WAAY,CAAEC,UAAW,cAmLtE/L,EAAQotB,UAjLR,MACI,aAAY,QAAE9vB,EAAO,KAAEiC,IACnB9B,KAAKg5B,aAAe,IAAIL,EAAiBM,eACzC,MAAMr3B,EAAa+G,EAAgB9F,OAAOvC,mBAAmBT,EAAQ+B,YAC/DoJ,EAAYrC,EAAgBgK,OAAOumB,sBAAsBt3B,GACzDu3B,EAAaxwB,EAAgBgK,OAAOymB,sBAAsBpuB,GAChEhL,KAAKH,QAAU,CACX+B,aACAoJ,YACAmuB,aACAj4B,WAAYrB,EAAQqB,YAExBlB,KAAK8B,KAAOA,EACZ9B,KAAKq5B,wBAA0B,IAAIX,EAAmBY,iBAE1D,cACI,IAAI9J,EAAa5mB,EAAQ6mB,eACzB,IAMI,aALMzvB,KAAKu5B,QACXv5B,KAAKw5B,QAAQx5B,KAAKH,SAClB2vB,EAAa5mB,EAAQ8mB,mBAAmBF,EAAYr0B,gBAC1C6E,KAAKu5B,UAER/J,EAEX,MAAOvV,GAEH,YADMuV,IACAvV,GAGd,iBACIja,KAAKg5B,aAAa/H,MAAM,CAAE72B,KAAM,uBAEpC,2BAA2Bke,GACvBtY,KAAKg5B,aAAa/H,MAAM,CACpB72B,KAAM,yBACNke,YAGR,sBAAsBpT,GAClBlF,KAAKg5B,aAAa/H,MAAM,CACpB72B,KAAM,4BACN8K,gBAGR,wBACI,IAAIlF,KAAKH,QAAQqB,WAMb,MAAM,IAAIjI,MAAM,wDALV,IAAI2B,QAAQ,CAACC,EAAS2N,KACxBxI,KAAKg5B,aAAa/H,MAAM,CAAE72B,KAAM,QAASq/B,QAAS,CAAE5+B,UAAS2N,cAOzE,aACI,OAAOxI,KAAKq5B,wBAAwBnf,aAExC,wBAAwBwf,GACpB,IAAI15B,KAAKH,QAAQqB,WAIb,MAAM,IAAIjI,MAAM,+CAHhB+G,KAAKq5B,wBAAwBM,kBAAkBD,GAMvD,wBAAwBA,GACpB,IAAI15B,KAAKH,QAAQqB,WAIb,MAAM,IAAIjI,MAAM,+CAHhB+G,KAAKq5B,wBAAwBO,kBAAkBF,GAMvD,cACI15B,KAAK65B,aACL75B,KAAKg5B,aAAahsB,OAClBhN,KAAKg5B,aAAe,IAAIL,EAAiBM,oBACR94B,IAA7BH,KAAK85B,2BACC95B,KAAK85B,oBAGnB,cACI95B,KAAKq5B,wBAA0B,IAAIX,EAAmBY,iBAE1D,eACIt5B,KAAKw5B,QAAQx5B,KAAKH,SAEtB,QAAQA,GACJ,IAAIk6B,GAAY,EAChB,MAAMD,EAAsB95B,KAAKE,cAAcL,GAASnF,KAAK,KACzDq/B,GAAY,EACZ/5B,KAAK85B,yBAAsB35B,IAE1B45B,IACD/5B,KAAK85B,oBAAsBA,GAGnC,oBAAoBj6B,GAChBsO,EAAOsJ,KAAK,CAAEhZ,KAAM,uBAAyB,sBAC7C,MAAMu7B,QAAsBvB,EAASwB,uBAAuB,CACxD14B,WAAYvB,KAAK8B,KAAKP,WACtByJ,UAAWnL,EAAQmL,UACnBkvB,iBAAkBl6B,KAAKq5B,gCAErBd,EAAiB4B,eAAenW,KAAKhkB,KAAKg5B,cAC3C1sB,KAAKksB,EAAO4B,KAAKj/B,MAAOkG,EAASvF,KAClC,IAAIuH,EACJ,OAAQvH,EAAM1B,MACV,IAAK,qBACDiJ,QAAew1B,EAAqBwB,mBAAmB,CACnD94B,WAAYvB,KAAK8B,KAAKP,WACtByJ,UAAWnL,EAAQmL,UACnBkvB,iBAAkBl6B,KAAKq5B,0BAE3B,MACJ,IAAK,yBACDh2B,QAAeu1B,EAAyB0B,uBAAuB,CAC3Dj5B,UACAS,KAAM9B,KAAK8B,KACXF,WAAY/B,EAAQ+B,WACpB0W,QAASxc,EAAMwc,QACf4hB,iBAAkBl6B,KAAKq5B,0BAE3B,MACJ,IAAK,4BACDh2B,QAAey1B,EAA4ByB,0BAA0B,CACjEl5B,UACAS,KAAM9B,KAAK8B,KACXF,WAAY/B,EAAQ+B,WACpBsD,YAAapJ,EAAMoJ,YACnBg1B,iBAAkBl6B,KAAKq5B,0BAE3B,MACJ,IAAK,QACDh2B,QAAe01B,EAAeyB,aAAa,CACvCn5B,UACAS,KAAM9B,KAAK8B,KACXjC,UACAq6B,iBAAkBl6B,KAAKq5B,0BACxBxE,MAAO5a,IAIN,WAHsB9Z,IAAlBrE,EAAM29B,SACN39B,EAAM29B,QAAQjxB,OAAOyR,GAEnBA,SAEY9Z,IAAlBrE,EAAM29B,SACN39B,EAAM29B,QAAQ5+B,UAElB,MACJ,QAEI,MADA+N,EAAQ6B,MAAMY,YAAYvP,GACpB,IAAI7C,MAAM,UAExB,OAAO+G,KAAKy6B,aAAap3B,IAC1BrD,KAAKy6B,aAAaT,KAChBhe,QAAQ,QAEb7N,EAAOsJ,KAAK,CAAEhZ,KAAM,sBAAwB,sBAEhD,aAAa4E,GAIT,YAH4BlD,IAAxBkD,EAAOq3B,cACP16B,KAAK26B,YAAYt3B,EAAOq3B,cAErBr3B,EAAOhC,QAElB,YAAYu5B,GACR56B,KAAK65B,aACL75B,KAAK66B,aAAeC,WAAW,IAAM96B,KAAKg5B,aAAa/H,MAAM,CAAE72B,KAAM,UAzKxD,IAyKoEwgC,GAErF,kBAC8Bz6B,IAAtBH,KAAK66B,eACLE,aAAa/6B,KAAK66B,cAClB76B,KAAK66B,kBAAe16B,M,kCC5LhC/G,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM+/B,EAAkB,EAAQ,KAC1BC,EAAyB,EAAQ,KACjCC,EAAwB,EAAQ,KACtC,MAAMC,UAA+BH,EAAgBI,cACjD,aAAY,WAAEC,EAAU,QAAEC,EAAO,aAAEC,EAAY,aAAEC,EAAY,WAAE7d,EAAU,yBAAE8d,EAAwB,aAAE/qB,EAAY,WAAEgrB,EAAU,OAAE33B,IAC3HqjB,MAAM,CACFhtB,KAAM,SACNihC,aACAC,UACAC,eACAC,eACA7d,aACA8d,2BACA/qB,eACAgrB,aACA33B,WAGR,OAAM,aAAE2M,IACJ,OAAO,IAAIyqB,EAAuB,CAC9BE,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,eACA3M,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,mBAE5BD,WAAY17B,KAAK07B,aAGzB,mBAAkB,aAAEF,IAChB,OAAO,IAAIN,EAAsBU,oBAAoB,CACjD5b,aAAchgB,KAAKggB,aACnB6D,WAAY7jB,KAAK6jB,WACjBwX,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,2BAGvC,oBAAmB,WAAEC,IACjB,OAAO,IAAIT,EAAuBY,qBAAqB,CACnDzhC,KAAM4F,KAAK5F,KACXihC,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnB3M,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,mBAE5BD,eAGR,mBAAkB,aAAEF,IAChB,OAAO,IAAIL,EAAuB,CAC9BE,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,WAAY17B,KAAK07B,WACjB33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,qBAIpC,iBAAgB,WAAED,IACd,OAAO,IAAIP,EAAuB,CAC9BE,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,aACA33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,sBAKxCp5B,EAAQ44B,uBAAyBA,G,kCCrGjC/hC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM6gC,EAAqB,EAAQ,KAcnCv5B,EAAQw5B,eAbR,SAAwB16B,GACpB,OAAO,IAAIy6B,EAAmBE,iBAAiB,CAC3C5hC,KAAMiH,EAAQjH,KACd4lB,aAAc3e,EAAQ2e,aACtB6D,WAAYxiB,EAAQwiB,WACpBwX,WAAYh6B,EAAQg6B,WACpBC,QAASj6B,EAAQi6B,QACjBC,aAAcl6B,EAAQk6B,aACtBC,aAAcn6B,EAAQm6B,aACtB7d,WAAYtc,EAAQsc,WACpB8d,yBAA0Bp6B,EAAQo6B,6B,kCCZ1CriC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMghC,EAAmB,EAAQ,KAcjC15B,EAAQ25B,aAbR,SAAsB76B,GAAS,KAAEjH,EAAI,aAAE4lB,EAAY,WAAE6D,EAAU,WAAEwX,EAAU,QAAEC,EAAO,aAAEC,EAAY,aAAEC,EAAY,WAAE7d,EAAU,yBAAE8d,IAC1H,OAAO,IAAIQ,EAAiBE,eAAe,CACvC/hC,OACA4lB,kBAA+B7f,IAAjB6f,EAA6B3e,EAAQ2e,aAAeA,EAClE6D,gBAA2B1jB,IAAf0jB,EAA2BxiB,EAAQwiB,WAAaA,EAC5DwX,aACAC,aAAqBn7B,IAAZm7B,EAAwBj6B,EAAQi6B,QAAUA,EACnDC,eACAC,kBAA+Br7B,IAAjBq7B,EAA6Bn6B,EAAQm6B,aAAeA,EAClE7d,gBAA2Bxd,IAAfwd,EAA2Btc,EAAQsc,WAAaA,EAC5D8d,8BAAuDt7B,IAA7Bs7B,EAAyCp6B,EAAQo6B,yBAA2BA,M,kCCZ9GriC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM2N,EAAU,EAAQ,IAoBxBrG,EAAQ+2B,iBAnBR,MACI,cACIt5B,KAAKo8B,0BAA4B,EAErC,aACI,OAAOxzB,EAAQ6B,MAAMyP,aAAela,KAAKo8B,0BAE7C,kBAAkB1C,GACd,KAAIA,GAAW,GAIX,MAAM,IAAIzgC,MAAM,yCAHhB+G,KAAKo8B,2BAA6B1C,EAM1C,kBAAkBA,GACd15B,KAAK25B,kBAAkBD,EAAU15B,KAAKka,iB,kCClB9C9gB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IAmEtDsH,EAAQ02B,eAlER,MACI,cACIj5B,KAAKq8B,aAAe,GACpBr8B,KAAKs8B,iBAAmB,GACxBt8B,KAAKu8B,qBAAsB,EAE/B,CAACpkC,OAAOqkC,iBACJ,OAAOx8B,KAEX,aACI,MAAMy8B,EAAOz8B,KAAKq8B,aAAaK,QAC/B,YAAav8B,IAATs8B,EACkB,UAAdA,EAAKriC,KACEQ,QAAQ4N,OAAOi0B,EAAKj5B,OAExB5I,QAAQC,QAAQ,CAAEmS,MAAM,EAAO/R,MAAOwhC,EAAKxhC,QAElD+E,KAAKu8B,oBACE3hC,QAAQC,QAAQ,CAAEmS,MAAM,IAE5B,IAAIpS,QAAQ,CAACC,EAAS2N,KACzBxI,KAAKs8B,iBAAiB3+B,KAAK,CAAE9C,UAAS2N,aAG9C,MAAMvN,GACF,IAAI0hC,GAAY,EACG,uBAAf1hC,EAAMb,OACNuiC,EAAY38B,KAAKq8B,aAAan9B,KAAMu9B,GAAuB,UAAdA,EAAKriC,MAAwC,UAApBqiC,EAAKxhC,MAAMb,MACjF4F,KAAKuvB,SAETvvB,KAAKrC,KAAK,CAAEvD,KAAM,QAASa,UACvB0hC,GACA38B,KAAKrC,KAAK,CAAEvD,KAAM,QAASa,MAAO,CAAEb,KAAM,WAGlD,MAAMoJ,GACFxD,KAAKrC,KAAK,CAAEvD,KAAM,QAASoJ,UAE/B,QACIxD,KAAKq8B,aAAe,GAExB,OACIr8B,KAAKuvB,QACLvvB,KAAKs8B,iBAAiBtgB,QAAQ,EAAGnhB,aAAcA,EAAQ,CAAEmS,MAAM,KAC/DhN,KAAKs8B,iBAAmB,GACxBt8B,KAAKu8B,qBAAsB,EAE/B,KAAKE,GACD,GAAIz8B,KAAKu8B,oBACL,MAAM,IAAItjC,MAAM,gCAEpB,MAAM2jC,EAAW58B,KAAKs8B,iBAAiBI,QACvC,QAAiBv8B,IAAby8B,EAAwB,CACxB,MAAM,QAAE/hC,EAAO,OAAE2N,GAAWo0B,EACV,UAAdH,EAAKriC,KACLoO,EAAOi0B,EAAKj5B,OAGZ3I,EAAQ,CAAEmS,MAAM,EAAO/R,MAAOwhC,EAAKxhC,aAIvC+E,KAAKq8B,aAAa1+B,KAAK8+B,M,kCC/DnCrjC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClB6vB,EAAW,EAAQ,KACnBoE,EAAY,EAAQ,KA+G1Bt6B,EAAQ+3B,uBAAyBn/B,OAASkG,UAASS,OAAMF,aAAY0W,UAAS4hB,uBAC1E,MAAM,iBAAE4C,GAAqBxkB,EAC7B,GAAIA,EAAQykB,iBAAmB17B,EAAQi6B,SACnChjB,EAAQsU,UAAYvrB,EAAQurB,UAC3BjkB,EAAgB9F,OAAO2O,aAAa8G,EAAQ0H,aAAc3e,EAAQ2e,eACnE1H,EAAQuL,aAAexiB,EAAQwiB,YAC/BvL,EAAQykB,gBAAkB17B,EAAQsc,WAAWpjB,QAC5CuiC,EAAiB1iC,OAASuI,EAAYq6B,qBAAqBC,YAAcH,EAAiBzB,aAAeh6B,EAAQg6B,WAClH,MAAO,CAAEh6B,WAEb,OAAQy7B,EAAiB1iC,MACrB,KAAKuI,EAAYq6B,qBAAqBC,WAClC,MA1Ha,GAAG57B,QAAS67B,EAAWp7B,OAAMwW,UAAS4hB,mBAAkBhhC,cAC7E,IAAImI,EAAU67B,EACd,MAAM7B,EAAaniC,EAAQikC,cAC3B,GAAI9B,EAAah6B,EAAQm6B,aAAaljB,EAAQykB,gBAAiB,CAC3D,MAAMK,EAAsB,IAAI/7B,EAAQm6B,cAGxC,GAFA4B,EAAoB9kB,EAAQykB,gBAAkB1B,EAC9Ch6B,EAAUA,EAAQg8B,kBAAkB,CAAE7B,aAAc4B,IAChD3E,EAAS6E,kBAAkB,CAAEj8B,UAASg6B,eACtC,OAAO5C,EAAS8E,oBAAoB,CAChCz7B,OACAT,UACAg6B,aACAnB,qBAIZ,MAAO,CAAE74B,YA0GMm8B,CAAiB,CACpBn8B,UACAS,OACAwW,UACA4hB,mBACAhhC,QAAS4jC,IAEjB,KAAKn6B,EAAYq6B,qBAAqBS,eAClC,MA/GiBtiC,QAASkG,QAAS67B,EAAWp7B,OAAMF,aAAY0W,UAAS4hB,mBAAkBhhC,cACnG,IAAImI,EAAU67B,EACd,GAAqB,WAAjB77B,EAAQjH,MACRiH,aAAmBw7B,EAAU1B,wBAC7B7iB,EAAQykB,iBAAmB17B,EAAQk6B,cACnCjjB,EAAQ6B,UAAY+f,EAAiBhgB,aANd,IAOvB,MAAO,CAAE7Y,WAEb,MAAM0C,QAAejC,EAAKP,WAAWwC,OAAOjG,IAAI,CAC5CqF,YAAa9B,EAAQ2e,eAEzB,GAAI1H,EAAQ6B,WAAapW,EAAOoW,UAC5B,MAAO,CAAE9Y,WAEb,MAAMq8B,EAAoB,GAC1BA,EAAkBplB,EAAQykB,gBAAkB7jC,EAAQykC,UACpD,MAAMC,EAAa,IAAIf,EAAU1B,uBAAuB,CACpDE,WAAYh6B,EAAQg6B,WACpBC,QAASj6B,EAAQi6B,QACjBC,aAAcl6B,EAAQk6B,aACtBC,aAAcn6B,EAAQm6B,aACtB7d,WAAYtc,EAAQsc,WACpB8d,yBAA0Bp6B,EAAQo6B,yBAClC/qB,aAAc,GACdgrB,WAAYgC,EACZ35B,OAAQ,CACJ3J,KAAM,MACN4lB,aAAc3e,EAAQ2e,aACtB2b,kBAAmBziC,EAAQyiC,kBAAkBrgC,IAAK8H,GAASuF,EAAgB9F,OAAOma,aAAa5Z,IAC/FygB,WAAYxiB,EAAQwiB,WACpBwJ,MAAOn0B,EAAQm0B,MACflT,UAAW7B,EAAQ6B,UACnB8d,cAAe/+B,EAAQ++B,iBAQ/B,IALiBtvB,EAAgBgK,OAAOoF,OAAO,CAC3C7e,QAAS0kC,EAAW75B,OAAO7K,QAC3BykC,UAAWzkC,EAAQykC,UACnB3yB,UAAW3J,EAAQsc,WAAWrF,EAAQykB,kBAGtC,MAAO,CAAE17B,WAEb,IAAIw8B,EAAcD,EAClB,IAAK,MAAMx6B,KAAQw6B,EAAWjC,kBAAkBnhC,MAAM,GAAI,CACtD,MAAM0K,EAAcpD,EAAK2W,QAAQrV,GACjC,QAAoBjD,IAAhB+E,EAA2B,CAC3B,MAAM44B,QAAYrF,EAASsF,eAAe,CACtC18B,QAASw8B,EACT/7B,OACAF,aACAsD,cACA6S,QAAQ,EACRmiB,qBAEJ,KAAM4D,EAAIz8B,mBAAmBw7B,EAAU1B,wBACnC,OAAO2C,EAEXD,EAAcC,EAAIz8B,SAG1B,MAAMgC,QAAeo1B,EAASsF,eAAe,CACzC18B,QAASw8B,EACT/7B,OACAF,aACAsD,YAAahM,EAAQ8kC,iBACrBjmB,QAAQ,EACRmiB,qBAEJ,OAAM72B,EAAOhC,mBAAmBw7B,EAAU1B,wBAG1C95B,EAAUgC,EAAOhC,QACjBS,EAAKm8B,cACE,CAAE58B,YAJEgC,GAyCI66B,CAAqB,CACxB78B,UACAS,OACAF,aACA0W,UACA4hB,mBACAhhC,QAAS4jC,IAEjB,KAAKn6B,EAAYq6B,qBAAqBmB,gBAClC,MA5CkBhjC,QAASkG,UAASS,OAAMwW,UAASpf,cAC3D,GAAImI,aAAmBw7B,EAAUzB,oBACkBj7B,IAA/CkB,EAAQq6B,WAAWpjB,EAAQykB,iBAC3Bp0B,EAAgBgK,OAAOoF,OAAO,CAC1B7e,QAASmI,EAAQ0C,OAAO7K,QACxBykC,UAAWzkC,EAAQykC,UACnB3yB,UAAW3J,EAAQsc,WAAWrF,EAAQykB,kBACtC,CACJ,MAAMW,EAAoB,IAAIr8B,EAAQq6B,YACtCgC,EAAkBplB,EAAQykB,gBAAkB7jC,EAAQykC,UACpD,MAAMC,EAAav8B,EAAQ+8B,gBAAgB,CAAE1C,WAAYgC,IACzD,OAAOjF,EAAS4F,gBAAgB,CAAEh9B,QAASu8B,EAAY97B,SAE3D,MAAO,CAAET,YA+BMi9B,CAAsB,CACzBj9B,UACAS,OACAwW,UACApf,QAAS4jC,IAEjB,QAEI,MADAl0B,EAAQ6B,MAAMY,YAAYyxB,GACpB,IAAI7jC,MAAM,a,kCCzJ5BG,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMw9B,EAAW,EAAQ,KACzBl2B,EAAQ83B,mBAAqBl/B,OAASoG,aAAYyJ,YAAWkvB,sBAAwBzB,EAASwB,uBAAuB,CACjH14B,aACAyJ,YACAkvB,sB,kCCLJ9gC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMw9B,EAAW,EAAQ,KACnBoE,EAAY,EAAQ,KAC1Bt6B,EAAQg4B,0BAA4Bp/B,OAASkG,UAASS,OAAMF,aAAYsD,cAAag1B,sBAC3E74B,aAAmBw7B,EAAU1B,6BACeh7B,IAA9CkB,EAAQqP,aAAaxL,EAAYyS,UAChCtW,EAAQk9B,qBAAqBhhC,IAAI2H,EAAYyS,SAG3C8gB,EAASsF,eAAe,CAC3B18B,UACAS,OACAF,aACAsD,cACA6S,QAAQ,EACRmiB,qBARO,CAAE74B,Y,kCCPjBjI,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClB41B,EAAiB97B,EAAQqL,gBAAgB,EAAQ,KACjD2O,EAAWha,EAAQqL,gBAAgB,EAAQ,KAC3C0qB,EAAW,EAAQ,KACnBoE,EAAY,EAAQ,KAsC1Bt6B,EAAQi4B,aAAer/B,OAASkG,UAASS,OAAMjC,SAAW+B,aAAYu3B,aAAYj4B,cAAcg5B,uBAC5F,GAAqB,YAAjB74B,EAAQjH,QAAwBiH,aAAmBw7B,EAAU4B,oBAAqB,CAClF,IAAIC,EACJ,GAAIr9B,aAAmBw7B,EAAUhB,qBAC7B6C,EAAqBr9B,EAAQs9B,uBAE5B,CACD,MAAMtR,EAAQ1qB,EAAY8H,MAAMm0B,eAChC,IAAIC,EAAsBzlC,OAAOuc,OAAO7T,EAAK2W,SAC7C,MAAMulB,OA9Ca7iC,QAAS2G,OAAMq3B,aAAYzoB,eAAc2c,YACpE,MAAMhD,QAAmB1nB,EAAYmC,MAAMg6B,oBAAoBh9B,EAAKP,WAAWqV,WAAYlG,GACrF0O,EAAUiL,EAAW0U,SACrB,GACA,CACE,IAAIp8B,EAAY0C,OAAO,CACnByB,MAAOhF,EAAKP,WAAWX,SAASiW,aAAazT,KAC7CnI,MAAOovB,EACPxpB,QAASs4B,KAGrB,OAAO,IAAIx2B,EAAYqe,iBAAiB,CACpCqM,MAAOA,EAAM2R,IAAIr8B,EAAY8H,MAAMw0B,SAASC,KAAK,IAAIC,WACrD/f,aAiCmCggB,CAAuB,CAClDt9B,OACAq3B,aACAzoB,aAAcmuB,EACdxR,UAEJ,GAAIwR,EAAoBtkC,QAAUuH,EAAKP,WAAWX,SAASy+B,wBAAyB,CAChF,MAAMC,QAA2B1kC,QAAQmW,IAAI8tB,EAAoBvjC,IAAIH,MAAO+J,IACxE,MAAMmlB,QAAmBnlB,EAAYonB,cAAcxqB,EAAKP,WAAWqV,YACnE,MAAO,CAAC1R,EAAa,IAAIs5B,EAAexuB,QAAQqa,EAAW9f,SAAS,SAExE+0B,EAAmB9S,KAAK,EAAE+S,EAAOrvB,IAAKsvB,EAAQrvB,KAAOA,EAAEsvB,IAAID,EAAOjV,MAAMmV,WAAWxvB,EAAEuvB,IAAIF,EAAMhV,QAC/FsU,EAAsBniB,EAAS1M,QAAQuc,KAAK+S,EAAoBx9B,EAAKP,WAAWX,SAASy+B,wBAA0B,GAC9G/jC,IAAI,EAAE4J,EAAay6B,KAAaz6B,GAEzC25B,EAAoBe,QAAQ5B,GAC5B,MAAO6B,EAAgBliB,SAAoB/iB,QAAQmW,IAAI,CACnDjP,EAAKP,WAAWwC,OAAOjG,IAAI,CAAEqF,YAAa9B,EAAQ2e,eAClDle,EAAKP,WAAWkP,cAAcouB,KAE5BjB,EAAa,IAAIf,EAAU4B,mBAAmB,CAChDpD,WAAYh6B,EAAQg6B,WACpBC,QAASj6B,EAAQi6B,QACjBC,aAAcl6B,EAAQk6B,aACtBC,aAAcn6B,EAAQm6B,aACtB7d,WAAYtc,EAAQsc,WACpB8d,yBAA0Bp6B,EAAQo6B,yBAClC/qB,aAAcmuB,EAAoBniC,OAAO,CAAC2L,EAAKnD,IAAiB9L,OAAOC,OAAOD,OAAOC,OAAO,GAAIgP,GAAM,CAAE,CAACnD,EAAYyS,SAAUzS,IAAiB,IAChJw2B,WAAY,GACZ33B,OAAQ,CACJ3J,KAAM,MACN4lB,aAAc3e,EAAQ2e,aACtB2b,kBAAmBkD,EAAoBvjC,IAAK4J,GAAgBA,EAAYyS,SACxEkM,WAAYxiB,EAAQwiB,WACpBwJ,QACAlT,UAAWtiB,KAAKk9B,IAAImF,EAAiBhgB,aAAc2lB,EAAe1lB,UAAY,GAC9E8d,cAAetvB,EAAgBgK,OAAOmtB,oBAAoBniB,MAG5D+f,EAAoB,GAC1BA,EAAkBE,EAAWtC,SAAW3yB,EAAgBgK,OAAOotB,KAAK,CAChE7mC,QAAS0kC,EAAW75B,OAAO7K,QAC3B0I,eAEJ88B,EAAqBd,EAAWQ,gBAAgB,CAAE1C,WAAYgC,IAElE,GAAIx8B,EACA,OAAOu3B,EAAS4F,gBAAgB,CAAEv8B,OAAMT,QAASq9B,IAErDjG,EAASuH,aAAa,CAClB3+B,QAASq9B,EACT58B,OACAF,aACAk7B,iBAAkB,IAAIn6B,EAAYs9B,+BAA+B,CAC7D5E,WAAYqD,EAAmBrD,WAC/BhO,MAAOqR,EAAmB36B,OAAOi0B,cACjCC,cAAeyG,EAAmB36B,OAAOk0B,cACzC0D,kBAAmB+C,EAAmB/C,kBAAkBrgC,IAAK8H,GAASuF,EAAgB9F,OAAO4jB,aAAarjB,IAC1G46B,iBAAkBp1B,EAAQ6B,MAAMy1B,WAAWxB,EAAmBhuB,aAAaguB,EAAmB/C,kBAAkB,KAChHgC,UAAW/0B,EAAQ6B,MAAMy1B,WAAWxB,EAAmBhD,WAAWgD,EAAmBpD,cAG7F,MAAM,gBAAEl5B,GAAoBN,EAAKP,WAAWX,SAC5C,MAAO,CACHS,QAASq9B,EACThE,aAAct4B,GAAoBs8B,EAAmBrD,WAAa,GAG1E,OAAIh6B,aAAmBw7B,EAAU4B,oBAAuC,WAAjBp9B,EAAQjH,KAlGzC,GAAGiH,QAAS67B,EAAWp7B,OAAMF,aAAYs4B,uBAC/D,IAAI74B,EAAU67B,EACd77B,EAAUA,EAAQg8B,kBAAkB,CAChC7B,aAAc/C,EAAS0H,sBAAsB9+B,KAEjDo3B,EAAS2H,uBAAuB,CAAE/+B,UAASS,OAAMF,eACjD,MAAMy5B,EAAah6B,EAAQm6B,aAAan6B,EAAQi6B,SAChD,GAAI7C,EAAS6E,kBAAkB,CAAEj8B,UAASg6B,eACtC,OAAO5C,EAAS4H,2BAA2B,CACvC9+B,WAAYO,EAAKP,WACjBF,UACAg6B,aACAnB,qBAGR,MAAM,gBAAE93B,GAAoBN,EAAKP,WAAWX,SAC5C,MAAO,CACHS,UACAq5B,aAAct4B,GAAoBi5B,EAAa,IAiFxCiF,CAAkB,CACrBj/B,UACAS,OACAF,aACAs4B,qBAGD,CAAE74B,a,kCCnIbjI,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM2N,EAAU,EAAQ,IACxBrG,EAAQkrB,iBAAmB7kB,EAAQ23B,kBAAkB,cAAe,CAACrnC,EAASsnC,IAAW,oDAAoDtnC,EAAQ+B,MAAMwwB,eAAqBtrB,IAAXqgC,EAAuB,GAAK,KAAKA,OACtMj+B,EAAQkvB,sBAAwB7oB,EAAQ23B,kBAAkB,oBAAsBC,GAAW,uBAAuBA,M,mCCJlH,YACApnC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClB63B,EAAW,EAAQ,KACnBvX,EAAY,EAAQ,KACpBE,EAAY,EAAQ,KAC1B7mB,EAAQm+B,eAAiB,GACzBn+B,EAAQo+B,iBAAmB,SAC3B,MAAMC,EAAqB38B,GAAW0E,EAAgB9F,OAAOg+B,WAAWl4B,EAAgBgK,OAAOmuB,QAAQ78B,IACjG88B,EAA2B,EAAG1/B,UAAS2/B,aACzC,GAAIA,EAAOC,iBAAmB5/B,EAAQC,aAClC,MAAM,IAAIqH,EAAgBu4B,mBAAmB,kDAAkD7/B,EAAQC,2BAA2BD,EAAQC,gBAE9I,MAAMmqB,EAAUvC,EAAUiY,cAAcH,EAAOI,gBAAgB7+B,EAAQm+B,iBACjEnmC,EAASymC,EAAOC,eACtB,GAAI1mC,EAASgI,EAAQo+B,iBACjB,MAAM,IAAIh4B,EAAgBu4B,mBAAmB,+DAA+D3+B,EAAQo+B,+BAA+BpmC,KAGvJ,MAAO,CAAEkxB,UAASlxB,SAAQ8mC,SADTL,EAAOC,iBAG5B,MAAM7I,EACF,aAAY,MAAEC,EAAK,MAAEp9B,IACjB+E,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAKq4B,MAAQA,EACbr4B,KAAK/E,MAAQA,EAEjB,2BAA2B4E,GACvB,MAAM,OAAEmhC,EAAM,QAAE3/B,GAAYxB,GACtB,QAAE4rB,EAAO,OAAElxB,EAAM,SAAE8mC,GAAaN,EAAyBlhC,GACzD2hC,EAAgBR,EAAOS,UAAUlnC,GACjCmnC,EAAwBd,EAAkBY,GAChD,GAAIE,IAA0BL,EAC1B,MAAM,IAAI14B,EAAgBu4B,mBAAmB,yCAAyCG,gBAAuBK,KAEjH,MAAMC,EAAiB,CACnBtgC,QAASxB,EAAQwB,QACjB4C,OAAQu9B,GAEZ,IAAIvmC,EACJ,OAAQwwB,GACJ,KAAKvC,EAAUwC,QAAQwH,KACnBj4B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQwH,KAC3B5a,QAAS8Q,EAAU0M,YAAY3xB,gBAAgBw9B,IAEnD,MACJ,KAAKzY,EAAUwC,QAAQ7mB,MACnB5J,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQ7mB,MAC3ByT,QAAS3V,EAAYmC,MAAMX,gBAAgBw9B,IAE/C,MACJ,KAAKzY,EAAUwC,QAAQ/pB,UACnB1G,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQ/pB,UAC3B2W,QAAS3V,EAAYi/B,iBAAiBz9B,gBAAgBw9B,IAE1D,MACJ,KAAKzY,EAAUwC,QAAQ4H,UACnBr4B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQ4H,UAC3Bhb,QAAS8Q,EAAUyY,iBAAiB19B,gBAAgBw9B,IAExD,MACJ,KAAKzY,EAAUwC,QAAQ8H,YACnBv4B,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQ8H,aACrC,MACJ,KAAKtK,EAAUwC,QAAQgI,WACnBz4B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQgI,WAC3Bpb,QAAS8Q,EAAU0Y,kBAAkB39B,gBAAgBw9B,IAEzD,MACJ,KAAKzY,EAAUwC,QAAQO,QACnBhxB,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQO,SACrC,MACJ,KAAK/C,EAAUwC,QAAQC,UACnB1wB,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQC,UAC3BrT,QAAS8Q,EAAUwC,iBAAiBznB,gBAAgBw9B,IAExD,MACJ,KAAKzY,EAAUwC,QAAQoI,QACnB74B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQoI,QAC3Bxb,QAAS8Q,EAAUuH,WAAWxsB,gBAAgBw9B,IAElD,MACJ,KAAKzY,EAAUwC,QAAQsI,WACnB/4B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQsI,WAC3B1b,QAAS8Q,EAAUwC,iBAAiBznB,gBAAgBw9B,IAExD,MACJ,KAAKzY,EAAUwC,QAAQuG,QACnBh3B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQuG,QAC3B3Z,QAAS8Q,EAAUgN,eAAejyB,gBAAgBw9B,IAEtD,MACJ,KAAKzY,EAAUwC,QAAQgF,IACnBz1B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQgF,IAC3BpY,QAAS8Q,EAAUuH,WAAWxsB,gBAAgBw9B,IAElD,MACJ,KAAKzY,EAAUwC,QAAQoF,QACnB71B,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQoF,SACrC,MACJ,KAAK5H,EAAUwC,QAAQ2I,GACnBp5B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQ2I,GAC3B/b,QAAS3V,EAAYwC,2BAA2Bw8B,IAEpD,MACJ,KAAKzY,EAAUwC,QAAQqC,OACnB9yB,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQqC,QACrC,MACJ,KAAK7E,EAAUwC,QAAQkB,QACnB3xB,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQkB,QAC3BtU,QAAS8Q,EAAUyD,eAAe1oB,gBAAgBw9B,IAEtD,MACJ,KAAKzY,EAAUwC,QAAQ8I,MACnBv5B,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQ8I,OACrC,MACJ,KAAKtL,EAAUwC,QAAQ+I,YACnBx5B,EAAQ,CACJwwB,QAASvC,EAAUwC,QAAQ+I,YAC3Bnc,QAAS8Q,EAAU0O,mBAAmB3zB,gBAAgBw9B,IAE1D,MACJ,KAAKzY,EAAUwC,QAAQgJ,SACnBz5B,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQgJ,UACrC,MACJ,KAAKxL,EAAUwC,QAAQiJ,KACnB15B,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQiJ,MACrC,MACJ,KAAKzL,EAAUwC,QAAQkJ,KACnB35B,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQkJ,MACrC,MACJ,KAAK1L,EAAUwC,QAAQljB,OACnBvN,EAAQ,CAAEwwB,QAASvC,EAAUwC,QAAQljB,QACrC,MACJ,QAEI,MADAI,EAAQ6B,MAAMY,YAAYogB,GACpB,IAAI9iB,EAAgBu4B,mBAAmB,IAErD,OAAO,IAAIlhC,KAAK,CAAEq4B,MAAOh3B,EAAQC,aAAcrG,UAEnD,uBAAuB4E,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACd,MAAM,MAAEhnC,GAAU+E,KAClBiiC,EAAOC,cAAcliC,KAAKq4B,OAC1B4J,EAAOE,iBAAiBlnC,EAAMwwB,QAASlpB,EAAQm+B,gBAC/C,IAAIpoB,EAAUod,EAAO0M,MAAM,GAC3B,OAAQnnC,EAAMwwB,SACV,KAAKvC,EAAUwC,QAAQwH,KAGvB,KAAKhK,EAAUwC,QAAQ7mB,MAGvB,KAAKqkB,EAAUwC,QAAQ/pB,UAGvB,KAAKunB,EAAUwC,QAAQ4H,UACnBhb,EAAUrd,EAAMqd,QAAQ9M,gBACxB,MACJ,KAAK0d,EAAUwC,QAAQ8H,YACnB,MACJ,KAAKtK,EAAUwC,QAAQgI,WACnBpb,EAAUrd,EAAMqd,QAAQ9M,gBACxB,MACJ,KAAK0d,EAAUwC,QAAQO,QACnB,MACJ,KAAK/C,EAAUwC,QAAQC,UAGvB,KAAKzC,EAAUwC,QAAQoI,QAGvB,KAAK5K,EAAUwC,QAAQsI,WAGvB,KAAK9K,EAAUwC,QAAQuG,QAGvB,KAAK/I,EAAUwC,QAAQgF,IACnBpY,EAAUrd,EAAMqd,QAAQ9M,gBACxB,MACJ,KAAK0d,EAAUwC,QAAQoF,QACnB,MACJ,KAAK5H,EAAUwC,QAAQ2I,GACnB/b,EAAUrd,EAAMqd,QAAQ9M,gBACxB,MACJ,KAAK0d,EAAUwC,QAAQqC,OACnB,MACJ,KAAK7E,EAAUwC,QAAQkB,QACnBtU,EAAUrd,EAAMqd,QAAQ9M,gBACxB,MACJ,KAAK0d,EAAUwC,QAAQ8I,MACnB,MACJ,KAAKtL,EAAUwC,QAAQ+I,YACnBnc,EAAUrd,EAAMqd,QAAQ9M,gBACxB,MACJ,KAAK0d,EAAUwC,QAAQgJ,SAEvB,KAAKxL,EAAUwC,QAAQiJ,KAEvB,KAAKzL,EAAUwC,QAAQkJ,KAEvB,KAAK1L,EAAUwC,QAAQljB,OACnB,MACJ,QAEI,MADAI,EAAQ6B,MAAMY,YAAYpQ,GACpB,IAAI0N,EAAgBu4B,mBAAmB,0BAErDe,EAAOC,cAAc5pB,EAAQ/d,QAC7B0nC,EAAOC,cAActB,EAAkBtoB,IACvC2pB,EAAOI,WAAW/pB,IAG1B/V,EAAQ61B,QAAUA,EAClB71B,EAAQ+/B,qCAAuC15B,EAAQ23B,kBAAkB,qCAAuCrnC,GAAYA,GAC5H,MAAMqpC,EAAyB55B,EAAgB65B,SAASC,eACpD95B,EAAgB65B,SAASE,kBAAkBngC,EAAQm+B,gBACnD/3B,EAAgB65B,SAASC,eACzB95B,EAAgB65B,SAASC,eAC7B,MAAM9T,UAAyB8R,EAASkC,UACpC,YAAYthC,GACR+lB,MAAM,CAAEwb,oBAAoB,IAC5B5iC,KAAKqB,QAAUA,EACfrB,KAAK23B,cAAgBjC,EAAO1R,KAAK,IAErC,WAAW6e,EAAOC,EAAUC,GACxB,GAAqB,iBAAVF,EACP,MAAM,IAAItgC,EAAQ+/B,qCAAqC,2FAA2FO,KAEtJ,GAAiB,WAAbC,EACA,MAAM,IAAIvgC,EAAQ+/B,qCAAqC,kEAAkEQ,KAE7H9iC,KAAK23B,cAAgBjC,EAAO36B,OAAO,CAACiF,KAAK23B,cAAekL,IACxD,IACI,MAAM,gBAAEG,EAAe,gBAAEC,GAAoBjjC,KAAKkjC,cAAc,IAAIvgC,EAAYq/B,aAAahiC,KAAK23B,gBAClG33B,KAAK23B,cAAgBqL,EACrBC,EAAgBjnB,QAAS9iB,GAAY8G,KAAKrC,KAAKzE,IAC/C6pC,OAAS5iC,GAEb,MAAOqD,GACHu/B,EAASv/B,IAGjB,cAAcw9B,GACV,GAAIA,EAAOmC,UAAYZ,EACnB,MAAO,CAAES,gBAAiBhC,EAAOgC,gBAAiBC,gBAAiB,IAEvE,MAAM,OAAE1oC,GAAWwmC,EAAyB,CACxC1/B,QAASrB,KAAKqB,QACd2/B,OAAQA,EAAOoC,UAEnB,GAAIpC,EAAOmC,UAAYZ,EAAyBhoC,EAC5C,MAAO,CAAEyoC,gBAAiBhC,EAAOgC,gBAAiBC,gBAAiB,IAEvE,MAAM/pC,EAAUk/B,EAAQ2J,oBAAoB,CACxC1gC,QAASrB,KAAKqB,QACd2/B,YAEE,gBAAEgC,EAAe,gBAAEC,GAAoBjjC,KAAKkjC,cAAclC,GAEhE,OADAiC,EAAgBtlC,KAAKzE,GACd,CAAE8pC,kBAAiBC,oBAGlC1gC,EAAQosB,iBAAmBA,I,2DCzR3Bv1B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtB0gC,EAAmB,EAAQ,KAqBjC9gC,EAAQuzB,YApBR,MACI,aAAY,UAAEhB,IACV90B,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAK80B,UAAYA,EAErB,2BAA2Bj1B,GACvB,MAAM,OAAEmhC,GAAWnhC,EAEnB,OAAO,IAAIG,KAAK,CAAE80B,UADAkM,EAAOsC,UAAU,IAAMD,EAAiBxV,eAAekU,oBAAoBliC,MAGjG,uBAAuBA,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAOsB,WAAWvjC,KAAK80B,UAAYj0B,GAAYA,EAAQ0gC,kBAAkBU,O,kCCrBjF7oC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IAoB5BJ,EAAQs/B,iBAnBR,MACI,aAAY,KAAE9lC,IACViE,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAKjE,KAAOA,EAEhB,4BAA2B,OAAEilC,IAEzB,OAAO,IAAIhhC,KAAK,CAAEjE,KADLilC,EAAOwC,eAAe,OAGvC,uBAAuB3jC,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAOwB,gBAAgBzjC,KAAKjE,S,kCCnBpC3C,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IA6B5BJ,EAAQu/B,kBA5BR,MACI,aAAY,OAAEt3B,EAAM,EAAE+qB,EAAC,MAAEC,IACrBx1B,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAKwK,OAASA,EACdxK,KAAKu1B,EAAIA,EACTv1B,KAAKw1B,MAAQA,EAEjB,4BAA2B,OAAEwL,IACzB,MAAMx2B,EAASw2B,EAAOwC,eAAe,MAC/BjO,EAAIyL,EAAO0C,YACXlO,EAAQwL,EAAOC,eACrB,GAAI1L,EAAI,GACJ,MAAM,IAAI5sB,EAAgBu4B,mBAAmB,sEAAuE3L,KAExH,OAAO,IAAIv1B,KAAK,CAAEwK,SAAQ+qB,IAAGC,UAEjC,uBAAuB31B,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAOwB,gBAAgBzjC,KAAKwK,QAC5By3B,EAAO0B,WAAW3jC,KAAKu1B,GACvB0M,EAAOC,cAAcliC,KAAKw1B,U,kCC5BlCp8B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IAyB5BJ,EAAQqpB,iBAxBR,MACI,aAAY,UAAEC,EAAS,SAAE6K,EAAW/tB,EAAgB9F,OAAO+zB,eACvD52B,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAK6rB,UAAYA,EACjB7rB,KAAK02B,SAAWA,EAEpB,4BAA2B,OAAEsK,IAGzB,OAAO,IAAIhhC,KAAK,CAAE6rB,UAFAmV,EAAOsC,UAAU,IAAMtC,EAAO4C,eAEnBlN,SADZsK,EAAO4C,gBAG5B,uBAAuB/jC,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAOsB,WAAWvjC,KAAK6rB,UAAY5wB,IAC/BgnC,EAAO4B,aAAa5oC,KAExBgnC,EAAO4B,aAAa7jC,KAAK02B,a,kCCxBjCt9B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IAqB5BJ,EAAQ6zB,eApBR,MACI,aAAY,QAAEnE,IACVjyB,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAKiyB,QAAUA,EAEnB,2BAA2BpyB,GACvB,MAAM,OAAEmhC,GAAWnhC,EAEnB,OAAO,IAAIG,KAAK,CAAEiyB,QADF+O,EAAOsC,UAAU,IAAM3gC,EAAYuB,OAAO69B,oBAAoBliC,MAGlF,uBAAuBA,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAOsB,WAAWvjC,KAAKiyB,QAAUluB,GAAWA,EAAOw9B,kBAAkBU,O,kCCpB7E7oC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBmhC,EAAkB,EAAQ,KAyBhCvhC,EAAQouB,WAxBR,MACI,aAAY,KAAEv2B,EAAI,OAAEy2B,IAChB7wB,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAK5F,KAAOA,EACZ4F,KAAK6wB,OAASA,EAElB,4BAA2B,OAAEmQ,IAGzB,OAAO,IAAIhhC,KAAK,CAAE5F,KAFL0pC,EAAgBC,oBAAoB/C,EAAO0C,aAEhC7S,OADTmQ,EAAOsC,UAAU,IAAMtC,EAAO4C,iBAGjD,uBAAuB/jC,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAO0B,WAAW3jC,KAAK5F,MACvB6nC,EAAOsB,WAAWvjC,KAAK6wB,OAAS51B,IAC5BgnC,EAAO4B,aAAa5oC,Q,kCCxBhC7B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IAC5B,MAAMm1B,UAA2Bn1B,EAAYqhC,UACzC,aAAY,QAAEpX,EAAO,aAAE5M,EAAY,WAAE+X,EAAU,UAAE5d,EAAS,MAAE/P,EAAK,cAAE4tB,EAAa,cAAEC,EAAa,OAAEpf,EAAM,iBAAEqf,EAAgB,OAAErH,EAAM,MAAEsF,IAC/H/O,MAAM,CACFwF,UACA5M,eACA+X,aACA5d,YACA/P,QACA4tB,gBACAC,gBACApf,WAEJ7Y,KAAKk4B,iBAAmBA,EACxBl4B,KAAK6wB,OAASA,EACd7wB,KAAKm2B,MAAQA,EACbn2B,KAAKikC,+BAAiCthC,EAAY8H,MAAMy5B,KAAK,IAAM9c,MAAMmD,KACrE5hB,EAAgB65B,SAASC,eACzB95B,EAAgB65B,SAAS2B,YAAYnkC,KAAK6wB,OAAQ,IAAMloB,EAAgB65B,SAAS4B,eACjFz7B,EAAgB65B,SAAS6B,iBAAiBrkC,KAAKm2B,QAEvD,2BAA2Bt2B,GACvB,MAAM,OAAEmhC,GAAWnhC,EACb+E,EAAYwiB,MAAMkd,6BAA6BzkC,GAC/Cq4B,EAAmB8I,EAAOuD,cAAc5hC,EAAY8H,MAAM+5B,eAAerF,WACzEtO,EAASmQ,EAAOsC,UAAU,IAAMtC,EAAO4C,eACvCzN,EAAQ6K,EAAOwC,iBACrB,OAAO,IAAIxjC,KAAK,CACZ4sB,QAAShoB,EAAUgoB,QACnB5M,aAAcpb,EAAUob,aACxB+X,WAAYnzB,EAAUmzB,WACtB5d,UAAWvV,EAAUuV,UACrB/P,MAAOxF,EAAUwF,MACjB4tB,cAAepzB,EAAUozB,cACzBC,cAAerzB,EAAUqzB,cACzBpf,OAAQjU,EAAUiU,OAClBqf,mBACArH,SACAsF,UAGR,uBAAuBt2B,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,WACI,OAAOjE,KAAKikC,iCAEhB,kBAAkBhC,GACd7a,MAAMma,kBAAkBU,GACxBA,EAAOwC,eAAezkC,KAAKk4B,kBAC3B+J,EAAOsB,WAAWvjC,KAAK6wB,OAASztB,IAC5B6+B,EAAO4B,aAAazgC,KAExB6+B,EAAOwB,gBAAgBzjC,KAAKm2B,QAGpC5zB,EAAQu1B,mBAAqBA,G,kCC7D7B1+B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBkL,EAAU,EAAQ,IACxBtL,EAAQyqB,SAAW,CACfC,aAAc,IAAIpf,EAAQoF,GAAG,IAmDjC1Q,EAAQsqB,eAjDR,MACI,aAAY,gBAAEC,EAAe,SAAEC,EAAQ,UAAE5S,EAAS,KAAEgT,EAAI,MAAEE,EAAK,UAAEC,EAAS,YAAEzb,EAAW,MAAEma,IACrFhsB,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAK8sB,gBAAkBA,EACvB9sB,KAAK+sB,SAAWA,EAChB/sB,KAAKma,UAAYA,EACjBna,KAAKmtB,KAAOA,EACZntB,KAAKqtB,MAAQA,EACbrtB,KAAKstB,UAAYA,EACjBttB,KAAK6R,YAAcA,EACnB7R,KAAKgsB,MAAQA,EAEjB,4BAA2B,OAAEgV,IASzB,OAAO,IAAIhhC,KAAK,CACZ8sB,gBAToBkU,EAAOC,eAU3BlU,SATaiU,EAAO0D,eAUpBvqB,UATc6mB,EAAOC,eAUrB9T,KATS6T,EAAO2D,eAUhBtX,MATU2T,EAAOC,eAUjB3T,UATc0T,EAAO4D,cAAc,MAUnC/yB,YATgBmvB,EAAOC,eAUvBjV,MATUgV,EAAO6D,gBAYzB,uBAAuBhlC,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,kBAAkBg+B,GACdA,EAAOC,cAAcliC,KAAK8sB,iBAC1BmV,EAAO6C,cAAc9kC,KAAK+sB,UAC1BkV,EAAOC,cAAcliC,KAAKma,WAC1B8nB,EAAO8C,cAAc/kC,KAAKmtB,MAC1B8U,EAAOC,cAAcliC,KAAKqtB,OAC1B4U,EAAO+C,eAAehlC,KAAKstB,WAC3B2U,EAAOC,cAAcliC,KAAK6R,aAC1BowB,EAAOgD,aAAajlC,KAAKgsB,U,kCCpDjC,kCAAM,MAAOkZ,EAAb,cACkB,KAAA5V,eAAkE,GAC3E,kBAAkB6V,IAGlB,SAGA,QAGA,MAAMC,IAGN,qBAAqBC,IAGrB,YAAYA,O,kCClBrBjsC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtC,EAAQ,IAChBqhB,aAAa,EAAQ,MAAoB/Z,I,mCCHjD,YACAnJ,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BgF,EAAkB,EAAQ,KAC1BC,EAAW,EAAQ,KACnBjL,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClBiD,EAAc,EAAQ,IACtBsC,EAASP,EAASQ,YAAYR,EAASS,WAAY,CAAEC,UAAW,gBACtE,MAAMg3B,EACF,YAAYv5B,EAAM7S,GACd8G,KAAK+L,KAAOA,EACZ/L,KAAK9G,QAAUA,GAGvBqJ,EAAQ+iC,aAAeA,EACvB,MAAMC,EAAc,CAChBC,gBAAiB,kBACjBC,cAAe,gBACfC,iBAAkB,mBAClBC,SAAU,WACVC,cAAe,gBACfC,aAAc,eACdC,eAAgB,iBAChBC,mBAAoB,qBACpBC,iBAAkB,mBAClBC,cAAe,gBACfC,kBAAmB,oBACnBC,WAAY,aACZC,SAAU,WACVC,OAAQ,SACRC,eAAgB,iBAChBC,aAAc,eACdC,mBAAoB,qBACpBC,YAAa,cACbC,gBAAiB,kBACjBC,SAAU,WACVC,iBAAkB,mBAClBC,UAAW,YACXC,eAAgB,iBAChBC,cAAe,gBACfC,eAAgB,iBAChBC,sBAAuB,wBACvBC,kBAAmB,oBACnBC,cAAe,gBACfC,mBAAoB,qBACpBC,gBAAiB,kBACjBC,eAAgB,iBAChBC,YAAa,cACbC,kBAAmB,oBACnBC,kBAAmB,oBACnBxlC,MAAO,QACPylC,iBAAkB,mBAClBC,aAAc,eACdC,QAAS,UACTC,QAAS,WAEPC,EAASl/B,EAAQ0gB,WAAW1gB,EAAQkR,OAAOiuB,YAC3CC,EAAmBr6B,EAAgBa,YAAYO,oBAAoB,mBAAoBpB,EAAgBe,YAAYM,IACnHi5B,EAAgBt6B,EAAgBa,YAAYC,mBAAmB,mBAAoBd,EAAgBe,YAAYC,MAC/Gu5B,EAA4Bv6B,EAAgBa,YAAYY,WAAW,4CAA6C44B,EAAkBr6B,EAAgB0B,gBAAgBC,aAAc,CAACw4B,GAAS,oCAAqC,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAM,KAAM,IAAM,MACtRn6B,EAAgBa,YAAYe,aAAa24B,GACzC,MAAMC,EAAgCx6B,EAAgBa,YAAYY,WAAW,+CAAgD64B,EAAet6B,EAAgB0B,gBAAgBI,MAAO,CAACq4B,GAAS,kCAC7Ln6B,EAAgBa,YAAYe,aAAa44B,GACzC,MAAMC,EAAwBC,IAC1B,MAYMC,EAAsBntC,MAAOotC,IAC/B,MAAM9uB,EAAY7Q,EAAQ6B,MAAMyP,aAChC,IAAIsuB,EAAS,GACTxW,EAASuT,EAAYqC,QACzB,IACI,IAAIa,EACJ,IACIA,EAnBY,CAACA,IACrB,QAAgBtoC,IAAZsoC,GACmB,iBAAZA,GACa,QAApBA,EAAQpW,cACWlyB,IAAnBsoC,EAAQzW,QACkB,iBAAnByW,EAAQzW,cACK7xB,IAAnBsoC,EAAQnW,QAAwBoW,MAAMC,QAAQF,EAAQnW,SAAqC,iBAAnBmW,EAAQnW,eACjEnyB,IAAfsoC,EAAQ9sC,IAA0C,iBAAf8sC,EAAQ9sC,IAAyC,iBAAf8sC,EAAQ9sC,IAC9E,OAAO8sC,EAEX,MAAM,IAAInD,GAAc,MAAO,oBASbsD,CAAgBL,GAE9B,aACoBpoC,IAAZsoC,IACGzW,UAAWyW,GAEY,iBAAdF,KACTvW,UAAWuW,QAEUpoC,IAAxBolC,EAAYvT,KACZA,EAASuT,EAAYsC,SAEzBW,EAAS,CAAE,CAAC5/B,EAAQkR,OAAOiuB,YAAa/V,GAE5C,MAAMn2B,EAAUwsC,EAASI,EAAQzW,QACjC,QAAgB7xB,IAAZtE,EACA,MAAM,IAAIypC,GAAc,MAAO,oBAEnC,MAAM,OAAEhT,GAAWmW,EACnB,IAAII,EAEAA,OADW1oC,IAAXmyB,EACgB,GAEXoW,MAAMC,QAAQrW,GACHA,EAGA,CAACA,GAErB,MAAMjvB,QAAexH,EAAQgtC,GAQ7B,OAPA16B,EAAOwC,MAAMvX,OAAOC,OAAO,CAAEoF,KAAM,iCAAmC+pC,IACtE76B,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAASuxB,EACT/sC,MAAO2N,EAAQ6B,MAAMyP,aAAeT,KAGrC,CACH4Y,QAAS,MACThvB,SACA1H,QAAmBwE,IAAfsoC,EAAQ9sC,QAAmBwE,EAAYsoC,EAAQ9sC,IAG3D,MAAOse,GACH9L,EAAO3K,MAAMpK,OAAOC,OAAOD,OAAOC,OAAO,CAAEoF,KAAM,iCAAmC+pC,GAAS,CAAEvuB,SAC/F,MAAM6uB,EAAO,IAAIn7B,EAAgBo7B,OAQjC,MAPAD,EAAK9tC,IAAI8sC,EAAQ,CAAE7sC,MAAO+2B,IAC1BrkB,EAAgBa,YAAYgI,OAAO,CAC/B,CACIC,QAASwxB,EACThtC,MAAO,IAEZ6tC,GACG7uB,IASR+uB,EAAoB7tC,MAAOqtC,EAAQC,KACrC,IACI,IAAIplC,EACJ,IACIA,OAVUlI,OAAOstC,GACrBC,MAAMC,QAAQF,GACP7tC,QAAQmW,IAAI03B,EAAQntC,IAAIH,MAAO8tC,GAAiBX,EAAoBW,KAExEX,EAAoBG,GAMJS,CAAcT,GAC7Bt6B,EAAOwC,MAAMvX,OAAOC,OAAO,CAAEoF,KAAM,0BAA4B+pC,IAEnE,MAAOvuB,GAEH,MADA9L,EAAO3K,MAAMpK,OAAOC,OAAOD,OAAOC,OAAO,CAAEoF,KAAM,0BAA4B+pC,GAAS,CAAEvuB,SAClFA,EAEV,OAAO5W,EAEX,MAAOG,GACH,IAAI2lC,EAAgB,CAChBp9B,MAAO,MACP7S,aAA2BiH,IAAlBqD,EAAMtK,QAAwB,iBAAmBsK,EAAMtK,SAQpE,YANmBiH,IAAfqD,EAAMuI,WACY5L,IAAlBqD,EAAMtK,SACgB,iBAAfsK,EAAMuI,MACY,iBAAlBvI,EAAMtK,UACbiwC,EAAgB,CAAEp9B,KAAMvI,EAAMuI,KAAM7S,QAASsK,EAAMtK,UAEhD,CACHm5B,QAAS,MACT7uB,MAAO2lC,EACPxtC,QAAIwE,KAIhB,OAAOhF,MAAOstC,GAAYO,EAAkB,CAAE,CAACpgC,EAAQkR,OAAOsvB,UAAW,WAAaX,IAEpFY,EAAyBpuC,IAAU,CACrC4oB,WAAY5oB,EAAM4W,YAClB0P,UAAW5Y,EAAgB2gC,WAAWzF,aAAa5oC,EAAMsmB,WACzDM,iBAAkB5mB,EAAMmP,MACxBoX,YAAa7Y,EAAgB2gC,WAAWC,YAAYtuC,EAAMumB,eAE9Djf,EAAQinC,cAAgB,EAAGjoC,aAAYO,OAAMI,yBAAwBF,yBACjE,MAAMynC,EAAeC,IACjB,GAAIA,EAAS,GAAKA,EAASnoC,EAAWmV,kBAClC,MAAM,IAAI4uB,GAAc,IAAK,mBAwVrC,OAAO8C,EArVU,CACb,CAAC7C,EAAYC,iBAAkBrqC,MAAOC,IAClC,MAAMgI,EAAOuF,EAAgBgK,OAAOg3B,oBAAoB,CACpD1yB,eAAgB1V,EAAWX,SAASqW,eACpCpW,QAASzF,EAAK,KAElB,IAAIoK,QAAgBjE,EAAWiE,QAAQnB,OAAO,CAAEjB,SAIhD,YAHgBjD,IAAZqF,IACAA,EAAU,IAAI7C,EAAYmD,QAAQ,CAAE1C,UAEjCoC,EAAQokC,cAAcroC,EAAWyV,uBAE5C,CAACuuB,EAAYE,eAAgBtqC,MAAOC,IAChC,MAAM0L,QAAcvF,EAAWuF,MAAMzC,OAAO,CACxCjB,KAAMuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,MAEtD,QAAc+E,IAAV2G,EACA,MAAM,IAAIw+B,GAAc,IAAK,iBAEjC,OAAOx+B,EAAM8iC,cAAcroC,EAAWyV,uBAE1C,CAACuuB,EAAYG,kBAAmBvqC,SAAYwN,EAAgB2gC,WAAWzF,aAAatiC,EAAW0U,aAAa7S,MAC5G,CAACmiC,EAAYI,UAAWxqC,MAAOC,IAC3B,IAIIyuC,EAJA1mC,EAAc/H,EAAK,GACA,iBAAZA,EAAK,KACZ+H,EAAcwF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,UAG9C+E,IAAZ/E,EAAK,IAAuC,iBAAZA,EAAK,IAA+B,IAAZA,EAAK,GAC7DyuC,EAAiBzuC,EAAK,QAEL+E,IAAZ/E,EAAK,IAAuC,iBAAZA,EAAK,KAC1CyuC,EAAiBzuC,EAAK,IAE1B,IAAIyJ,QAActD,EAAWsD,MAAMR,OAAO,CAAElB,gBAC5C,QAAchD,IAAV0E,EAAqB,CACrB,QAAuB1E,IAAnB0pC,EACA,MAAM,IAAIvE,GAAc,IAAK,iBAEjC,IACIzgC,QAActD,EAAWuoC,OACpBx9B,KAAKT,EAAYrB,OAAQvP,GAAUA,EAAM0c,UAAYvc,EAAK,IAAMH,EAAMmP,QAAUhP,EAAK,IAAKyQ,EAAY0gB,KAAK,GAAI1gB,EAAYk+B,QAAQ,IAAIrwB,KAAKA,KAAKC,MAAQkwB,KACzJz0B,YAET,MAAOuc,GACH,MAAM,IAAI2T,GAAc,IAAK,kBAGrC,OAAgB,IAAZlqC,EAAK,IAA2B,IAAZA,EAAK,GAClByJ,EAAM+kC,cAAcroC,EAAWyV,sBAEnCnS,EAAM2G,gBAAgBjB,SAAS,QAE1C,CAACg7B,EAAYK,eAAgBzqC,SAAYoG,EAAWmV,kBAAoB,EACxE,CAAC6uB,EAAYM,cAAe1qC,MAAOC,IAC/B,MAAMsuC,EAAStuC,EAAK,GACpBquC,EAAYC,GACZ,MAAM7kC,QAActD,EAAWsD,MAAM/G,IAAI,CAAEqF,YAAaumC,IACxD,OAAO/gC,EAAgB2gC,WAAWzF,aAAah/B,EAAMzB,OAEzD,CAACmiC,EAAYO,gBAAiB3qC,MAAOC,IACjC,MAAMsuC,EAAStuC,EAAK,GACpBquC,EAAYC,GACZ,MAAM3lC,QAAexC,EAAWwC,OAAOjG,IAAI,CAAEqF,YAAaumC,IAI1D,aAHwBnoC,EAAW+D,UAAUxH,IAAI,CAC7CsF,KAAMW,EAAOX,QAEA8O,UAAU3H,SAAS,KAExC,CAACg7B,EAAYQ,oBAAqB5qC,SAAY2G,EAAKwtB,eAAe/0B,OAClE,CAACgrC,EAAYS,kBAAmB7qC,MAAOC,IACnC,MAAMgI,EAAOuF,EAAgB2gC,WAAWU,YAAY5uC,EAAK,IACnD8L,QAAiB3F,EAAW2F,SAAS7C,OAAO,CAAEjB,SACpD,QAAiBjD,IAAb+G,EACA,MAAM,IAAIo+B,GAAc,IAAK,oBAEjC,OAAOp+B,EAAS0iC,cAAcroC,EAAWyV,uBAE7C,CAACuuB,EAAYU,eAAgB9qC,SAAY/B,OAAOuc,OAAO7T,EAAK2W,SAASnd,IAAK4J,GAAgByD,EAAgB2gC,WAAWzF,aAAa3+B,EAAY9B,OAC9I,CAACmiC,EAAYW,mBAAoB/qC,MAAOC,IACpC,MAAMgI,EAAOuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,IACzD,IAAI8J,EAAcpD,EAAK2W,QAAQ9P,EAAgB9F,OAAOma,aAAa5Z,IAInE,QAHoBjD,IAAhB+E,IACAA,QAAoB3D,EAAW2D,YAAYb,OAAO,CAAEjB,eAEpCjD,IAAhB+E,EACA,MAAM,IAAIogC,GAAc,IAAK,uBAEjC,OAAgB,IAAZlqC,EAAK,IAA2B,IAAZA,EAAK,GAClB8J,EAAY0kC,cAAcroC,EAAWyV,sBAEzC9R,EAAYsG,gBAAgBjB,SAAS,QAEhD,CAACg7B,EAAYY,YAAahrC,MAAOC,IAC7B,MAAMgI,EAAOuF,EAAgB2gC,WAAWU,YAAY5uC,EAAK,IACnD2B,EAAM24B,EAAO1R,KAAK5oB,EAAK,GAAI,OAC3BqhC,QAAal7B,EAAW6F,YAAY/C,OAAO,CAAEjB,OAAMrG,QACzD,YAAgBoD,IAATs8B,OAAqBt8B,EAAYs8B,EAAKxhC,MAAMsP,SAAS,QAEhE,CAACg7B,EAAYa,UAAWjrC,MAAOC,IAC3B,MAAMgI,EAAOuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,IACnDgP,EAAQhP,EAAK,IACZgK,EAAQ0L,SAAoBlW,QAAQmW,IAAI,CAC3CxP,EAAW6D,OAAOf,OAAO,CAAEjB,OAAMgH,UACjC7I,EAAWyF,gBAAgB3C,OAAO,CAAEjB,WAExC,QAAmBjD,IAAf2Q,QAA6D3Q,IAAjC2Q,EAAWiF,WAAW3L,GAGtD,YAAkBjK,IAAXiF,OAAuBjF,EAAYiF,EAAOwkC,cAAcroC,EAAWyV,qBAAsB5M,IAEpG,CAACm7B,EAAYc,QAASlrC,UAClB,MAAM,IAAImqC,GAAc,IAAK,oBAEjC,CAACC,EAAYe,gBAAiBnrC,UAC1B,MAAM,IAAImqC,GAAc,IAAK,oBAEjC,CAACC,EAAYgB,cAAeprC,MAAOC,IAC/B,MAAMyd,EAASlQ,EAAgB2gC,WAAWW,WAAW7uC,EAAK,IACpD8uC,QAAgB3oC,EAAW4oC,aAAatxB,GAC9C,MAAO,CACHxV,OAAQ6mC,EAAQ7mC,OAAOumC,cAAcroC,EAAWyV,sBAChD7C,QAAS+1B,EAAQ/1B,QAAQ7Y,IAAKoL,GAAWA,EAAOkjC,cAAcroC,EAAWyV,yBAGjF,CAACuuB,EAAYiB,oBAAqBrrC,MAAOC,IACrC,MAAM8J,EAAcvC,EAAYwC,2BAA2B,CACvD9D,QAASE,EAAWoV,uBACpB1S,OAAQ0E,EAAgB2gC,WAAWW,WAAW7uC,EAAK,MAEvD,IAEI,aADM0G,EAAKy0B,iBAAiBrxB,EAAa,CAAE4qB,kBAAkB,EAAMC,UAAU,KACtE,EAEX,MAAO4B,GACH,OAAO,IAGf,CAAC4T,EAAYkB,aAActrC,UACvB,MAAM,IAAImqC,GAAc,IAAK,oBAEjC,CAACC,EAAYmB,iBAAkBvrC,MAAOC,IAClC,IAAI0Y,EACJ,IACIA,EAAanL,EAAgBgK,OAAOg3B,oBAAoB,CACpD1yB,eAAgB1V,EAAWX,SAASqW,eACpCpW,QAASzF,EAAK,KAGtB,MAAOu2B,IAEP,MAAO,CAAE9wB,QAASzF,EAAK,GAAIgvC,aAAwBjqC,IAAf2T,IAExC,CAACyxB,EAAYoB,UAAWxrC,UAAY,CAChCw3B,UAAW7wB,EAAKwtB,eAAeh0B,IAAK/B,IAChC,MAAM,KAAEo0B,EAAI,KAAER,GAASxqB,EAAYirB,kBAAkBr0B,GACrD,MAAO,CAAEsH,QAAS8sB,EAAMR,YAGhC,CAACoY,EAAYqB,kBAAmBzrC,MAAOC,IACnC,MAAM8J,EAAcvC,EAAYwC,2BAA2B,CACvD9D,QAASE,EAAWoV,uBACpB1S,OAAQ0E,EAAgB2gC,WAAWW,WAAW7uC,EAAK,MAEvD,IACI,MAAOivC,EAAiBhnC,SAAgBzI,QAAQmW,IAAI,CAChD7L,EAAY0kC,cAAcroC,EAAWyV,sBACrClV,EAAKy0B,iBAAiBrxB,EAAa,CAAE6qB,UAAU,EAAMD,kBAAkB,MAErEwa,OAAqCnqC,IAAxBkD,EAAOgtB,aACpB,GACA,CACEA,aAAc,CACV3X,cAAerV,EAAOgtB,aAAa3X,cAAcpd,IAAKgX,IAAiB,CACnElP,KAAMuF,EAAgB2gC,WAAWiB,aAAaj4B,EAAalP,MAC3DiP,QAASC,EAAaD,QAAQu3B,cAAcroC,EAAWyV,sBACvD7C,QAAS7B,EAAa6B,QAAQ7Y,IAAKoL,GAAWA,EAAOkjC,cAAcroC,EAAWyV,uBAC9ExC,eAAgBlC,EAAakC,oBAI7C,OAAOpb,OAAOC,OAAOD,OAAOC,OAAO,GAAIixC,GAAa,CAAEplC,YAAamlC,IAEvE,MAAO7mC,GACH,MAAM,IAAI8hC,GAAc,IAAK,6BAA6B9hC,EAAMtK,aAGxE,CAACqsC,EAAYsB,WAAY1rC,MAAOC,IAC5B,MAAMgI,EAAOuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,IACnDgP,EAAQhP,EAAK,GACbgK,QAAe7D,EAAW6D,OAAOf,OAAO,CAAEjB,OAAMgH,UACtD,QAAejK,IAAXiF,EACA,MAAM,IAAIkgC,GAAc,IAAK,kBAEjC,OAAOlgC,EAAOwkC,cAAcroC,EAAWyV,qBAAsB5M,IAEjE,CAACm7B,EAAYuB,gBAAiB3rC,MAAOC,IACjC,MAAMgI,EAAOuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,IACnDgP,EAAQhP,EAAK,GACnB,IACI,MAAMH,QAAcsG,EAAWqP,qBAAqB,CAChD,IAAIjO,EAAYujB,MAAM,CAClB9iB,OACAgH,YAGR,OAAOzB,EAAgB9F,OAAO2nC,gBAAgBvvC,GAAOsP,WAEzD,MAAO/G,GACH,MAAM,IAAI8hC,GAAc,IAAK9hC,EAAMtK,WAG3C,CAACqsC,EAAYwB,eAAgB5rC,MAAOC,IAChC,MAAMgI,EAAOuF,EAAgB2gC,WAAWU,YAAY5uC,EAAK,IAKzD,aAJoBmG,EAAW6F,YAC1BqF,QAAQ,CAAErJ,SACVkJ,KAAKT,EAAYsJ,WACjBC,aACQ9Z,IAAKmhC,GAASA,EAAKmN,cAAcroC,EAAWyV,wBAE7D,CAACuuB,EAAYyB,gBAAiB7rC,MAAOC,IACjC,MAAM8J,EAAcvC,EAAYwC,2BAA2B,CACvD9D,QAASE,EAAWoV,uBACpB1S,OAAQ0E,EAAgB2gC,WAAWW,WAAW7uC,EAAK,MAEvD,GAAI8J,aAAuBvC,EAAYmW,sBAAuB,CAC1D,MAAMoxB,QAAgB3oC,EAAWyX,kBAAkB9T,GACnD,MAAO,CACH7B,OAAQ6mC,EAAQ7mC,OAAOumC,cAAcroC,EAAWyV,sBAChD7C,QAAS+1B,EAAQ/1B,QAAQ7Y,IAAKoL,GAAWA,EAAOkjC,cAAcroC,EAAWyV,wBAGjF,MAAM,IAAIsuB,GAAc,IAAK,kCAEjC,CAACC,EAAY0B,uBAAwB9rC,MAAOC,IACxC,MAAM4L,QAAwBzF,EAAWyF,gBAAgB3C,OAAO,CAC5DjB,KAAMuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,MAEtD,IAAIyuC,EAIAxmC,EACJ,QAJgBlD,IAAZ/E,EAAK,IAAuC,iBAAZA,EAAK,KACrCyuC,EAAiBzuC,EAAK,SAGF+E,IAApB6G,EAA+B,CAC/B,QAAuB7G,IAAnB0pC,EACA,MAAM,IAAIvE,GAAc,IAAK,uBAEjC,IACIjiC,QAAe9B,EAAWuoC,OACrBx9B,KAAKT,EAAY4+B,UAAUtvC,UAC5B,MAAMY,QAAawF,EAAWyF,gBAAgB3C,OAAO,CACjDjB,KAAMuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,MAEtD,YAAgB+E,IAATpE,OAAqBoE,EAAYkpC,EAAsBttC,KAC9D8P,EAAYrB,OAAQ0/B,QAAwB/pC,IAAZ+pC,GAAwBr+B,EAAY0gB,KAAK,GAAI1gB,EAAYk+B,QAAQ,IAAIrwB,KAAKA,KAAKC,MAAQkwB,KACtHz0B,YAET,MAAOuc,GACH,MAAM,IAAI2T,GAAc,IAAK,6BAIjCjiC,EAASgmC,EAAsBriC,GAEnC,OAAO3D,GAEX,CAACkiC,EAAY2B,mBAAoB/rC,MAAOC,IACpC,MAAM8J,QAAoB3D,EAAW2D,YAAYpH,IAAI,CACjDsF,KAAMuF,EAAgB2gC,WAAW1F,YAAYxoC,EAAK,MAEhDiI,QAAe6B,EAAY0kC,cAAcroC,EAAWyV,sBAC1D,GAAoB,0BAAhB3T,EAAOjJ,WAA8D+F,IAA1BkD,EAAOuE,eAClD,MAAM,IAAI09B,GAAc,IAAK,iCAEjC,OAAOjiC,EAAOuE,gBAElB,CAAC29B,EAAY4B,eAAgBhsC,gBACAoG,EAAWiG,UAAUgF,KAAKF,KAAKT,EAAYsJ,WAAWC,aAC7D9Z,IAAKkM,GAAcA,EAAUoiC,cAAcroC,EAAWyV,uBAE5E,CAACuuB,EAAY6B,oBAAqBjsC,UAC9B,MAAMuvC,EAAMnpC,EAAWX,SAASkW,KAAKnU,EAAYge,gBAAgBqC,OAEjE,MAAO,CACH2nB,YAFgBhiC,EAAgB9F,OAAO2nC,qBAAwBrqC,IAARuqC,EAAoB/hC,EAAgB8B,MAAM4S,KAAOqtB,GAE/EngC,aAGjC,CAACg7B,EAAY8B,iBAAkBlsC,UAC3B,IAAI2G,EAAKH,UAIL,MAAM,IAAI1I,MAAM,oDAEpB,aALU6I,EAAKH,UAAUipC,mBAKlB,GAEX,CAACrF,EAAY+B,gBAAiBnsC,MAAOC,IACjC,MAAM,SAAEwF,GAAaW,EACfspC,EAAczxC,OAAOC,OAAOD,OAAOC,OAAO,GAAIuH,GAAW,CAAEwB,gBAAiBhH,EAAK,GAAGgH,kBAE1F,OADAb,EAAWY,eAAe0oC,IACnB,GAEX,CAACtF,EAAYgC,aAAcpsC,UAAY,CACnCiH,gBAAiBb,EAAWX,SAASwB,kBAEzC,CAACmjC,EAAYiC,mBAAoBrsC,MAAOC,IACpC,IAAI0G,EAAKH,UAIL,MAAM,IAAI1I,MAAM,+CAEpB,aALU6I,EAAKH,UAAUg4B,kBAAkBv+B,EAAK,KAKzC,GAEX,CAACmqC,EAAYkC,mBAAoBtsC,MAAOC,IACpC,QAAuB+E,IAAnB2B,EAAKH,UAIL,MAAM,IAAI1I,MAAM,+CAEpB,aALU6I,EAAKH,UAAUi4B,kBAAkBx+B,EAAK,KAKzC,GAEX,CAACmqC,EAAYtjC,OAAQ9G,eACMgF,IAAnB2B,EAAKH,kBACCG,EAAKH,UAAU43B,cACfz3B,EAAKH,UAAUM,eAEnBH,EAAKG,cACLV,EAAWU,aACM9B,IAAnB2B,EAAKH,iBACCG,EAAKH,UAAUmpC,UAElB,GAEX,CAACvF,EAAYmC,kBAAmBvsC,SAAY+G,IAC5C,CAACqjC,EAAYoC,cAAexsC,gBAClB6G,KACC,Q,0DChhBnB5I,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBiG,EAAU,EAAQ,IAClB8T,EAAWha,EAAQqL,gBAAgB,EAAQ,KAC3C8uB,EAAY,EAAQ,KA2B1B,SAASkO,GAA0B,QAAE1pC,EAAO,WAAEE,EAAU,iBAAE24B,IACtD,GAAI74B,EAAQi6B,QAAU,EAClB,MAAO,CAAEj6B,WAEb,GAAqB,YAAjBA,EAAQjH,KACR,MAAO,CACHiH,UACAq5B,aAAc7iC,KAAKk9B,IAAI,EAAGxzB,EAAWX,SAASwB,iBAAmB83B,EAAiBhgB,aAAe7Y,EAAQo6B,4BAGjH,MAAM,gBAAEr5B,GAAoBb,EAAWX,SACvC,MAAO,CACHS,UACAq5B,aAAct4B,GAAoBf,EAAQg6B,WAAa,GAvC/D94B,EAAQy9B,aAAe,EAAGl+B,OAAMF,aAAYP,UAASy7B,uBACjD,MAAMxkB,EAAU3V,EAAYi/B,iBAAiB7B,KAAK,IAAIp9B,EAAYqoC,yBAAyB,CACvFpe,QAASvrB,EAAQurB,QACjB5M,aAAc3e,EAAQ2e,aACtB6D,WAAYxiB,EAAQwiB,WACpBkZ,eAAgB17B,EAAQi6B,QACxBwB,qBACAl7B,GACJE,EAAKmpC,sBAAsB3yB,IAE/B/V,EAAQ2oC,qBAAuB,EAAG3pC,aAAYyJ,YAAW2S,aAAY8d,+BACjE,MAAM5X,EAAatiB,EAAW0U,aAAa7L,MAAQ,EAC7CmxB,EAAe1X,EAAalG,EAAWpjB,OACvC+gC,EAAU5e,EAAS1M,QAAQm7B,UAAUxtB,EAAanW,GAAcmB,EAAgB9F,OAAOuoC,aAAa5jC,EAAWwD,IACrH,MAAO,CACH5Q,KAAMmhC,IAAiBD,EAAU,UAAY,SAC7Ctb,aAAcze,EAAW0U,aAAa7S,KACtCygB,aACAwX,WAAY,EACZC,UACAC,eACAC,aAAc9e,EAAS1M,QAAQonB,MAAM,EAAGzZ,EAAWpjB,QAAQe,IAAI,IAAM,GACrEqiB,aACA8d,6BAmBRl5B,EAAQ03B,uBAAyB9+B,OAASoG,aAAYyJ,YAAWkvB,uBAC7D,MAAMvc,QAAmBpc,EAAWkP,cAAc,IAC5CgrB,EAA2Bl6B,EAAW0U,aAAakE,UACnD0J,EAAatiB,EAAW0U,aAAa7L,MAAQ,EAC7CmxB,EAAe1X,EAAalG,EAAWpjB,OACvC+gC,EAAU5e,EAAS1M,QAAQm7B,UAAUxtB,EAAanW,GAAcmB,EAAgB9F,OAAOuoC,aAAa5jC,EAAWwD,IAYrH,OAAO+/B,EAA0B,CAAE1pC,QAXnB,IAAIw7B,EAAUV,eAAe,CACzC/hC,KAAMmhC,IAAiBD,EAAU,UAAY,SAC7Ctb,aAAcze,EAAW0U,aAAa7S,KACtCygB,aACAwX,WAAY,EACZC,UACAC,eACAC,aAAc9e,EAAS1M,QAAQonB,MAAM,EAAGzZ,EAAWpjB,QAAQe,IAAI,IAAM,GACrEqiB,aACA8d,6BAEwCl6B,aAAY24B,sBA6B5D/+B,eAAekjC,GAAgB,KAAEv8B,EAAI,QAAET,IAEnC,GADyBA,EAAQq6B,WAAWlxB,OAAQ6gC,QAAYlrC,IAANkrC,GAAiB9wC,QACnD8G,EAAQiqC,GAC5BjqC,EAAQs6B,kBAAkB78B,MAAOsE,QAAwCjD,IAA/BkB,EAAQqP,aAAatN,IAAsB,CACrF,MAAMmoC,EAA8B,GACpC,IAAK,IAAI1T,EAAI,EAAG2T,EAAI,EAAG3T,EAAIx2B,EAAQsc,WAAWpjB,QAAUixC,EAAInqC,EAAQiqC,EAAGzT,GAAK,EAAG,CAC3E,MAAMrwB,EAAYnG,EAAQsc,WAAWka,GAC/B8F,EAAYt8B,EAAQq6B,WAAW7D,QACnB13B,IAAdw9B,IACA4N,EAA4B5iC,EAAgB9F,OAAO0a,aAAa/V,IAAcm2B,EAC9E6N,GAAK,GAGb,MAAM3yB,EAASlQ,EAAgBgK,OAAO84B,4BAA4BpqC,EAAQiqC,EAAGjqC,EAAQsc,WAAY4tB,EAA6B5oC,EAAY+oC,SACpI7mC,EAAQxD,EAAQ0C,OAAOq/B,MAAM,CAC/B1yB,aAAcrP,EAAQs6B,kBAAkBrgC,IAAK8H,GAAS/B,EAAQqP,aAAatN,IAAOoH,OAAO5B,EAAQ6B,MAAMC,SACvGmO,WAGJ,aADM/W,EAAKkzB,WAAWnwB,GACf,CAAExD,QAASw7B,EAAUd,eAAe16B,IAE/C,MAAO,CAAEA,WAtCbkB,EAAQg7B,oBAAsB,EAAGz7B,OAAMT,QAAS67B,EAAW7B,aAAYnB,uBACnE,GAAImB,GAAc,EACd,MAAM,IAAIpiC,MAAM,qBAEpB,MAAM,WAAEsI,GAAeO,EACvB,IAAIT,EAAU67B,EACV3B,GAAgBl6B,EAAQwiB,WAAawX,GAAch6B,EAAQsc,WAAWpjB,OACtEghC,EAAe,IACfA,GAAgBl6B,EAAQsc,WAAWpjB,QAEvC,MAAMH,EAAOmhC,IAAiBl6B,EAAQi6B,QAAU,UAAY,SAK5D,OAJAj6B,EACa,YAATjH,GAAsBiH,aAAmBw7B,EAAUhB,qBAC7Cx6B,EAAQ+hC,MAAM,CAAEhpC,OAAMmhC,eAAcF,eACpCwB,EAAUX,aAAa76B,EAAS,CAAEjH,OAAMmhC,eAAcF,eACzD0P,EAA0B,CAAExpC,aAAYF,UAAS64B,sBAyB5D33B,EAAQ87B,gBAAkBA,EAC1B97B,EAAQ69B,uBAAyB,EAAGt+B,OAAMF,aAAYP,cAClDkB,EAAQy9B,aAAa,CACjBl+B,OACAF,aACAP,UACAy7B,iBAAkB,IAAIn6B,EAAYgpC,2BAA2B,CACzDtQ,WAAYh6B,EAAQg6B,WACpB8B,cAAe97B,EAAQm6B,aAAan6B,EAAQi6B,cAIxD/4B,EAAQ+6B,kBAAoB,EAAGj8B,UAASg6B,gBAAkBh6B,EAAQg6B,aAAeA,GAAch6B,EAAQm6B,aAAahxB,OAAQ6gC,GAAMA,IAAMhQ,GAAY9gC,QAAU8G,EAAQiqC,EACtK/oC,EAAQ89B,2BAA6B,EAAG9+B,aAAYF,UAASg6B,aAAYnB,uBACrE,MAAM,aAAEqB,EAAY,KAAEnhC,GAhEE,GAAGiH,UAASg6B,iBACpC,IAAIE,GAAgBl6B,EAAQwiB,WAAawX,GAAch6B,EAAQsc,WAAWpjB,OAI1E,OAHIghC,EAAe,IACfA,GAAgBl6B,EAAQsc,WAAWpjB,QAEhC,CACHH,KAAMmhC,IAAiBl6B,EAAQi6B,QAAU,UAAY,SACrDC,iBAyD2BqQ,CAAoB,CAAEvqC,UAASg6B,eAC9D,OAAO0P,EAA0B,CAC7BxpC,aACAF,QAASw7B,EAAUX,aAAa76B,EAAS,CAAEjH,OAAMmhC,eAAcF,eAC/DnB,sBAGR33B,EAAQ49B,sBAAyB9+B,IAC7B,MAAM+7B,EAAsB,IAAI/7B,EAAQm6B,cAExC,OADA4B,EAAoB/7B,EAAQi6B,UAAY,EACjC8B,GAkBX76B,EAAQw7B,eAAiB5iC,OAASkG,QAAS67B,EAAWp7B,OAAMF,aAAYsD,cAAa6S,SAAQmiB,uBACzF,IAAI74B,EAAU67B,EACd,MAAM,WAAE37B,GAAeO,EAEvB,QAAW3B,UADMoB,EAAW2D,YAAYb,OAAO,CAAEjB,KAAM8B,EAAY9B,OAE/D,MAAO,CAAE/B,WAEb,GAAI0W,EAAQ,CACR,IAAI8zB,GAAW,EACf,IACI,MAAM,cAAEnzB,SAAwBnX,EAAWgvB,kBAAkB,CACzDrrB,cACAuT,QAASrf,OAAOuc,OAAOtU,EAAQqP,cAAclG,OAAO5B,EAAQ6B,MAAMC,WAEtEmhC,EAAWnzB,EAAc5Z,MAAM,EAAG0V,yBAAwCrU,IAAnBqU,GAE3D,MAAOmd,GACHka,GAAW,EAEf,IAAKA,EACD,MAAO,CAAExqC,WAGjBA,EAAUA,EAAQ+hC,MAAM,CACpB1yB,aAActX,OAAOC,OAAOD,OAAOC,OAAO,GAAIgI,EAAQqP,cAAe,CAAE,CAACxL,EAAYyS,SAAUzS,MAElG,MAAM4mC,EAAqB1yC,OAAOuc,OAAOtU,EAAQqP,cAAcnW,OAC/D,GAAI8G,EAAQs6B,kBAAkBphC,SAAWuxC,EAAoB,CACzD,MAAMnuB,QAAmBpc,EAAWkP,cAAcrX,OAAOuc,OAAOtU,EAAQqP,cAAclG,OAAO5B,EAAQ6B,MAAMC,UACrGqhC,EAAmBpjC,EAAgBgK,OAAOmtB,oBAAoBniB,GACpE,GAAIhV,EAAgB9F,OAAO6P,aAAaq5B,EAAkB1qC,EAAQ0C,OAAOk0B,eAAgB,CACrF,MAAMyF,EAAoB,IAAIr8B,EAAQq6B,YACtCgC,EAAkBr8B,EAAQi6B,SAAW3yB,EAAgBgK,OAAOotB,KAAK,CAC7D7mC,QAASmI,EAAQ0C,OAAO7K,QACxB0I,eAEJ,MAAMg8B,EAAav8B,EAAQ2qC,mBAAmB,CAAEtQ,WAAYgC,IAU5D,OATAn7B,EAAQy9B,aAAa,CACjBl+B,OACAT,QAASu8B,EACTh8B,aACAk7B,iBAAkB,IAAIn6B,EAAYspC,gCAAgC,CAC9D5Q,WAAYuC,EAAWvC,WACvBsC,UAAW/0B,EAAQ6B,MAAMy1B,WAAWxC,EAAkBE,EAAWtC,cAGlE+C,EAAgB,CAAEv8B,OAAMT,QAASu8B,IAE5C,MAhEwB,GAAGv8B,QAAS67B,EAAWp7B,OAAMF,aAAYs4B,uBACrE,MAAM74B,EAAU67B,EAAUgP,kBAAkB,CACxC1Q,aAAcj5B,EAAQ49B,sBAAsBjD,KAEhD36B,EAAQ69B,uBAAuB,CAAE/+B,UAASS,OAAMF,eAChD,MAAMy5B,EAAah6B,EAAQm6B,aAAan6B,EAAQi6B,SAChD,OAAI/4B,EAAQ+6B,kBAAkB,CAAEj8B,UAASg6B,eAC9B94B,EAAQ89B,2BAA2B,CACtC9+B,WAAYO,EAAKP,WACjBF,UACAg6B,aACAnB,qBAGD,CAAE74B,YAkDE8qC,CAAwB,CAC3B9qC,UACAS,OACAF,aACAs4B,qBAGR,MAAO,CAAE74B,a,iCCvNbjI,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAoChCpG,EAAQ6pC,QAnCR,MACI,aAAY,KAAEhyC,EAAI,aAAE4lB,EAAY,WAAE6D,EAAU,WAAEwX,EAAU,QAAEC,EAAO,aAAEC,EAAY,aAAEC,EAAY,WAAE7d,EAAU,yBAAE8d,IACvGz7B,KAAK4sB,QAAU,EACf5sB,KAAK5F,KAAOA,EACZ4F,KAAKggB,aAAeA,EACpBhgB,KAAK6jB,WAAaA,EAClB7jB,KAAKq7B,WAAaA,EAClBr7B,KAAKs7B,QAAUA,EACft7B,KAAKu7B,aAAeA,EACpBv7B,KAAKw7B,aAAeA,EACpBx7B,KAAK2d,WAAaA,EAClB3d,KAAKy7B,yBAA2BA,EAEpC,QACI,OAAO5jC,KAAKC,MAAMkI,KAAK2d,WAAWpjB,QAAUyF,KAAK2d,WAAWpjB,OAAS,GAAK,GAE9E,kBAAkB8xC,GACd,MAAM,IAAIpzC,MAAM,mBAEpB,SACI,MAAO,CACHqzC,MAAOtsC,KAAKxB,YAAYC,KACxBmuB,QAAS5sB,KAAK4sB,QACdxyB,KAAM4F,KAAK5F,KACX4lB,aAAcrX,EAAgB9F,OAAOsH,gBAAgBnK,KAAKggB,cAC1D6D,WAAY7jB,KAAK6jB,WACjBwX,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAc,IAAIx7B,KAAKw7B,cACvB7d,WAAY3d,KAAK2d,WAAWriB,IAAKkM,GAAcmB,EAAgB9F,OAAO5B,gBAAgBuG,IACtFi0B,yBAA0Bz7B,KAAKy7B,6B,kCClC3C,gEAWA,IAAIx7B,EACJ,MAaMipC,EAAgB/tC,MACpB0E,EACA0sC,EACAxsC,EACAysC,KAEA,MAAM1qC,OAnBM3G,OAAO0E,EAA0B0sC,EAAgCxsC,KAC7E,QAAqBI,IAAjBF,EAA4B,CAC9B,MAAM6B,EAAO,IAAI,IACfjC,EACA,IAAI,kBAAgB,IAAI,qBAAmB,CAAEqrB,QAAS,YAAUuhB,mBAAoB5a,OAAQ0a,KAC5FxsC,GAEFE,EAAe6B,EAAKjD,QAAQnE,KAAK,IAAMoH,GAGzC,OAAO7B,GASYpB,CAAMgB,EAAS0sC,EAAUxsC,IACtC,eAAE8pC,EAAF,OAAkBvX,EAAS,IAAOka,EAExC,OAAO1qC,EAAKonC,cAAc,CACxB7W,QAAS,MACT12B,GAAI,EACJq2B,OAAQwa,EAAIxa,OACZM,YAA2BnyB,IAAnB0pC,EAA+BvX,EAASA,EAAOv3B,OAAO,CAAC8uC,OAS7D,MAAO6C,UAA6B,kBACxC,YAAoC7sC,GAClCunB,QADkC,KAAAvnB,UAI7B,cAAc2sC,GAEnB,MAAM3sC,QAAgBG,KAAK2sC,aACrB5a,QAAiBmX,EAAcrpC,EAAQA,QAASG,KAAMH,EAAQE,MAAOysC,GAE3E,OAAOxsC,KAAK4sC,eAAe7a,GAGrB,mBACN,OAAO/xB,KAAKH,W,iCC5DhBzG,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtC,EAAQ,IAChBqhB,aAAa,EAAQ,MAAc/Z,I,iCCF3CnJ,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IACxBA,EAAQ4Z,aAAa,EAAQ,KAAc/Z,GAC3CG,EAAQ4Z,aAAa,EAAQ,KAAuB/Z,GACpDG,EAAQ4Z,aAAa,EAAQ,KAAoB/Z,GACjDG,EAAQ4Z,aAAa,EAAQ,KAAqB/Z,GAClDG,EAAQ4Z,aAAa,EAAQ,MAA6B/Z,GAC1DG,EAAQ4Z,aAAa,EAAQ,KAAyB/Z,GACtDG,EAAQ4Z,aAAa,EAAQ,KAA2B/Z,GACxDG,EAAQ4Z,aAAa,EAAQ,KAA0B/Z,GACvDG,EAAQ4Z,aAAa,EAAQ,MAAqB/Z,GAClDG,EAAQ4Z,aAAa,EAAQ,MAAmB/Z,I,iCCXhDnJ,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBkqC,EAAY,EAAQ,KAC1B,MAAMzR,UAAsByR,EAAUT,QAClC,aAAY,KAAEhyC,EAAI,WAAEihC,EAAU,QAAEC,EAAO,aAAEC,EAAY,aAAEC,EAAY,WAAE7d,EAAU,yBAAE8d,EAAwB,aAAE/qB,EAAY,WAAEgrB,EAAU,OAAE33B,IACjI,MAAMic,EAA+B,aAAhBjc,EAAO3J,KAAsB2J,EAAOc,MAAMmb,aAAejc,EAAOic,aAC/E2b,EAAoB53B,EAAO43B,kBAC3B9X,EAA6B,aAAhB9f,EAAO3J,KAAsB2J,EAAOc,MAAMuF,MAAQrG,EAAO8f,WACtEwJ,EAAwB,aAAhBtpB,EAAO3J,KAAsB2J,EAAOc,MAAMmzB,cAAgBj0B,EAAOspB,MACzElT,EAA4B,aAAhBpW,EAAO3J,KAAsB2J,EAAOc,MAAMsV,UAAYpW,EAAOoW,UACzE8d,EAAgC,aAAhBl0B,EAAO3J,KAAsB2J,EAAOc,MAAMozB,cAAgBl0B,EAAOk0B,cACvF7Q,MAAM,CACFhtB,OACA4lB,eACA6D,aACAwX,aACAC,UACAC,eACAC,eACA7d,aACA8d,6BAEJz7B,KAAK0Q,aAAeA,EACpB1Q,KAAK27B,kBAAoBA,EACzB37B,KAAKu+B,qBAAuB,IAAIluB,IAAIsrB,GACpC37B,KAAK07B,WAAaA,EACE,aAAhB33B,EAAO3J,KACP4F,KAAK+D,OAASA,EAAOc,MAGrB7E,KAAK+D,OAAS,IAAIpB,EAAYmC,MAAM,CAChC8nB,QAAS5sB,KAAK4sB,QACd5M,aAAchgB,KAAKggB,aACnB+X,WAAYp1B,EAAY80B,WAAWqV,YAAY9sC,KAAK27B,kBAAkBrgC,IAAK8H,GAASuF,EAAgB9F,OAAO4jB,aAAarjB,KACxH+W,YACA/P,MAAOpK,KAAK6jB,WACZmU,cAAe3K,EACf4K,gBACAvnB,aAAc,KAI1B,gBAAgB27B,GACZ,MAAM,IAAIpzC,MAAM,mBAEpB,SACI,OAAOG,OAAOC,OAAOD,OAAOC,OAAO,GAAI+tB,MAAM2lB,UAAW,CAAEpR,kBAAmB37B,KAAK27B,kBAAkBrgC,IAAK8H,GAASuF,EAAgB9F,OAAOsH,gBAAgB/G,IAAQs4B,WAAY17B,KAAK07B,WAAWpgC,IAAKqiC,QAA4Bx9B,IAAdw9B,EAA0B,YAAcA,EAAUpzB,SAAS,WAGnRhI,EAAQ64B,cAAgBA,G,iCClDxBhiC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM2N,EAAU,EAAQ,IACxBrG,EAAQyqC,cAAgBpkC,EAAQ23B,kBAAkB,YAAa,IAAM,cACrEh+B,EAAQ+I,iBAAmB1C,EAAQ23B,kBAAkB,eAAiBnmC,GAAS,oBAAwB+F,IAAT/F,EAAqB,IAAM,YAAYA,OACrImI,EAAQmB,iBAAmBkF,EAAQ23B,kBAAkB,gBAAkB0M,GAAc,OAAOA,4BAC5F1qC,EAAQqJ,uBAAyBhD,EAAQ23B,kBAAkB,sBAAuB,IAAM,yB,iHCLxFnnC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIiyC,EAAS,EAAQ,MACrB3qC,EAAQ7E,KAAOwvC,EAAOxvC,M,iCCFtBtE,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAChCpG,EAAQmJ,oBAAuBtI,GAASuF,EAAgB9F,OAAOsqC,gBAAgB/pC,GAC/Eb,EAAQgB,sBAAyBH,GAASuF,EAAgB9F,OAAOuqC,gBAAgBhqC,GACjFb,EAAQkJ,mBAAsBrI,GAASuF,EAAgB9F,OAAOsqC,gBAAgB/pC,GAC9Eb,EAAQ0C,qBAAwB7B,GAASuF,EAAgB9F,OAAOuqC,gBAAgBhqC,I,iCCLhFhK,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM2N,EAAU,EAAQ,IACxBrG,EAAQ+U,+BAAiC1O,EAAQ23B,kBAAkB,+BAAgC,IAAM,kDACzGh+B,EAAQ8qC,kBAAoBzkC,EAAQ23B,kBAAkB,gBAAkBrnC,GAAYA,GACpFqJ,EAAQsQ,mBAAqBjK,EAAQ23B,kBAAkB,iBAAkB,IAAM,gCAC/Eh+B,EAAQqW,mBAAqBhQ,EAAQ23B,kBAAkB,iBAAmBrnC,GAAYA,GACtFqJ,EAAQmP,kBAAoB9I,EAAQ23B,kBAAkB,gBAAiB,CAACz5B,EAAOwmC,IAAkB,mCAAmCxmC,oCAAwCwmC,KAC5K/qC,EAAQgP,iBAAmB3I,EAAQ23B,kBAAkB,eAAgB,CAACz5B,EAAO7L,IAAU,oBAAoB6L,aAAiB7L,yBAC5HsH,EAAQ4O,iBAAmBvI,EAAQ23B,kBAAkB,eAAiBgN,GAAiB,GAAGA,qB,iCCR1Fn0C,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAMyH,EAAU,EAAQ,IAClBiG,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBkL,EAAU,EAAQ,IAClB6O,EAAWha,EAAQqL,gBAAgB,EAAQ,KAC3Cy/B,EAAmB,EAAQ,MAiB3BC,EAAqBtyC,MAAOoG,EAAYqe,EAAO1a,KACjD,IAAIwoC,QAAmB9yC,QAAQmW,IAAI7L,EAAYic,OAAO7lB,IAAIH,MAAO+O,IAEtD,CAAE9E,aADY7D,EAAW6D,OAAOtH,IAAIoM,GAC1ByjC,UAAU,MAE/BD,EAAaA,EAAW3yC,OAAOmK,EAAYka,QAAQ9jB,IAAK8J,IAAW,CAAGA,SAAQuoC,UAAU,YAClF/yC,QAAQmW,IAAI28B,EAAWpyC,IAAIH,OAASiK,SAAQuoC,cAtBhCxyC,OAAOoG,EAAYqe,EAAOxa,EAAQuoC,KACpD,IAAI,MAAE1yC,GAAUmK,EACZuoC,IACA1yC,EAAQA,EAAMqoB,OAElB,MAAO9d,SAAiB5K,QAAQmW,IAAI,CAChC6O,EAAM3C,WAAW7X,EAAOvE,SACxB+e,EAAMguB,qBAAqBxoC,EAAOvE,QAASuE,EAAO0B,MAAO7L,KAEzD0N,EAAgB9F,OAAO2O,aAAapM,EAAO0B,MAAOvF,EAAWX,SAAS6Q,eAAerO,OAASoC,EAAQiY,MAAMljB,OAAS,SAC/GK,QAAQmW,IAAI,CACdnW,QAAQmW,IAAIvL,EAAQiY,MAAMniB,IAAIH,MAAO6P,GAAc4U,EAAMiuB,qBAAqB7iC,EAAW/P,KACzF2kB,EAAMkuB,2BAA2BtoC,EAAQiY,MAAMljB,OAAS,EAAGU,MAUF8yC,CAAcxsC,EAAYqe,EAAOxa,EAAQuoC,KAC1G,MAAMK,EAAgB,IAAI,IAAI39B,IAAIq9B,EAAWpyC,IAAI,EAAG8J,YAAauD,EAAgB9F,OAAOia,aAAa1X,EAAOvE,YAAYvF,IAAK8H,GAASuF,EAAgB9F,OAAOmjB,aAAa5iB,IACpK6qC,QAA0BrzC,QAAQmW,IAAIi9B,EAAc1yC,IAAIH,MAAOiI,UAC3Cwc,EAAM3C,WAAW7Z,IACxBqa,QAEbywB,EAAuB,IACtB,IAAI79B,IAAI49B,EAAkBvxC,OAAO,CAAC2L,EAAKoV,IAAUpV,EAAItN,OAAO0iB,EAAMniB,IAAK6yC,GAASxlC,EAAgB9F,OAAO0a,aAAa4wB,KAAS,MAClI7yC,IAAK0P,GAAcrC,EAAgB9F,OAAOoiB,aAAaja,UACnDpQ,QAAQmW,IAAIm9B,EAAqB5yC,IAAIH,MAAO6P,IAC9C,MAAMxD,QAAkBoY,EAAMpC,aAAaxS,IACtCxD,EAAUwd,YAAcxd,EAAUiW,MAAMzI,GAAGrS,EAAY8H,MAAM4S,aACxDuC,EAAMwuB,gBAAgBpjC,OAIxCzI,EAAQ6f,qBAAuBjnB,OAASuV,eAAcuM,aAAYoF,yBAC9D,MAAMN,EAAiB,GACjBssB,EAAwB,GACxBC,EAA6B,GAC7BrsB,EAAyB,GACzBssB,EAAiB79B,EAAahU,OAAO,CAAC2L,EAAKnD,IAAgBmD,EAAItN,OAAOmK,EAAYspC,aAAc,IAChGC,EAAqBF,EAAe/jC,OAAQkkC,GAAmC,KAApBA,EAAWt0C,MACtEu0C,EAA4Bv1C,OAAO0kB,QAAQpB,EAAS1M,QAAQuV,QAAQkpB,EAAqBC,GAAe/lC,EAAgB9F,OAAOia,aAAanU,EAAgB9F,OAAO+rC,gBAAgBF,EAAW3xC,cAC9LnC,QAAQmW,IAAI49B,EAA0BrzC,IAAIH,OAAQiI,EAAMorC,MAC1D,MAAMhpC,QAAgByX,EAAWtU,EAAgB9F,OAAOmjB,aAAa5iB,IAC/D8Z,EAAU1X,EAAQqpC,WAAWxsB,GACnC,IAAK,MAAM8rB,KAAQ3oC,EAAQiY,MAAO,CAC9B,MAAMqxB,EAAUnmC,EAAgB9F,OAAO0a,aAAa4wB,GACpDE,EAAsBS,SAA+C3uC,IAAnCkuC,EAAsBS,GAClDnsC,EAAY8H,MAAM4S,KAClBgxB,EAAsBS,IAAU55B,IAAIgI,GAE9C,MAAMwxB,EAAaF,EAAYA,EAAYj0C,OAAS,GAC9CymC,EAAS,IAAIr+B,EAAYq/B,aAAa0M,EAAWzzC,OACjDwiB,EAAQujB,EAAOsC,UAAU,IAAMtC,EAAO+N,eACxCtxB,EAAMljB,SAAWiL,EAAQiY,MAAMljB,SAC3BiL,EAAQiY,MAAMljB,OAAS,IACvB0nB,EAAuBzc,EAAQiY,MAAMljB,OAAS,SAA2D4F,IAArD8hB,EAAuBzc,EAAQiY,MAAMljB,OAAS,GAC5FoI,EAAY8H,MAAM4S,KAClB4E,EAAuBzc,EAAQiY,MAAMljB,OAAS,IAAI2a,IAAIgI,IAE5DO,EAAMljB,OAAS,IACf0nB,EAAuBxE,EAAMljB,OAAS,SAClC4F,IADwC8hB,EAAuBxE,EAAMljB,OAAS,GAE5EoI,EAAY8H,MAAM4S,KAClB4E,EAAuBxE,EAAMljB,OAAS,IAAIiD,IAAI0f,KAG5D6E,EAAe3e,GAAQqa,EACvB,IAAK,MAAM0wB,KAAQ1wB,EAAO,CACtB,MAAMqxB,EAAUnmC,EAAgB9F,OAAO0a,aAAa4wB,GACpDE,EAAsBS,SAA+C3uC,IAAnCkuC,EAAsBS,GAClDnsC,EAAY8H,MAAM4S,KAClBgxB,EAAsBS,IAAUtxC,IAAI0f,OAGlD,MAAM8xB,EAAuBT,EAAe/jC,OAAQkkC,GAAmC,KAApBA,EAAWt0C,MAC9E,IAAK,MAAMs0C,KAAcM,EAAsB,CAC3C,MAAMhkC,EAAYrC,EAAgB9F,OAAOosC,gBAAgBP,EAAW3xC,KACpEuxC,EAA2B3lC,EAAgB9F,OAAO0a,aAAavS,IAAc0jC,EAAWzzC,MAAMiE,KAAMugB,GAAkB,IAATA,GAEjH,MAAMuC,EAAmB,GACzB,IAAK,MAAOhX,EAAWyS,KAAUrkB,OAAO0kB,QAAQuwB,GAC5CrsB,EAAiBhX,GAAa,CAAEyS,SAEpC,IAAK,MAAOzS,EAAWga,KAAe5rB,OAAO0kB,QAAQwwB,GAA6B,CAC9E,MAAMY,OAA0C/uC,IAAhC6hB,EAAiBhX,GAA2B,GAAKgX,EAAiBhX,GAClFgX,EAAiBhX,GAAa,CAC1Bga,aACAvH,MAAOyxB,EAAQzxB,OAGvB,MAAO,CACHsE,iBACAC,mBACAC,2BAGR1f,EAAQ+f,wBAA0BnnB,OAAS6mB,mBAAkBC,yBAAwBktB,wBAAuBC,qBAAoBC,wBAAuBC,kBAAiBC,eAAcnB,kBAAiBoB,sBACnM,MAAM1nC,QAAwBqnC,IACxBM,OAAkDtvC,IAApB2H,EAAgC,GAAK,IAAIA,EAAgB2V,OAC7F,IAAIwE,EAAuBnE,WAAW9B,QAAQ,EAAE5R,EAAOnP,MACnDw0C,EAA4BrlC,GAASnP,UAEnCL,QAAQmW,IAAI,CACdnW,QAAQmW,IAAI3X,OAAO0kB,QAAQkE,GAAkB1mB,IAAIH,OAAQmiB,GAAgB0H,aAAYvH,aACjF,MAAMzS,EAAYrC,EAAgB9F,OAAOoiB,aAAa3H,GAChD9V,QAAkB8nC,EAAgB,CAAEtkC,mBACxB7K,IAAdqH,QACM+nC,EAAa,IAAI5sC,EAAYgF,UAAU,CACzCqD,YACAga,aACAvH,iBAGkBtd,IAAf6kB,IAA6BA,QAA+B7kB,IAAf6kB,IAA6Bxd,EAAUwd,mBAC/E7kB,IAAVsd,GAAuBA,EAAMzI,GAAGrS,EAAY8H,MAAM4S,YAAqBld,IAAVsd,GAAuBjW,EAAUiW,MAAMzI,GAAGrS,EAAY8H,MAAM4S,aACrH+wB,EAAgB,CAAEpjC,UAAWxD,EAAUwD,kBAGvCwkC,EAAgBhoC,EAAW,CAAEiW,QAAOuH,uBAG9B7kB,IAApB2H,EACMsnC,EAAmB,IAAIzsC,EAAYsF,gBAAgB,CACjDwV,MAAOgyB,KAETJ,EAAsBvnC,EAAiB,CACrC2V,MAAOgyB,OAIvBltC,EAAQkO,cAAgBtV,MAAOoG,EAAYmP,KACvC,MAAMkP,EAAQ,IAAI4tB,EAAiB7wB,eAAepb,SAC5C3G,QAAQmW,IAAIL,EAAapV,IAAIH,MAAO+J,GAAgBuoC,EAAmBlsC,EAAYqe,EAAO1a,KAChG,MAAM,iBAAE8c,EAAgB,uBAAEC,SAAiC1f,EAAQ6f,qBAAqB,CACpF1R,aAAcA,EAAalG,OAAQtF,GAAgBA,EAAY9K,OAASuI,EAAYge,gBAAgBuB,OAAShd,aAAuBvC,EAAYwf,kBAChJlF,WAAY9hB,MAAOiI,GAASwc,EAAM3C,WAAW7Z,GAC7Cif,mBAAoB9gB,EAAWX,SAAS6Q,eAAekG,gBAErDpV,EAAQ+f,wBAAwB,CAClCN,mBACAC,yBACAktB,sBAAuBh0C,SAAYykB,EAAM5B,qBACzCoxB,mBAAoBj0C,MAAOF,GAAU2kB,EAAMwvB,mBAAmBn0C,GAC9Do0C,sBAAuBl0C,MAAOiiB,UACpBwC,EAAMyvB,sBAAsBjyB,IAEtCkyB,gBAAiBn0C,MAAO4B,GAAQ6iB,EAAMpC,aAAazgB,EAAIiO,WACvDukC,aAAcp0C,MAAOqM,GAAcoY,EAAM2vB,aAAa/nC,GACtD4mC,gBAAiBjzC,MAAO4B,GAAQ6iB,EAAMwuB,gBAAgBrxC,EAAIiO,WAC1DwkC,gBAAiBr0C,MAAOF,EAAOmiB,IAAWwC,EAAM4vB,gBAAgBv0C,EAAM+P,UAAWoS,KAErF,MAAOtV,EAAiB6V,SAAoB/iB,QAAQmW,IAAI,CAAC6O,EAAM5B,qBAAsB4B,EAAM/J,qBACrF65B,EAAgB73C,KAAKk9B,IAAIpyB,EAAY8H,MAAMklC,gBAAgBhtC,EAAY8H,MACxEmlC,eAAe9nC,EAAgB2V,MAC/BniB,IAAI,CAACmiB,EAAOoyB,KAAU,CAAGA,QAAOpyB,WAAiBtd,IAAVsd,EAAsB9a,EAAY8H,MAAM4S,KAAOI,KACtFjT,OAAO,EAAGiT,WAAYA,EAAMqyB,GAAGntC,EAAY8H,MAAM4S,OAAQ,IAAM,IAAM,EAAGwyB,WAAY,IAAIhiC,EAAQoF,GAAG48B,IACnGv0C,IAAI,GAAIu0C,SAASE,MAAY,CAAG90C,MAAO40C,EAAOE,aAAaxuC,EAAWX,SAASI,kBAAkBzG,QAChGy1C,EAAuB,IAAI3/B,IAAI9O,EAAWX,SAASI,kBAAkB1F,IAAK0P,GAAcrC,EAAgB9F,OAAO0a,aAAavS,KAC5HilC,EAAyB,IAAI5/B,IAAIqM,EAAS1M,QAAQuc,KAAK5O,EACxDnT,OAAQhD,GAAeA,EAAUwd,YAAcxd,EAAUiW,MAAMqyB,GAAGntC,EAAY8H,MAAM4S,OACrF2yB,EAAqBzyC,IAAIoL,EAAgB9F,OAAO0a,aAAa/V,EAAUwD,aACtEwhB,KAAK,CAAC0jB,EAAYC,IAAeD,EAAWzyB,MAAMzI,GAAGm7B,EAAW1yB,OAC/D9U,EAAgB9F,OAAOutC,eAAeF,EAAWllC,UAAWmlC,EAAWnlC,YACtEklC,EAAWzyB,MAAM4yB,IAAIF,EAAW1yB,QAClCniB,IAAKkM,GAAcmB,EAAgB9F,OAAO0a,aAAa/V,EAAUwD,YAAa0kC,IAC7EY,EAAyB,IAAIN,GACnC,IAAK,IAAInY,EAAI,EAAGA,EAAIyY,EAAuB/1C,QAAU01C,EAAuB1lB,KAAOmlB,EAAe7X,GAAK,EACnGoY,EAAuBzyC,IAAI8yC,EAAuBzY,IAGtD,MAD6B,IAAIoY,GAAwB30C,IAAKi1C,GAAQ5nC,EAAgB9F,OAAOoiB,aAAasrB,IAC9E/jB,KAAK,CAACgkB,EAAMC,IAAS9nC,EAAgB9F,OAAOutC,eAAeI,EAAMC,M,iCCtLjGr3C,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IAC5BJ,EAAQ0W,mBAAqB9d,MAAOu1C,IAChC,IACI,MAAMrtC,QAAeqtC,IACrB,OAAIrtC,EAAO+Q,QAAUzL,EAAgB2L,QAAQq8B,KAClC,IAAIhuC,EAAY0hB,wBAAwB,CAC3CusB,YAAavtC,EAAOutC,YACpBC,QAASxtC,EAAOwtC,QAChB13C,MAAOkK,EAAOlK,QAGf,IAAIwJ,EAAYmuC,sBAAsB,CACzCF,YAAavtC,EAAOutC,YACpBC,QAASxtC,EAAOwtC,QAChB13C,MAAOkK,EAAOlK,MACdD,aAAiCiH,IAAxBkD,EAAOgR,aAA6B,gBAAkBhR,EAAOgR,eAG9E,MAAO7Q,GACH,OAAO,IAAIb,EAAYmuC,sBAAsB,CACzCF,YAAajoC,EAAgB8B,MAAM4S,KACnCwzB,QAASloC,EAAgB8B,MAAM4S,KAC/BlkB,MAAO,GACPD,QAASsK,EAAMtK,a,iCCzB3BE,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM4xC,EAAY,EAAQ,KAC1B,MAAM7Q,UAAyB6Q,EAAUT,QACrC,mBAAkB,aAAE5Q,IAChB,OAAO,IAAIQ,EAAiB,CACxB5hC,KAAM4F,KAAK5F,KACX4lB,aAAchgB,KAAKggB,aACnB6D,WAAY7jB,KAAK6jB,WACjBwX,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,4BAI3Cl5B,EAAQy5B,iBAAmBA,G,iCCjB3B5iC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM4xC,EAAY,EAAQ,KAC1B,MAAM1Q,UAAuB0Q,EAAUT,QACnC,mBAAkB,aAAE5Q,IAChB,OAAO,IAAIW,EAAe,CACtB/hC,KAAM4F,KAAK5F,KACX4lB,aAAchgB,KAAKggB,aACnB6D,WAAY7jB,KAAK6jB,WACjBwX,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,4BAI3Cl5B,EAAQ45B,eAAiBA,G,iCCjBzB/iC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM+/B,EAAkB,EAAQ,KAC1B+V,EAAuB,EAAQ,KACrC,MAAMlV,UAA6Bb,EAAgBI,cAC/C,OAAM,KAAEhhC,EAAI,aAAEmhC,EAAY,WAAEF,IACxB,OAAO,IAAIQ,EAAqB,CAC5BzhC,OACAihC,aACAC,QAASt7B,KAAKs7B,QACdC,eACAC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,WAAY17B,KAAK07B,WACjB33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,qBAIpC,mBAAkB,aAAEH,IAChB,OAAO,IAAIK,EAAqB,CAC5BzhC,KAAM4F,KAAK5F,KACXihC,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,WAAY17B,KAAK07B,WACjB33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,qBAIpC,iBAAgB,WAAED,IACd,OAAO,IAAIG,EAAqB,CAC5BzhC,KAAM4F,KAAK5F,KACXihC,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,aACA33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,qBAIpC,mBACI,OAAO,IAAIoV,EAAqBtS,mBAAmB,CAC/CpD,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,WAAY17B,KAAK07B,WACjB33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,sBAKxCp5B,EAAQs5B,qBAAuBA,G,iCC5E/BziC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM+/B,EAAkB,EAAQ,KAChC,MAAMyD,UAA2BzD,EAAgBI,cAC7C,aAAY,WAAEC,EAAU,QAAEC,EAAO,aAAEC,EAAY,aAAEC,EAAY,WAAE7d,EAAU,yBAAE8d,EAAwB,aAAE/qB,EAAY,WAAEgrB,EAAU,OAAE33B,IAC3HqjB,MAAM,CACFhtB,KAAM,UACNihC,aACAC,UACAC,eACAC,eACA7d,aACA8d,2BACA/qB,eACAgrB,aACA33B,WAGR,mBAAkB,aAAEy3B,IAChB,OAAO,IAAIiD,EAAmB,CAC1BpD,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,WAAY17B,KAAK07B,WACjB33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,qBAIpC,iBAAgB,WAAED,IACd,OAAO,IAAI+C,EAAmB,CAC1BpD,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,aAAcx7B,KAAKw7B,aACnB7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,yBAC/B/qB,aAAc1Q,KAAK0Q,aACnBgrB,aACA33B,OAAQ,CACJ3J,KAAM,WACNyK,MAAO7E,KAAK+D,OACZ43B,kBAAmB37B,KAAK27B,sBAKxCp5B,EAAQk8B,mBAAqBA,G,iCCpD7BrlC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM4xC,EAAY,EAAQ,KAC1B,MAAMjR,UAA4BiR,EAAUT,QACxC,aAAY,aAAEpsB,EAAY,WAAE6D,EAAU,WAAEwX,EAAU,QAAEC,EAAO,aAAEC,EAAY,aAAEC,EAAY,WAAE7d,EAAU,yBAAE8d,IACjGrU,MAAM,CACFhtB,KAAM,SACN4lB,eACA6D,aACAwX,aACAC,UACAC,eACAC,eACA7d,aACA8d,6BAGR,mBAAkB,aAAED,IAChB,OAAO,IAAII,EAAoB,CAC3B5b,aAAchgB,KAAKggB,aACnB6D,WAAY7jB,KAAK6jB,WACjBwX,WAAYr7B,KAAKq7B,WACjBC,QAASt7B,KAAKs7B,QACdC,aAAcv7B,KAAKu7B,aACnBC,eACA7d,WAAY3d,KAAK2d,WACjB8d,yBAA0Bz7B,KAAKy7B,4BAI3Cl5B,EAAQq5B,oBAAsBA,G,iCC7B9BxiC,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM2N,EAAU,EAAQ,IACxB,IAAI8iB,GACJ,SAAWA,GACPA,EAAc,KAAI,OAClBA,EAAe,MAAI,QACnBA,EAAmB,UAAI,YACvBA,EAAmB,UAAI,YACvBA,EAAqB,YAAI,cACzBA,EAAoB,WAAI,aACxBA,EAAiB,QAAI,UACrBA,EAAmB,UAAI,YACvBA,EAAiB,QAAI,UACrBA,EAAoB,WAAI,aACxBA,EAAiB,QAAI,UACrBA,EAAa,IAAI,MACjBA,EAAiB,QAAI,UACrBA,EAAY,GAAI,KAChBA,EAAgB,OAAI,SACpBA,EAAiB,QAAI,UACrBA,EAAe,MAAI,QACnBA,EAAqB,YAAI,cACzBA,EAAkB,SAAI,WACtBA,EAAc,KAAI,OAClBA,EAAc,KAAI,OAClBA,EAAgB,OAAI,SAtBxB,CAuBGA,EAAUnpB,EAAQmpB,UAAYnpB,EAAQmpB,QAAU,KACnDnpB,EAAQyuC,oBAAsBpoC,EAAQ23B,kBAAkB,kBAAoB9U,GAAY,2BAA2BA,KAEnHlpB,EAAQ4+B,cAAiB1V,IACrB,GAFc,CAACA,QAAiCtrB,IAArBurB,EAAQD,GAE/BwlB,CAAUxlB,GACV,OAAOA,EAEX,MAAM,IAAIlpB,EAAQyuC,oBAAoBvlB,K,iCCjC1CryB,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,IAAIi2C,EAAgB,EAAQ,MAC5B3uC,EAAQuzB,YAAcob,EAAcpb,YACpC,IAAIqb,EAAqB,EAAQ,MACjC5uC,EAAQs/B,iBAAmBsP,EAAmBtP,iBAC9C,IAAIuP,EAAsB,EAAQ,MAClC7uC,EAAQu/B,kBAAoBsP,EAAoBtP,kBAChD,IAAIuP,EAAqB,EAAQ,MACjC9uC,EAAQqpB,iBAAmBylB,EAAmBzlB,iBAC9C,IAAI0lB,EAAmB,EAAQ,MAC/B/uC,EAAQ6zB,eAAiBkb,EAAiBlb,eAC1C,IAAImb,EAAe,EAAQ,MAC3BhvC,EAAQouB,WAAa4gB,EAAa5gB,WAClC,IAAI6gB,EAAuB,EAAQ,MACnCjvC,EAAQu1B,mBAAqB0Z,EAAqB1Z,mBAClD,IAAIuL,EAAmB,EAAQ,KAC/B9gC,EAAQsrB,eAAiBwV,EAAiBxV,eAC1C,IAAI4jB,EAAmB,EAAQ,MAC/BlvC,EAAQsqB,eAAiB4kB,EAAiB5kB,eAC1CtqB,EAAQyqB,SAAWykB,EAAiBzkB,SACpC,IAAI8W,EAAkB,EAAQ,KAC9BvhC,EAAQquB,cAAgBkT,EAAgBlT,e,kCCtBxC,YACAx3B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM0N,EAAkB,EAAQ,IAC1BhG,EAAc,EAAQ,IACtBqmB,EAAe,EAAQ,KAE7B,MAAM6E,EACF,aAAY,KAAEF,EAAI,KAAER,EAAI,UAAEhT,EAAS,SAAE4S,IACjC/sB,KAAKwL,cAAgB7C,EAAgB24B,oBAAoBthC,KAAKuhC,kBAAkBzmC,KAAKkF,OACrFA,KAAK2tB,KAAOA,EACZ3tB,KAAKmtB,KAAOA,EACZntB,KAAKma,UAAYA,EACjBna,KAAK+sB,SAAWA,EAEpB,4BAA2B,OAAEiU,IACzB,MAAM7mB,EAAY6mB,EAAOC,eACnBlU,EAAWiU,EAAO0D,eAClB7jC,EAAUmoB,EAAa6J,SAAS6e,cAAc,IAAI1Q,EAAOS,UAAU,MACnEtU,EAAO6T,EAAO2Q,eACdC,EAAuBzxC,MAAXU,EAAuB,GAAKA,EAAQ+xB,gBACtD,OAAO,IAAI5yB,KAAK,CACZma,YACA4S,WACAY,KAAmBxtB,MAAbyxC,EAAyB,GAAKA,EACpCzkB,SAGR,uBAAuBttB,GACnB,OAAOG,KAAK+hC,oBAAoB,CAC5B1gC,QAASxB,EAAQwB,QACjB2/B,OAAQ,IAAIr+B,EAAYq/B,aAAaniC,EAAQoE,UAGrD,eAAe0pB,GACX,MAAM9sB,EAAUb,KAAK6xC,YAAYlkB,GACjC,GAAextB,MAAXU,EACA,OAAO,EAEX,IAEI,OADAA,EAAQixC,eACD,EAEX,MAAOngB,GACH,OAAO,GAGf,mBAAmBhE,GAEf,OAAwB,IADVA,EAAKokB,MAAM,KACZx3C,OAAeyuB,EAAa6J,SAASC,aAAanF,GAAQ,IAAI3E,EAAa6J,SAASlF,GAErG,kBAAkBsU,GACd,MAAMphC,EAAUgtB,EAAegkB,YAAY7xC,KAAK2tB,MAChD,GAAextB,MAAXU,EACA,MAAM,IAAI8H,EAAgBu4B,mBAAmB,gCAEjDe,EAAOC,cAAcliC,KAAKma,WAC1B8nB,EAAO6C,cAAc9kC,KAAK+sB,UAC1B,MAAMilB,EAAoBtc,EAAO1R,KAAKnjB,EAAQixC,eAC9C7P,EAAOI,WAAW3M,EAAO36B,OAAO,CAAC26B,EAAO0M,MArD5B,GAqDgD4P,EAAkBz3C,OAAQ,GAAIy3C,KAC1F/P,EAAOgQ,cAAcjyC,KAAKmtB,OAGlC5qB,EAAQsrB,eAAiBA,I,0DC7DzBz0B,OAAOkJ,eAAeC,EAAS,aAAc,CAAEtH,OAAO,IACtD,MAAM2N,EAAU,EAAQ,IACxB,IAAIgoB,GACJ,SAAWA,GACPA,EAAcA,EAA2B,YAAI,GAAK,cAClDA,EAAcA,EAAqB,MAAI,GAAK,QAC5CA,EAAcA,EAAyB,UAAI,KAAO,YAHtD,CAIGA,EAAgBruB,EAAQquB,gBAAkBruB,EAAQquB,cAAgB,KACrEruB,EAAQ2vC,0BAA4BtpC,EAAQ23B,kBAAkB,yBAA2B4R,GAAkB,mCAAmCA,KAE9I5vC,EAAQwhC,oBAAuBoO,IAC3B,GAFoB,CAACA,QAAmDhyC,IAAjCywB,EAAcuhB,GAEjDC,CAAgBD,GAChB,OAAOA,EAEX,MAAM,IAAI5vC,EAAQ2vC,0BAA0BC","file":"workers.14.b593410f.js","sourcesContent":["import * as comlink from './comlink';\nimport * as endpoint from './endpoint';\n\nexport { comlink, endpoint };\nexport * from './WorkerManager';\nexport { Disposable } from './types';\n","// tslint:disable\nexport interface Endpoint {\n  postMessage(message: any, transfer?: any[]): void;\n  addEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n  removeEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n}\nexport type Proxy = Function;\ntype CBProxyCallback = (bpcd: CBProxyCallbackDescriptor) => {}; // eslint-disable-line no-unused-vars\ntype Transferable = MessagePort | ArrayBuffer; // eslint-disable-line no-unused-vars\nexport type Exposable = Function | Object; // eslint-disable-line no-unused-vars\n\ninterface InvocationResult {\n  type: 'RETURN';\n  id?: string;\n  value: WrappedValue;\n}\n\ntype WrappedValue = RawWrappedValue | HandledWrappedValue;\n\ninterface PropertyIteratorEntry {\n  value: {};\n  path: string[];\n}\n\ninterface WrappedChildValue {\n  path: string[];\n  wrappedValue: HandledWrappedValue;\n}\n\ninterface RawWrappedValue {\n  type: 'RAW';\n  value: {};\n  wrappedChildren?: WrappedChildValue[];\n}\n\ninterface HandledWrappedValue {\n  type: string;\n  value: {};\n}\n\ntype CBProxyCallbackDescriptor = CBPCDGet | CBPCDApply | CBPCDConstruct | CBPCDSet; // eslint-disable-line no-unused-vars\n\ninterface CBPCDGet {\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface CBPCDApply {\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDConstruct {\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDSet {\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: {};\n}\n\ntype InvocationRequest =\n  | GetInvocationRequest\n  | ApplyInvocationRequest\n  | ConstructInvocationRequest\n  | SetInvocationRequest;\n\ninterface GetInvocationRequest {\n  id?: string;\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface ApplyInvocationRequest {\n  id?: string;\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface ConstructInvocationRequest {\n  id?: string;\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface SetInvocationRequest {\n  id?: string;\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: WrappedValue;\n}\n\nexport interface TransferHandler {\n  canHandle: (obj: {}) => Boolean;\n  serialize: (obj: {}) => {};\n  deserialize: (obj: {}) => {};\n}\n\nconst TRANSFERABLE_TYPES = [ArrayBuffer, MessagePort];\nconst uid: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n\nconst proxyValueSymbol = Symbol('proxyValue');\nconst throwSymbol = Symbol('throw');\nconst proxyTransferHandler: TransferHandler = {\n  canHandle: (obj: {}): Boolean => {\n    return obj && ((obj as any)[proxyValueSymbol] || obj instanceof Function);\n  },\n  serialize: (obj: {}): {} => {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return port2;\n  },\n  deserialize: (obj: {}): {} => {\n    return proxy(obj as MessagePort);\n  },\n};\n\nconst throwTransferHandler = {\n  canHandle: (obj: {}): Boolean => (obj && (obj as any)[throwSymbol]) || obj instanceof Error,\n  serialize: (obj: any): {} => {\n    const message = obj && obj.message;\n    const stack = obj && obj.stack;\n    return Object.assign({}, obj, { message, stack });\n  },\n  deserialize: (obj: {}): {} => {\n    throw Object.assign(Error(), obj);\n  },\n};\n\nexport const transferHandlers: Map<string, TransferHandler> = new Map([\n  ['PROXY', proxyTransferHandler] as const,\n  ['THROW', throwTransferHandler] as const,\n]);\n\nlet pingPongMessageCounter: number = 0;\n\nexport function proxy(endpoint: Endpoint | Window, target?: any): Proxy {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  return cbProxy(\n    async (irequest) => {\n      let args: WrappedValue[] = [];\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') args = irequest.argumentsList.map(wrapValue);\n      const response = await pingPongMessage(\n        endpoint as Endpoint,\n        Object.assign({}, irequest, { argumentsList: args }),\n        transferableProperties(args),\n      );\n      const result = response.data as InvocationResult;\n      return unwrapValue(result.value);\n    },\n    [],\n    target,\n  );\n}\n\nexport function proxyValue<T>(obj: T): T {\n  if (obj instanceof MessagePort) {\n    return obj;\n  }\n\n  (obj as any)[proxyValueSymbol] = true;\n  return obj;\n}\n\nexport function expose(rootObj: Exposable, endpoint: Endpoint | Window): void {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  attachMessageHandler(endpoint, async function(event: MessageEvent) {\n    if (!event.data.id || !event.data.callPath) return;\n    let iresult;\n    const irequest = event.data as InvocationRequest;\n    try {\n      const that = await irequest.callPath.slice(0, -1).reduce((obj, propName) => obj[propName], rootObj as any);\n      let args: Array<{}> = [];\n\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') {\n        args = irequest.argumentsList.map(unwrapValue);\n      }\n      if (irequest.type === 'APPLY') {\n        if (irequest.callPath.length > 0) {\n          iresult = await that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await that(...args);\n        }\n      }\n      if (irequest.type === 'CONSTRUCT') {\n        if (irequest.callPath.length > 0) {\n          iresult = await new that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await new that(...args);\n        }\n        iresult = proxyValue(iresult);\n      }\n      if (irequest.type === 'SET' || irequest.type === 'GET') {\n        const obj = irequest.callPath.length > 0 ? await that[irequest.callPath[irequest.callPath.length - 1]] : that;\n        if (irequest.type === 'SET') {\n          obj[irequest.property] = irequest.value;\n          // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n          // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n          iresult = true;\n        } else {\n          iresult = obj;\n        }\n      }\n    } catch (e) {\n      iresult = e;\n      iresult[throwSymbol] = true;\n    }\n\n    iresult = makeInvocationResult(irequest, iresult);\n    return (endpoint as Endpoint).postMessage(iresult, transferableProperties([iresult]));\n  });\n}\n\nfunction wrapValue(arg: {}): WrappedValue {\n  // Is arg itself handled by a TransferHandler?\n  for (const [key, transferHandler] of transferHandlers) {\n    if (transferHandler.canHandle(arg)) {\n      return {\n        type: key,\n\n        value: transferHandler.serialize(arg),\n      };\n    }\n  }\n\n  // If not, traverse the entire object and find handled values.\n  let wrappedChildren: WrappedChildValue[] = [];\n  iterateUnhandledProperties(arg, (value, path) => {\n    for (const [key, transferHandler] of transferHandlers) {\n      if (transferHandler.canHandle(value)) {\n        wrappedChildren.push({\n          path,\n          wrappedValue: {\n            type: key,\n            value: transferHandler.serialize(value),\n          },\n        });\n\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  for (const wrappedChild of wrappedChildren) {\n    const container = wrappedChild.path.slice(0, -1).reduce((obj, key) => obj[key], arg as any);\n    container[wrappedChild.path[wrappedChild.path.length - 1]] = null;\n  }\n  return {\n    type: 'RAW',\n    value: arg,\n    wrappedChildren,\n  };\n}\n\nfunction unwrapValue(arg: WrappedValue): {} {\n  if (transferHandlers.has(arg.type)) {\n    const transferHandler = transferHandlers.get(arg.type)!;\n    return transferHandler.deserialize(arg.value);\n  } else if (isRawWrappedValue(arg)) {\n    for (const wrappedChildValue of arg.wrappedChildren || []) {\n      if (!transferHandlers.has(wrappedChildValue.wrappedValue.type))\n        throw Error(`Unknown value type \"${arg.type}\" at ${wrappedChildValue.path.join('.')}`);\n      const transferHandler = transferHandlers.get(wrappedChildValue.wrappedValue.type)!;\n      const newValue = transferHandler.deserialize(wrappedChildValue.wrappedValue.value);\n      replaceValueInObjectAtPath(arg.value, wrappedChildValue.path, newValue);\n    }\n    return arg.value;\n  } else {\n    throw Error(`Unknown value type \"${arg.type}\"`);\n  }\n}\n\nfunction replaceValueInObjectAtPath(obj: {}, path: string[], newVal: {}) {\n  const lastKey = path.slice(-1)[0];\n  const lastObj = path.slice(0, -1).reduce((obj: any, key: string) => obj[key], obj);\n  lastObj[lastKey] = newVal;\n}\n\nfunction isRawWrappedValue(arg: WrappedValue): arg is RawWrappedValue {\n  return arg.type === 'RAW';\n}\n\nfunction windowEndpoint(w: Window): Endpoint {\n  if (self.constructor.name !== 'Window') throw Error('self is not a window');\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n  };\n}\n\nexport function isEndpoint(endpoint: any): endpoint is Endpoint {\n  return 'addEventListener' in endpoint && 'removeEventListener' in endpoint && 'postMessage' in endpoint;\n}\n\nfunction activateEndpoint(endpoint: Endpoint): void {\n  if (isMessagePort(endpoint)) endpoint.start();\n}\n\nfunction attachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Checking all possible types of `endpoint` manually satisfies TypeScript’s\n  // type checker. Not sure why the inference is failing here. Since it’s\n  // unnecessary code I’m going to resort to `any` for now.\n  // if(isWorker(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isMessagePort(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isOtherWindow(endpoint))\n  //   endpoint.addEventListener('message', f);\n  (endpoint as any).addEventListener('message', f);\n}\n\nfunction detachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Same as above.\n  (<any>endpoint).removeEventListener('message', f);\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === 'MessagePort';\n}\n\nfunction isWindow(endpoint: Endpoint | Window): endpoint is Window {\n  // TODO: This doesn’t work on cross-origin iframes.\n  // return endpoint.constructor.name === 'Window';\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\n/**\n * `pingPongMessage` sends a `postMessage` and waits for a reply. Replies are\n * identified by a unique id that is attached to the payload.\n */\nfunction pingPongMessage(endpoint: Endpoint, msg: Object, transferables: Transferable[]): Promise<MessageEvent> {\n  const id = `${uid}-${pingPongMessageCounter++}`;\n\n  return new Promise((resolve) => {\n    attachMessageHandler(endpoint, function handler(event: MessageEvent) {\n      if (event.data.id !== id || event.data.type !== 'RETURN') return;\n      detachMessageHandler(endpoint, handler);\n      resolve(event);\n    });\n\n    // Copy msg and add `id` property\n    msg = Object.assign({}, msg, { id });\n    endpoint.postMessage(msg, transferables);\n  });\n}\n\nfunction cbProxy(cb: CBProxyCallback, callPath: PropertyKey[] = [], target = function() {}): Proxy {\n  return new Proxy(target, {\n    construct(_target, argumentsList, proxy) {\n      return cb({\n        type: 'CONSTRUCT',\n        callPath,\n        argumentsList,\n      });\n    },\n    apply(_target, _thisArg, argumentsList) {\n      // We use `bind` as an indicator to have a remote function bound locally.\n      // The actual target for `bind()` is currently ignored.\n      if (callPath[callPath.length - 1] === 'bind') return cbProxy(cb, callPath.slice(0, -1));\n      return cb({\n        type: 'APPLY',\n        callPath: callPath[callPath.length - 1] === 'apply' ? callPath.slice(0, -1) : callPath,\n        argumentsList: callPath[callPath.length - 1] === 'apply' ? argumentsList[1] : argumentsList,\n      });\n    },\n    get(_target, property, proxy) {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      if (property === 'then' && callPath.length === 0) {\n        return { then: () => proxy };\n      } else if (property === 'then') {\n        const r = cb({\n          type: 'GET',\n          callPath,\n        });\n        return Promise.resolve(r).then.bind(r);\n      } else {\n        return cbProxy(cb, callPath.concat(property), (<any>_target)[property]);\n      }\n    },\n    set(_target, property, value, _proxy): boolean {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      return cb({\n        type: 'SET',\n        callPath,\n        property,\n        value,\n      }) as boolean;\n    },\n  });\n}\n\nexport function isTransferable(thing: {}): thing is Transferable {\n  return TRANSFERABLE_TYPES.some((type) => thing instanceof type);\n}\n\nfunction iterateUnhandledProperties(\n  value: {} | undefined,\n  handleProperty: (value: any, path: string[]) => boolean,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): void {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  if (handleProperty(value, path)) return;\n\n  const keys = Object.keys(value);\n  for (const key of keys) iterateUnhandledProperties((value as any)[key], handleProperty, [...path, key], visited);\n}\n\nfunction* iterateAllProperties(\n  value: {} | undefined,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): Iterable<PropertyIteratorEntry> {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  yield { value, path };\n\n  const keys = Object.keys(value);\n  for (const key of keys) yield* iterateAllProperties((value as any)[key], [...path, key], visited);\n}\n\nexport function transferableProperties(obj: {}[] | undefined): Transferable[] {\n  const r: Transferable[] = [];\n  for (const prop of iterateAllProperties(obj)) {\n    if (isTransferable(prop.value)) r.push(prop.value);\n  }\n  return r;\n}\n\nfunction makeInvocationResult(irequest: InvocationRequest, obj: {}): InvocationResult {\n  return {\n    type: 'RETURN',\n    id: irequest.id,\n    value: wrapValue(obj),\n  };\n}\n","// tslint:disable no-any\nimport * as comlink from './comlink';\n\nexport type EndpointLike = comlink.Endpoint | Window | Worker | WorkerEndpoint;\nexport interface WorkerEndpoint extends comlink.Endpoint {\n  readonly start: () => void;\n  readonly close: () => void;\n}\n\nfunction isWorkerEndpoint(endpoint: EndpointLike): endpoint is WorkerEndpoint {\n  return ['postMessage', 'addEventListener', 'removeEventListener', 'start', 'close'].every((prop) => prop in endpoint);\n}\n\nfunction isWindow(endpoint: EndpointLike): endpoint is Window {\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\nfunction isWorker(endpoint: EndpointLike): endpoint is Worker {\n  return ['onmessage', 'postMessage', 'terminate', 'addEventListener', 'removeEventListener'].every(\n    (prop) => prop in endpoint,\n  );\n}\n\nfunction windowEndpoint(w: Window): WorkerEndpoint {\n  if (self.constructor.name !== 'Window') {\n    throw Error('self is not a window');\n  }\n\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n    start: () => {\n      // do nothing\n    },\n    close: () => {\n      // do nothing\n    },\n  };\n}\n\nfunction workerEndpoint(worker: Worker): WorkerEndpoint {\n  return {\n    addEventListener: worker.addEventListener.bind(worker) as any,\n    removeEventListener: worker.removeEventListener.bind(worker) as any,\n    postMessage: worker.postMessage.bind(worker) as any,\n    start: () => {\n      // do nothing\n    },\n    close: worker.terminate.bind(worker),\n  };\n}\n\nfunction endpointEndpoint(endpoint: comlink.Endpoint): WorkerEndpoint {\n  return {\n    addEventListener: endpoint.addEventListener.bind(endpoint),\n    removeEventListener: endpoint.removeEventListener.bind(endpoint),\n    postMessage: endpoint.postMessage.bind(endpoint),\n    start: () => {\n      activate(endpoint);\n    },\n    close: () => {\n      if ((endpoint as any).close) {\n        (endpoint as any).close();\n      }\n    },\n  };\n}\n\nexport function getEndpoint(endpointIn: EndpointLike): WorkerEndpoint {\n  return isWorkerEndpoint(endpointIn)\n    ? endpointIn\n    : isWindow(endpointIn)\n    ? windowEndpoint(endpointIn)\n    : isWorker(endpointIn)\n    ? workerEndpoint(endpointIn)\n    : endpointEndpoint(endpointIn);\n}\n\nexport function activate(endpoint: any): void {\n  if (endpoint.start) {\n    endpoint.start();\n  }\n}\n","import { JSONRPCLocalProvider } from '@neo-one/node-browser';\nimport { comlink } from '@neo-one/worker';\n\ncomlink.expose(JSONRPCLocalProvider, self);\n","import { common, crypto } from '@neo-one/client-common';\nimport { DeveloperClient } from '@neo-one/client-core';\nimport { Blockchain } from '@neo-one/node-blockchain';\nimport { createMain } from '@neo-one/node-neo-settings';\nimport { Node } from '@neo-one/node-protocol';\nimport { createHandler, RPCHandler } from '@neo-one/node-rpc-handler';\nimport { storage as levelupStorage } from '@neo-one/node-storage-levelup';\nimport { vm } from '@neo-one/node-vm';\nimport { Disposable } from '@neo-one/utils';\nimport Level from 'level-js';\nimport LevelUp from 'levelup';\nimport MemDown from 'memdown';\nimport { constants } from './constants';\nimport { Network } from './Network';\n\nexport interface PersistentFullNode {\n  readonly type: 'persistent';\n  readonly id: string;\n}\n\nexport interface InMemoryFullNode {\n  readonly type: 'memory';\n}\n\nexport type FullNodeOptions = PersistentFullNode | InMemoryFullNode;\n\nexport class FullNode {\n  private mutableDisposable: Disposable | undefined;\n  private readonly startPromise: Promise<RPCHandler>;\n\n  public constructor(\n    private readonly options: FullNodeOptions,\n    private readonly developerClient: DeveloperClient,\n    private readonly build: () => Promise<void>,\n  ) {\n    this.startPromise = this.startInternal();\n  }\n\n  public async start(): Promise<void> {\n    return this.startPromise.then(() => {\n      // do nothing\n    });\n  }\n\n  public async stop(): Promise<void> {\n    if (this.mutableDisposable !== undefined) {\n      await this.mutableDisposable();\n      this.mutableDisposable = undefined;\n    }\n  }\n\n  // tslint:disable-next-line no-any\n  public async handleRequest(data: any): Promise<any> {\n    const handler = await this.startPromise;\n\n    return handler(data);\n  }\n\n  private async startInternal(): Promise<RPCHandler> {\n    const primaryPrivateKey = common.stringToPrivateKey(constants.PRIVATE_NET_PRIVATE_KEY);\n    const primaryPublicKey = common.stringToECPoint(constants.PRIVATE_NET_PUBLIC_KEY);\n    crypto.addPublicKey(primaryPrivateKey, primaryPublicKey);\n\n    const settings = createMain({\n      address: common.uInt160ToString(crypto.privateKeyToScriptHash(primaryPrivateKey)),\n      standbyValidators: [common.ecPointToString(primaryPublicKey)],\n      privateNet: true,\n    });\n    const storage = levelupStorage({\n      db: LevelUp(this.options.type === 'persistent' ? Level(this.options.id) : MemDown()),\n      context: { messageMagic: settings.messageMagic },\n    });\n\n    const blockchain = await Blockchain.create({\n      settings,\n      storage,\n      vm,\n    });\n    const nodeOptions = {\n      consensus: {\n        privateKey: common.privateKeyToString(primaryPrivateKey),\n        privateNet: true,\n      },\n    };\n    const node = new Node({\n      blockchain,\n      options: nodeOptions,\n      createNetwork: () => new Network(),\n    });\n\n    this.mutableDisposable = await node.start();\n\n    return createHandler({\n      blockchain,\n      node,\n      handleResetProject: this.reset.bind(this),\n      handleGetNEOTrackerURL: async () => undefined,\n    });\n  }\n\n  private async reset(): Promise<void> {\n    await this.developerClient.reset();\n    await this.developerClient.updateSettings({ secondsPerBlock: 15 });\n\n    await this.build();\n  }\n}\n","import { constants as utilsConstants } from '@neo-one/utils';\n\nexport const constants = {\n  ...utilsConstants,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar levelUpStorage_1 = require(\"./levelUpStorage\");\nexports.storage = levelUpStorage_1.levelUpStorage;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst node_storage_common_1 = require(\"@neo-one/node-storage-common\");\nconst common = tslib_1.__importStar(require(\"./common\"));\nconst convertChange_1 = require(\"./convertChange\");\nconst errors_1 = require(\"./errors\");\nconst read = tslib_1.__importStar(require(\"./read\"));\nexports.levelUpStorage = ({ db, context }) => {\n    const getHash = async ({ hashOrIndex }) => {\n        let hash = hashOrIndex;\n        if (typeof hash === 'number') {\n            try {\n                const result = await db.get(node_storage_common_1.keys.serializeHeaderIndexHashKey(hash));\n                hash = common.deserializeHeaderHash(result);\n            }\n            catch (error) {\n                if (error.notFound) {\n                    throw new errors_1.KeyNotFoundError(`${hash}`);\n                }\n                throw error;\n            }\n        }\n        return hash;\n    };\n    const headerBase = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.header,\n        deserializeValue: (buffer) => node_core_1.Header.deserializeWire({\n            context,\n            buffer,\n        }),\n    });\n    const getHeader = async ({ hashOrIndex }) => {\n        const hash = await getHash({ hashOrIndex });\n        return headerBase.get({ hash });\n    };\n    const header = {\n        get: getHeader,\n        tryGet: read.createTryGet({ get: getHeader }),\n        tryGetLatest: read.createTryGetLatest({\n            db,\n            latestKey: node_storage_common_1.keys.maxHeaderHashKey,\n            deserializeResult: (result) => ({\n                hash: common.deserializeHeaderHash(result),\n            }),\n            get: headerBase.get,\n        }),\n    };\n    const blockBase = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.block,\n        deserializeValue: (buffer) => node_core_1.Block.deserializeWire({\n            context,\n            buffer,\n        }),\n    });\n    const getBlock = async ({ hashOrIndex }) => {\n        const hash = await getHash({ hashOrIndex });\n        return blockBase.get({ hash });\n    };\n    const block = {\n        get: getBlock,\n        tryGet: read.createTryGet({ get: getBlock }),\n        tryGetLatest: read.createTryGetLatest({\n            db,\n            latestKey: node_storage_common_1.keys.maxBlockHashKey,\n            deserializeResult: (result) => ({\n                hash: common.deserializeBlockHash(result),\n            }),\n            get: blockBase.get,\n        }),\n    };\n    const transaction = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.transaction,\n        deserializeValue: (buffer) => node_core_1.deserializeTransactionWire({\n            context,\n            buffer,\n        }),\n    });\n    const output = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.output,\n        deserializeValue: (buffer) => node_core_1.Output.deserializeWire({ context, buffer }),\n    });\n    return {\n        header,\n        block,\n        blockData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.blockData,\n            deserializeValue: (buffer) => node_core_1.BlockData.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        account: read.createReadAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.account,\n            minKey: node_storage_common_1.keys.accountMinKey,\n            maxKey: node_storage_common_1.keys.accountMaxKey,\n            deserializeValue: (buffer) => node_core_1.Account.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        accountUnclaimed: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed,\n            getMinKey: node_storage_common_1.keys.getAccountUnclaimedKeyMin,\n            getMaxKey: node_storage_common_1.keys.getAccountUnclaimedKeyMax,\n            deserializeValue: (buffer) => node_core_1.AccountUnclaimed.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        accountUnspent: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent,\n            getMinKey: node_storage_common_1.keys.getAccountUnspentKeyMin,\n            getMaxKey: node_storage_common_1.keys.getAccountUnspentKeyMax,\n            deserializeValue: (buffer) => node_core_1.AccountUnspent.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        action: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.action,\n            getMinKey: node_storage_common_1.keys.getActionKeyMin,\n            getMaxKey: node_storage_common_1.keys.getActionKeyMax,\n            deserializeValue: (buffer) => node_core_1.deserializeActionWire({\n                context,\n                buffer,\n            }),\n        }),\n        asset: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.asset,\n            deserializeValue: (buffer) => node_core_1.Asset.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        transaction,\n        transactionData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.transactionData,\n            deserializeValue: (buffer) => node_core_1.TransactionData.deserializeWire({ context, buffer }),\n        }),\n        output,\n        contract: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.contract,\n            deserializeValue: (buffer) => node_core_1.Contract.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        storageItem: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem,\n            getMinKey: node_storage_common_1.keys.getStorageItemKeyMin,\n            getMaxKey: node_storage_common_1.keys.getStorageItemKeyMax,\n            deserializeValue: (buffer) => node_core_1.StorageItem.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        validator: read.createReadAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.validator,\n            minKey: node_storage_common_1.keys.validatorMinKey,\n            maxKey: node_storage_common_1.keys.validatorMaxKey,\n            deserializeValue: (buffer) => node_core_1.Validator.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        invocationData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.invocationData,\n            deserializeValue: (buffer) => node_core_1.InvocationData.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        validatorsCount: read.createReadMetadataStorage({\n            db,\n            key: node_storage_common_1.keys.validatorsCountKey,\n            deserializeValue: (buffer) => node_core_1.ValidatorsCount.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        async close() {\n            await db.close();\n        },\n        async commit(changeSet) {\n            const changesList = changeSet.map(convertChange_1.convertChange);\n            const changes = changesList.reduce((acc, converted) => {\n                acc.push(...converted);\n                return acc;\n            }, []);\n            await db.batch(changes);\n        },\n        async reset() {\n            const batch = [];\n            await new Promise((resolve, reject) => {\n                db.createKeyStream()\n                    .on('data', (key) => {\n                    batch.push({ type: 'del', key });\n                })\n                    .on('error', (error) => {\n                    reject(error);\n                })\n                    .on('end', () => {\n                    resolve();\n                });\n            });\n            await db.batch(batch);\n        },\n    };\n};\n\n//# sourceMappingURL=levelUpStorage.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst DELIMITER = '\\x00';\nconst createPrefix = (value) => `${value}${DELIMITER}`;\nconst MAX_CHAR = '\\xff';\nconst createMax = (value) => `${value}${MAX_CHAR}`;\nconst accountKeyPrefix = createPrefix('0');\nconst accountUnclaimedKeyPrefix = createPrefix('1');\nconst accountUnspentKeyPrefix = createPrefix('2');\nconst actionKeyPrefix = createPrefix('3');\nconst assetKeyPrefix = createPrefix('4');\nconst blockKeyPrefix = createPrefix('5');\nconst blockDataKeyPrefix = createPrefix('6');\nconst headerKeyPrefix = createPrefix('7');\nconst headerHashKeyPrefix = createPrefix('8');\nconst transactionKeyPrefix = createPrefix('9');\nconst outputKeyPrefix = createPrefix('a');\nconst transactionDataKeyPrefix = createPrefix('b');\nconst contractKeyPrefix = createPrefix('c');\nconst storageItemKeyPrefix = createPrefix('d');\nconst validatorKeyPrefix = createPrefix('e');\nconst invocationDataKeyPrefix = createPrefix('f');\nconst settingsPrefix = createPrefix('g');\nconst validatorsCountKey = createPrefix('h');\nconst serializeHeaderIndexHashKey = (index) => `${headerHashKeyPrefix}${index}`;\nconst maxHeaderHashKey = `${settingsPrefix}0`;\nconst maxBlockHashKey = `${settingsPrefix}1`;\nconst createSerializeAccountInputKey = (prefix) => ({ hash, input }) => `${prefix}${client_common_1.common.uInt160ToString(hash)}${client_common_1.common.uInt256ToString(input.hash)}${input.index}`;\nconst createGetAccountInputKeyMin = (prefix) => ({ hash }) => `${prefix}${client_common_1.common.uInt160ToString(hash)}`;\nconst createGetAccountInputKeyMax = (prefix) => ({ hash }) => createMax(`${prefix}${client_common_1.common.uInt160ToString(hash)}`);\nconst getAccountUnclaimedKeyMin = createGetAccountInputKeyMin(accountUnclaimedKeyPrefix);\nconst getAccountUnclaimedKeyMax = createGetAccountInputKeyMax(accountUnclaimedKeyPrefix);\nconst getAccountUnspentKeyMin = createGetAccountInputKeyMin(accountUnspentKeyPrefix);\nconst getAccountUnspentKeyMax = createGetAccountInputKeyMax(accountUnspentKeyPrefix);\nconst serializeStorageItemKey = ({ hash, key }) => `${storageItemKeyPrefix}${client_common_1.common.uInt160ToString(hash)}${key.toString('hex')}`;\nconst getStorageItemKeyMin = ({ hash, prefix }) => [\n    storageItemKeyPrefix,\n    hash === undefined ? undefined : client_common_1.common.uInt160ToString(hash),\n    prefix === undefined ? undefined : prefix.toString('hex'),\n]\n    .filter(utils_1.utils.notNull)\n    .join('');\nconst getStorageItemKeyMax = (key) => createMax(getStorageItemKeyMin(key));\nconst serializeActionKey = ({ index }) => `${actionKeyPrefix}${index.toString(10, 8)}`;\nconst getActionKeyMin = ({ indexStart }) => [actionKeyPrefix, indexStart === undefined ? undefined : indexStart.toString(10, 8)].filter(utils_1.utils.notNull).join('');\nconst getActionKeyMax = ({ indexStop }) => createMax([actionKeyPrefix, indexStop === undefined ? undefined : indexStop.toString(10, 8)].filter(utils_1.utils.notNull).join(''));\nconst serializeValidatorKey = ({ publicKey }) => `${validatorKeyPrefix}${client_common_1.common.ecPointToString(publicKey)}`;\nconst validatorMinKey = validatorKeyPrefix;\nconst validatorMaxKey = createMax(validatorKeyPrefix);\nconst serializeUInt160Key = ({ hash }) => client_common_1.common.uInt160ToString(hash);\nconst serializeUInt256Key = ({ hash }) => client_common_1.common.uInt256ToString(hash);\nconst createSerializeUInt160Key = (prefix) => (input) => `${prefix}${serializeUInt160Key(input)}`;\nconst createSerializeUInt256Key = (prefix) => (input) => `${prefix}${serializeUInt256Key(input)}`;\nconst accountMinKey = accountKeyPrefix;\nconst accountMaxKey = createMax(accountKeyPrefix);\nconst serializeOutputKey = ({ index, hash }) => `${outputKeyPrefix}${client_common_1.common.uInt256ToString(hash)}${index}`;\nconst typeKeyToSerializeKey = {\n    account: createSerializeUInt160Key(accountKeyPrefix),\n    accountUnclaimed: createSerializeAccountInputKey(accountUnclaimedKeyPrefix),\n    accountUnspent: createSerializeAccountInputKey(accountUnspentKeyPrefix),\n    action: serializeActionKey,\n    asset: createSerializeUInt256Key(assetKeyPrefix),\n    block: createSerializeUInt256Key(blockKeyPrefix),\n    blockData: createSerializeUInt256Key(blockDataKeyPrefix),\n    header: createSerializeUInt256Key(headerKeyPrefix),\n    transaction: createSerializeUInt256Key(transactionKeyPrefix),\n    output: serializeOutputKey,\n    transactionData: createSerializeUInt256Key(transactionDataKeyPrefix),\n    contract: createSerializeUInt160Key(contractKeyPrefix),\n    storageItem: serializeStorageItemKey,\n    validator: serializeValidatorKey,\n    invocationData: createSerializeUInt256Key(invocationDataKeyPrefix),\n};\nexports.keys = {\n    validatorsCountKey,\n    serializeHeaderIndexHashKey,\n    maxHeaderHashKey,\n    maxBlockHashKey,\n    getAccountUnclaimedKeyMin,\n    getAccountUnclaimedKeyMax,\n    getAccountUnspentKeyMin,\n    getAccountUnspentKeyMax,\n    getStorageItemKeyMin,\n    getStorageItemKeyMax,\n    serializeActionKey,\n    getActionKeyMin,\n    getActionKeyMax,\n    validatorMinKey,\n    validatorMaxKey,\n    accountMinKey,\n    accountMaxKey,\n    typeKeyToSerializeKey,\n};\n\n//# sourceMappingURL=keys.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst node_storage_common_1 = require(\"@neo-one/node-storage-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst common = tslib_1.__importStar(require(\"./common\"));\nconst errors_1 = require(\"./errors\");\nconst convertAddChange = (changeIn) => {\n    const change = changeIn;\n    switch (change.type) {\n        case 'account':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.account(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'accountUnspent':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent({\n                        hash: change.value.hash,\n                        input: change.value.input,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'accountUnclaimed':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed({\n                        hash: change.value.hash,\n                        input: change.value.input,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'action':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.action({\n                        index: change.value.index,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'asset':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.asset(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'block':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.block(change.value),\n                    value: change.value.serializeWire(),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.maxBlockHashKey,\n                    value: common.serializeBlockHash(change.value.hash),\n                },\n            ];\n        case 'blockData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.blockData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'header':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.header(change.value),\n                    value: change.value.serializeWire(),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.maxHeaderHashKey,\n                    value: common.serializeHeaderHash(change.value.hash),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.serializeHeaderIndexHashKey(change.value.index),\n                    value: common.serializeHeaderHash(change.value.hash),\n                },\n            ];\n        case 'transaction':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.transaction(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'output':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.output({\n                        hash: change.value.hash,\n                        index: change.value.index,\n                    }),\n                    value: change.value.output.serializeWire(),\n                },\n            ];\n        case 'transactionData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.transactionData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'contract':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.contract(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'storageItem':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem({\n                        hash: change.value.hash,\n                        key: change.value.key,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'validator':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.validator({\n                        publicKey: change.value.publicKey,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'invocationData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.invocationData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'validatorsCount':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.validatorsCountKey,\n                    value: change.value.serializeWire(),\n                },\n            ];\n        default:\n            utils_1.utils.assertNever(change);\n            throw new errors_1.UnknownTypeError(changeIn.type);\n    }\n};\nconst convertDeleteChange = (change) => {\n    switch (change.type) {\n        case 'account':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.account(change.key),\n            };\n        case 'accountUnspent':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent(change.key),\n            };\n        case 'accountUnclaimed':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed(change.key),\n            };\n        case 'contract':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.contract(change.key),\n            };\n        case 'storageItem':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem(change.key),\n            };\n        case 'validator':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.validator(change.key),\n            };\n        default:\n            utils_1.utils.assertNever(change);\n            throw new errors_1.UnknownTypeError();\n    }\n};\nexports.convertChange = (change) => {\n    if (change.type === 'add') {\n        return convertAddChange(change.change);\n    }\n    if (change.type === 'delete') {\n        return [convertDeleteChange(change.change)];\n    }\n    utils_1.utils.assertNever(change);\n    throw new errors_1.UnknownChangeTypeError();\n};\n\n//# sourceMappingURL=convertChange.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators_1 = require(\"rxjs/operators\");\nconst errors_1 = require(\"./errors\");\nconst streamToObservable_1 = require(\"./streamToObservable\");\nfunction createTryGet({ get, }) {\n    return async (key) => {\n        try {\n            const result = await get(key);\n            return result;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGet = createTryGet;\nfunction createTryGetLatest({ db, latestKey, deserializeResult, get, }) {\n    return async () => {\n        try {\n            const result = await db.get(latestKey);\n            const value = await get(deserializeResult(result));\n            return value;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGetLatest = createTryGetLatest;\nfunction createReadStorage({ db, serializeKey, deserializeValue, }) {\n    const get = async (key) => {\n        const serialized = serializeKey(key);\n        try {\n            const result = await db.get(serialized);\n            return deserializeValue(result);\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                throw new errors_1.KeyNotFoundError(serialized);\n            }\n            throw error;\n        }\n    };\n    return { get, tryGet: createTryGet({ get }) };\n}\nexports.createReadStorage = createReadStorage;\nfunction createAll$({ db, minKey, maxKey, deserializeValue, }) {\n    return streamToObservable_1.streamToObservable(() => db.createValueStream({\n        gte: minKey,\n        lte: maxKey,\n    })).pipe(operators_1.map(deserializeValue));\n}\nexports.createAll$ = createAll$;\nfunction createReadAllStorage({ db, serializeKey, minKey, maxKey, deserializeValue, }) {\n    const readStorage = createReadStorage({\n        db,\n        serializeKey,\n        deserializeValue,\n    });\n    return {\n        get: readStorage.get,\n        tryGet: readStorage.tryGet,\n        all$: createAll$({ db, minKey, maxKey, deserializeValue }),\n    };\n}\nexports.createReadAllStorage = createReadAllStorage;\nfunction createReadGetAllStorage({ db, serializeKey, getMinKey, getMaxKey, deserializeValue, }) {\n    const readStorage = createReadStorage({\n        db,\n        serializeKey,\n        deserializeValue,\n    });\n    return {\n        get: readStorage.get,\n        tryGet: readStorage.tryGet,\n        getAll$: (keys) => createAll$({\n            db,\n            minKey: getMinKey(keys),\n            maxKey: getMaxKey(keys),\n            deserializeValue,\n        }),\n    };\n}\nexports.createReadGetAllStorage = createReadGetAllStorage;\nfunction createTryGetMetadata({ get, }) {\n    return async () => {\n        try {\n            const result = await get();\n            return result;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGetMetadata = createTryGetMetadata;\nfunction createReadMetadataStorage({ db, key, deserializeValue, }) {\n    const get = async () => {\n        try {\n            const result = await db.get(key);\n            return deserializeValue(result);\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                throw new errors_1.KeyNotFoundError(key);\n            }\n            throw error;\n        }\n    };\n    return { get, tryGet: createTryGet({ get }) };\n}\nexports.createReadMetadataStorage = createReadMetadataStorage;\n\n//# sourceMappingURL=read.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rxjs_1 = require(\"rxjs\");\nexports.streamToObservable = (getStream) => new rxjs_1.Observable((observer) => {\n    const stream = getStream();\n    let done = false;\n    const cleanup = () => {\n        if (!done) {\n            done = true;\n            stream.removeListener('end', onEnd);\n            stream.removeListener('error', onError);\n            stream.removeListener('data', onData);\n        }\n    };\n    const onEnd = () => {\n        cleanup();\n        observer.complete();\n    };\n    const onError = (error) => {\n        cleanup();\n        observer.error(error);\n    };\n    const onData = (data) => observer.next(data);\n    stream.once('error', onError);\n    stream.once('end', onEnd);\n    stream.on('data', onData);\n    return cleanup;\n});\n\n//# sourceMappingURL=streamToObservable.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Blockchain_1 = require(\"./Blockchain\");\nexports.Blockchain = Blockchain_1.Blockchain;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst client_switch_1 = require(\"@neo-one/client-switch\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nconst js_priority_queue_1 = tslib_1.__importDefault(require(\"js-priority-queue\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst errors_1 = require(\"./errors\");\nconst getValidators_1 = require(\"./getValidators\");\nconst wrapExecuteScripts_1 = require(\"./wrapExecuteScripts\");\nconst WriteBatchBlockchain_1 = require(\"./WriteBatchBlockchain\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'blockchain' });\nconst blockFailures = client_switch_1.globalStats.createMeasureInt64('persist/failures', client_switch_1.MeasureUnit.UNIT);\nconst blockCurrent = client_switch_1.globalStats.createMeasureInt64('persist/current', client_switch_1.MeasureUnit.UNIT);\nconst blockProgress = client_switch_1.globalStats.createMeasureInt64('persist/progress', client_switch_1.MeasureUnit.UNIT);\nconst blockDurationMs = client_switch_1.globalStats.createMeasureDouble('persist/duration', client_switch_1.MeasureUnit.MS, 'time to persist block in milliseconds');\nconst blockLatencySec = client_switch_1.globalStats.createMeasureDouble('persist/latency', client_switch_1.MeasureUnit.SEC, \"'The latency from block timestamp to persist'\");\nconst NEO_BLOCKCHAIN_PERSIST_BLOCK_DURATION_MS = client_switch_1.globalStats.createView('neo_blockchain_persist_block_duration_ms', blockDurationMs, client_switch_1.AggregationType.DISTRIBUTION, [], 'distribution of the persist duration', [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000]);\nclient_switch_1.globalStats.registerView(NEO_BLOCKCHAIN_PERSIST_BLOCK_DURATION_MS);\nconst NEO_BLOCKCHAIN_PERSIST_BLOCK_FAILURES_TOTAL = client_switch_1.globalStats.createView('neo_blockchain_persist_block_failures_total', blockFailures, client_switch_1.AggregationType.COUNT, [], 'total blockchain failures');\nclient_switch_1.globalStats.registerView(NEO_BLOCKCHAIN_PERSIST_BLOCK_FAILURES_TOTAL);\nconst NEO_BLOCKCHAIN_BLOCK_INDEX_GAUGE = client_switch_1.globalStats.createView('neo_blockchain_block_index', blockCurrent, client_switch_1.AggregationType.LAST_VALUE, [], 'the current block index');\nclient_switch_1.globalStats.registerView(NEO_BLOCKCHAIN_BLOCK_INDEX_GAUGE);\nconst NEO_BLOCKCHAIN_PERSISTING_BLOCK_INDEX_GAUGE = client_switch_1.globalStats.createView('neo_blockchain_persisting_block_index', blockProgress, client_switch_1.AggregationType.LAST_VALUE, [], 'The current in progress persist index');\nclient_switch_1.globalStats.registerView(NEO_BLOCKCHAIN_PERSISTING_BLOCK_INDEX_GAUGE);\nconst NEO_BLOCKCHAIN_PERSIST_BLOCK_LATENCY_SECONDS = client_switch_1.globalStats.createView('neo_blockchain_persist_block_latency_seconds', blockLatencySec, client_switch_1.AggregationType.DISTRIBUTION, [], 'The latency from block timestamp to persist', [1, 2, 5, 7.5, 10, 12.5, 15, 17.5, 20]);\nclient_switch_1.globalStats.registerView(NEO_BLOCKCHAIN_PERSIST_BLOCK_LATENCY_SECONDS);\nclass Blockchain {\n    constructor(options) {\n        this.mutablePersistingBlocks = false;\n        this.mutableBlockQueue = new js_priority_queue_1.default({\n            comparator: (a, b) => a.block.index - b.block.index,\n        });\n        this.mutableInQueue = new Set();\n        this.mutableRunning = false;\n        this.mutableBlock$ = new rxjs_1.Subject();\n        this.getValidators = async (transactions) => {\n            logger.debug({ name: 'neo_blockchain_get_validators' });\n            return getValidators_1.getValidators(this, transactions);\n        };\n        this.calculateClaimAmount = async (claims) => {\n            logger.debug({ name: 'neo_blockchain_calculate_claim_amount' });\n            const spentCoins = await Promise.all(claims.map(async (claim) => this.tryGetSpentCoin(claim)));\n            const filteredSpentCoinsIn = spentCoins.filter(utils_1.utils.notNull);\n            if (spentCoins.length !== filteredSpentCoinsIn.length) {\n                throw new errors_1.CoinUnspentError(spentCoins.length - filteredSpentCoinsIn.length);\n            }\n            const filteredSpentCoins = filteredSpentCoinsIn.filter((spentCoin) => {\n                if (spentCoin.claimed) {\n                    throw new errors_1.CoinClaimedError(client_common_1.common.uInt256ToString(spentCoin.output.asset), spentCoin.output.value.toString(10));\n                }\n                if (!client_common_1.common.uInt256Equal(spentCoin.output.asset, this.settings.governingToken.hash)) {\n                    throw new errors_1.InvalidClaimError(client_common_1.common.uInt256ToString(spentCoin.output.asset), client_common_1.common.uInt256ToString(this.settings.governingToken.hash));\n                }\n                return true;\n            });\n            return node_core_1.utils.calculateClaimAmount({\n                coins: filteredSpentCoins.map((coin) => ({\n                    value: coin.output.value,\n                    startHeight: coin.startHeight,\n                    endHeight: coin.endHeight,\n                })),\n                decrementInterval: this.settings.decrementInterval,\n                generationAmount: this.settings.generationAmount,\n                getSystemFee: async (index) => {\n                    const header = await this.header.get({\n                        hashOrIndex: index,\n                    });\n                    const blockData = await this.blockData.get({\n                        hash: header.hash,\n                    });\n                    return blockData.systemFee;\n                },\n            });\n        };\n        this.verifyScript = async ({ scriptContainer, hash, witness, }) => {\n            let { verification } = witness;\n            if (verification.length === 0) {\n                const builder = new client_common_1.ScriptBuilder();\n                builder.emitAppCallVerification(hash);\n                verification = builder.build();\n            }\n            else if (!client_common_1.common.uInt160Equal(hash, client_common_1.crypto.toScriptHash(verification))) {\n                throw new errors_1.WitnessVerifyError();\n            }\n            const blockchain = this.createWriteBlockchain();\n            const mutableActions = [];\n            let globalActionIndex = new bn_js_1.BN(0);\n            const executeResult = await this.vm.executeScripts({\n                scripts: [{ code: witness.invocation }, { code: verification }],\n                blockchain,\n                scriptContainer,\n                triggerType: node_core_1.TriggerType.Verification,\n                action: node_core_1.NULL_ACTION,\n                gas: node_core_1.utils.ONE_HUNDRED_MILLION,\n                listeners: {\n                    onLog: ({ message, scriptHash }) => {\n                        mutableActions.push(new node_core_1.LogAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            message,\n                        }));\n                        globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                    },\n                    onNotify: ({ args, scriptHash }) => {\n                        mutableActions.push(new node_core_1.NotificationAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            args,\n                        }));\n                        globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                    },\n                },\n            });\n            const result = { actions: mutableActions, hash, witness };\n            const { stack, state, errorMessage } = executeResult;\n            if (state === client_common_1.VMState.Fault) {\n                return Object.assign(Object.assign({}, result), { failureMessage: errorMessage === undefined ? 'Script execution ended in a FAULT state' : errorMessage });\n            }\n            if (stack.length !== 1) {\n                return Object.assign(Object.assign({}, result), { failureMessage: `Verification did not return one result. This may be a bug in the ` +\n                        `smart contract compiler or the smart contract itself. If you are using the NEO•ONE compiler please file an issue. Found ${stack.length} results.` });\n            }\n            const top = stack[0];\n            if (!top.asBoolean()) {\n                return Object.assign(Object.assign({}, result), { failureMessage: 'Verification did not succeed.' });\n            }\n            return result;\n        };\n        this.tryGetInvocationData = async (transaction) => {\n            const data = await this.invocationData.tryGet({\n                hash: transaction.hash,\n            });\n            if (data === undefined) {\n                return undefined;\n            }\n            const [asset, contracts, actions] = await Promise.all([\n                data.assetHash === undefined ? Promise.resolve(undefined) : this.asset.get({ hash: data.assetHash }),\n                Promise.all(data.contractHashes.map(async (contractHash) => this.contract.tryGet({ hash: contractHash }))),\n                data.actionIndexStart.eq(data.actionIndexStop)\n                    ? Promise.resolve([])\n                    : this.action\n                        .getAll$({\n                        indexStart: data.actionIndexStart,\n                        indexStop: data.actionIndexStop.sub(node_core_1.utils.ONE),\n                    })\n                        .pipe(operators_1.toArray())\n                        .toPromise(),\n            ]);\n            return {\n                asset,\n                contracts: contracts.filter(utils_1.utils.notNull),\n                deletedContractHashes: data.deletedContractHashes,\n                migratedContractHashes: data.migratedContractHashes,\n                voteUpdates: data.voteUpdates,\n                result: data.result,\n                actions,\n                storageChanges: data.storageChanges,\n            };\n        };\n        this.tryGetTransactionData = async (transaction) => this.transactionData.tryGet({ hash: transaction.hash });\n        this.getUnclaimed = async (hash) => this.accountUnclaimed\n            .getAll$({ hash })\n            .pipe(operators_1.toArray())\n            .toPromise()\n            .then((values) => values.map((value) => value.input));\n        this.getUnspent = async (hash) => {\n            const unspent = await this.accountUnspent\n                .getAll$({ hash })\n                .pipe(operators_1.toArray())\n                .toPromise();\n            return unspent.map((value) => value.input);\n        };\n        this.getAllValidators = async () => this.validator.all$.pipe(operators_1.toArray()).toPromise();\n        this.isSpent = async (input) => {\n            const transactionData = await this.transactionData.tryGet({\n                hash: input.hash,\n            });\n            return (transactionData !== undefined && transactionData.endHeights[input.index] !== undefined);\n        };\n        this.tryGetSpentCoin = async (input) => {\n            const [transactionData, output] = await Promise.all([\n                this.transactionData.tryGet({ hash: input.hash }),\n                this.output.get(input),\n            ]);\n            if (transactionData === undefined) {\n                return undefined;\n            }\n            const endHeight = transactionData.endHeights[input.index];\n            if (endHeight === undefined) {\n                return undefined;\n            }\n            const claimed = transactionData.claimed[input.index];\n            return {\n                output,\n                startHeight: transactionData.startHeight,\n                endHeight,\n                claimed: !!claimed,\n            };\n        };\n        this.storage = options.storage;\n        this.mutableCurrentBlock = options.currentBlock;\n        this.mutablePreviousBlock = options.previousBlock;\n        this.mutableCurrentHeader = options.currentHeader;\n        this.vm = options.vm;\n        this.settings$ = new rxjs_1.BehaviorSubject(options.settings);\n        client_switch_1.globalStats.record([\n            {\n                measure: blockProgress,\n                value: this.currentBlockIndex,\n            },\n            {\n                measure: blockCurrent,\n                value: this.currentBlockIndex,\n            },\n        ]);\n        const self = this;\n        this.deserializeWireContext = {\n            get messageMagic() {\n                return self.settings.messageMagic;\n            },\n        };\n        this.feeContext = {\n            get getOutput() {\n                return self.output.get;\n            },\n            get governingToken() {\n                return self.settings.governingToken;\n            },\n            get utilityToken() {\n                return self.settings.utilityToken;\n            },\n            get fees() {\n                return self.settings.fees;\n            },\n            get registerValidatorFee() {\n                return self.settings.registerValidatorFee;\n            },\n        };\n        this.serializeJSONContext = {\n            get addressVersion() {\n                return self.settings.addressVersion;\n            },\n            get feeContext() {\n                return self.feeContext;\n            },\n            get tryGetInvocationData() {\n                return self.tryGetInvocationData;\n            },\n            get tryGetTransactionData() {\n                return self.tryGetTransactionData;\n            },\n            get getUnclaimed() {\n                return self.getUnclaimed;\n            },\n            get getUnspent() {\n                return self.getUnspent;\n            },\n        };\n        this.start();\n    }\n    static async create({ settings, storage, vm }) {\n        const [currentBlock, currentHeader] = await Promise.all([\n            storage.block.tryGetLatest(),\n            storage.header.tryGetLatest(),\n        ]);\n        let previousBlock;\n        if (currentBlock !== undefined) {\n            previousBlock = await storage.block.tryGet({ hashOrIndex: currentBlock.index - 1 });\n        }\n        const blockchain = new Blockchain({\n            currentBlock,\n            currentHeader,\n            previousBlock,\n            settings,\n            storage,\n            vm,\n        });\n        if (currentHeader === undefined) {\n            await blockchain.persistHeaders([settings.genesisBlock.header]);\n        }\n        if (currentBlock === undefined) {\n            await blockchain.persistBlock({ block: settings.genesisBlock });\n        }\n        return blockchain;\n    }\n    get settings() {\n        return this.settings$.getValue();\n    }\n    get currentBlock() {\n        if (this.mutableCurrentBlock === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.mutableCurrentBlock;\n    }\n    get previousBlock() {\n        return this.mutablePreviousBlock;\n    }\n    get currentHeader() {\n        if (this.mutableCurrentHeader === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.mutableCurrentHeader;\n    }\n    get currentBlockIndex() {\n        return this.mutableCurrentBlock === undefined ? -1 : this.currentBlock.index;\n    }\n    get block$() {\n        return this.mutableBlock$;\n    }\n    get isPersistingBlock() {\n        return this.mutablePersistingBlocks;\n    }\n    get account() {\n        return this.storage.account;\n    }\n    get accountUnclaimed() {\n        return this.storage.accountUnclaimed;\n    }\n    get accountUnspent() {\n        return this.storage.accountUnspent;\n    }\n    get action() {\n        return this.storage.action;\n    }\n    get asset() {\n        return this.storage.asset;\n    }\n    get block() {\n        return this.storage.block;\n    }\n    get blockData() {\n        return this.storage.blockData;\n    }\n    get header() {\n        return this.storage.header;\n    }\n    get transaction() {\n        return this.storage.transaction;\n    }\n    get transactionData() {\n        return this.storage.transactionData;\n    }\n    get output() {\n        return this.storage.output;\n    }\n    get contract() {\n        return this.storage.contract;\n    }\n    get storageItem() {\n        return this.storage.storageItem;\n    }\n    get validator() {\n        return this.storage.validator;\n    }\n    get invocationData() {\n        return this.storage.invocationData;\n    }\n    get validatorsCount() {\n        return this.storage.validatorsCount;\n    }\n    async stop() {\n        if (!this.mutableRunning) {\n            return;\n        }\n        if (this.mutablePersistingBlocks) {\n            const doneRunningPromise = new Promise((resolve) => {\n                this.mutableDoneRunningResolve = resolve;\n            });\n            this.mutableRunning = false;\n            await doneRunningPromise;\n            this.mutableDoneRunningResolve = undefined;\n        }\n        else {\n            this.mutableRunning = false;\n        }\n        logger.info({ name: 'neo_blockchain_stop' }, 'NEO blockchain stopped.');\n    }\n    updateSettings(settings) {\n        this.settings$.next(settings);\n    }\n    async persistBlock({ block, unsafe = false, }) {\n        return new Promise((resolve, reject) => {\n            if (this.mutableInQueue.has(block.hashHex)) {\n                resolve();\n                return;\n            }\n            this.mutableInQueue.add(block.hashHex);\n            this.mutableBlockQueue.queue({\n                block,\n                resolve,\n                reject,\n                unsafe,\n            });\n            this.persistBlocksAsync();\n        });\n    }\n    async persistHeaders(_headers) {\n    }\n    async verifyBlock(block) {\n        await block.verify({\n            genesisBlock: this.settings.genesisBlock,\n            tryGetBlock: this.block.tryGet,\n            tryGetHeader: this.header.tryGet,\n            isSpent: this.isSpent,\n            getAsset: this.asset.get,\n            getOutput: this.output.get,\n            tryGetAccount: this.account.tryGet,\n            getValidators: this.getValidators,\n            standbyValidators: this.settings.standbyValidators,\n            getAllValidators: this.getAllValidators,\n            calculateClaimAmount: async (claims) => this.calculateClaimAmount(claims),\n            verifyScript: async (options) => this.verifyScript(options),\n            currentHeight: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n            governingToken: this.settings.governingToken,\n            utilityToken: this.settings.utilityToken,\n            fees: this.settings.fees,\n            registerValidatorFee: this.settings.registerValidatorFee,\n        });\n    }\n    async verifyConsensusPayload(payload) {\n        await payload.verify({\n            getValidators: async () => this.getValidators([]),\n            verifyScript: async (options) => this.verifyScript(options),\n            currentIndex: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n            currentBlockHash: this.currentBlock.hash,\n        });\n    }\n    async verifyTransaction({ transaction, memPool, }) {\n        try {\n            const verifications = await transaction.verify({\n                calculateClaimAmount: this.calculateClaimAmount,\n                isSpent: this.isSpent,\n                getAsset: this.asset.get,\n                getOutput: this.output.get,\n                tryGetAccount: this.account.tryGet,\n                standbyValidators: this.settings.standbyValidators,\n                getAllValidators: this.getAllValidators,\n                verifyScript: async (options) => this.verifyScript(options),\n                governingToken: this.settings.governingToken,\n                utilityToken: this.settings.utilityToken,\n                fees: this.settings.fees,\n                registerValidatorFee: this.settings.registerValidatorFee,\n                currentHeight: this.currentBlockIndex,\n                memPool,\n            });\n            return { verifications };\n        }\n        catch (error) {\n            if (error.code === undefined || typeof error.code !== 'string' || !error.code.includes('VERIFY')) {\n                throw new errors_1.UnknownVerifyError(error.message);\n            }\n            throw error;\n        }\n    }\n    async invokeScript(script) {\n        const transaction = new node_core_1.InvocationTransaction({\n            script,\n            gas: client_common_1.common.ONE_HUNDRED_FIXED8,\n        });\n        return this.invokeTransaction(transaction);\n    }\n    async invokeTransaction(transaction) {\n        const blockchain = this.createWriteBlockchain();\n        const mutableActions = [];\n        let globalActionIndex = new bn_js_1.BN(0);\n        const result = await wrapExecuteScripts_1.wrapExecuteScripts(async () => this.vm.executeScripts({\n            scripts: [{ code: transaction.script }],\n            blockchain,\n            scriptContainer: {\n                type: node_core_1.ScriptContainerType.Transaction,\n                value: transaction,\n            },\n            listeners: {\n                onLog: ({ message, scriptHash }) => {\n                    mutableActions.push(new node_core_1.LogAction({\n                        index: globalActionIndex,\n                        scriptHash,\n                        message,\n                    }));\n                    globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                },\n                onNotify: ({ args, scriptHash }) => {\n                    mutableActions.push(new node_core_1.NotificationAction({\n                        index: globalActionIndex,\n                        scriptHash,\n                        args,\n                    }));\n                    globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                },\n            },\n            triggerType: node_core_1.TriggerType.Application,\n            action: node_core_1.NULL_ACTION,\n            gas: transaction.gas,\n            skipWitnessVerify: true,\n        }));\n        return {\n            result,\n            actions: mutableActions,\n        };\n    }\n    async reset() {\n        await this.stop();\n        await this.storage.reset();\n        this.mutableCurrentHeader = undefined;\n        this.mutableCurrentBlock = undefined;\n        this.mutablePreviousBlock = undefined;\n        this.start();\n        await this.persistHeaders([this.settings.genesisBlock.header]);\n        await this.persistBlock({ block: this.settings.genesisBlock });\n    }\n    async persistBlocksAsync() {\n        if (this.mutablePersistingBlocks || !this.mutableRunning) {\n            return;\n        }\n        this.mutablePersistingBlocks = true;\n        let entry;\n        try {\n            entry = this.cleanBlockQueue();\n            while (this.mutableRunning && entry !== undefined && entry.block.index === this.currentBlockIndex + 1) {\n                const startTime = Date.now();\n                const entryNonNull = entry;\n                const logData = {\n                    [utils_1.Labels.NEO_BLOCK_INDEX]: entry.block.index,\n                    name: 'neo_blockchain_persist_block_top_level',\n                };\n                try {\n                    await this.persistBlockInternal(entryNonNull.block, entryNonNull.unsafe);\n                    logger.debug(logData);\n                    client_switch_1.globalStats.record([\n                        {\n                            measure: blockDurationMs,\n                            value: Date.now() - startTime,\n                        },\n                    ]);\n                }\n                catch (err) {\n                    logger.error(Object.assign({ err }, logData));\n                    client_switch_1.globalStats.record([\n                        {\n                            measure: blockFailures,\n                            value: 1,\n                        },\n                    ]);\n                    throw err;\n                }\n                entry.resolve();\n                this.mutableBlock$.next(entry.block);\n                client_switch_1.globalStats.record([\n                    {\n                        measure: blockCurrent,\n                        value: entry.block.index,\n                    },\n                    {\n                        measure: blockLatencySec,\n                        value: utils_1.utils.nowSeconds() - entry.block.timestamp,\n                    },\n                ]);\n                entry = this.cleanBlockQueue();\n            }\n            if (entry !== undefined) {\n                this.mutableBlockQueue.queue(entry);\n            }\n        }\n        catch (error) {\n            if (entry !== undefined) {\n                entry.reject(error);\n            }\n        }\n        finally {\n            this.mutablePersistingBlocks = false;\n            if (this.mutableDoneRunningResolve !== undefined) {\n                this.mutableDoneRunningResolve();\n                this.mutableDoneRunningResolve = undefined;\n            }\n        }\n    }\n    cleanBlockQueue() {\n        let entry = this.dequeBlockQueue();\n        while (entry !== undefined && entry.block.index <= this.currentBlockIndex) {\n            entry.resolve();\n            entry = this.dequeBlockQueue();\n        }\n        return entry;\n    }\n    dequeBlockQueue() {\n        if (this.mutableBlockQueue.length > 0) {\n            return this.mutableBlockQueue.dequeue();\n        }\n        return undefined;\n    }\n    start() {\n        this.mutableBlock$ = new rxjs_1.Subject();\n        this.mutablePersistingBlocks = false;\n        this.mutableBlockQueue = new js_priority_queue_1.default({\n            comparator: (a, b) => a.block.index - b.block.index,\n        });\n        this.mutableInQueue = new Set();\n        this.mutableDoneRunningResolve = undefined;\n        this.mutableRunning = true;\n        logger.info({ name: 'neo_blockchain_start' }, 'NEO blockchain started.');\n    }\n    async persistBlockInternal(block, unsafe) {\n        client_switch_1.globalStats.record([\n            {\n                measure: blockProgress,\n                value: block.index,\n            },\n        ]);\n        if (!unsafe) {\n            await this.verifyBlock(block);\n        }\n        const blockchain = this.createWriteBlockchain();\n        await blockchain.persistBlock(block);\n        await this.storage.commit(blockchain.getChangeSet());\n        this.mutablePreviousBlock = this.mutableCurrentBlock;\n        this.mutableCurrentBlock = block;\n        this.mutableCurrentHeader = block.header;\n    }\n    createWriteBlockchain() {\n        return new WriteBatchBlockchain_1.WriteBatchBlockchain({\n            settings: this.settings,\n            currentBlock: this.mutableCurrentBlock,\n            currentHeader: this.mutableCurrentHeader,\n            storage: this.storage,\n            vm: this.vm,\n            getValidators: this.getValidators,\n        });\n    }\n}\nexports.Blockchain = Blockchain;\n\n//# sourceMappingURL=Blockchain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst logger_config_1 = require(\"@neo-one/logger-config\");\nconst pino_1 = tslib_1.__importDefault(require(\"pino\"));\nconst createLogger = (service, options = {}) => options.browser !== undefined\n    ? pino_1.default(Object.assign(Object.assign({}, options), { base: { service }, prettyPrint: logger_config_1.getPretty() }))\n    : pino_1.default(Object.assign(Object.assign({}, options), { base: { service }, prettyPrint: logger_config_1.getPretty() }), process.env.NODE_ENV === 'production' ? pino_1.default.extreme(1) : pino_1.default.destination(1));\nconst browserOptions = typeof window === 'undefined' && typeof origin === 'undefined' ? {} : { browser: { asObject: true } };\nexports.editorLogger = createLogger('editor-server', browserOptions);\nexports.serverLogger = createLogger('server', browserOptions);\nexports.nodeLogger = createLogger('node', browserOptions);\nexports.rpcLogger = createLogger('rpc', browserOptions);\nexports.cliLogger = createLogger('cli', browserOptions);\nexports.httpLogger = createLogger('http', browserOptions);\nexports.testLogger = createLogger('test', browserOptions);\nlet loggers = [\n    exports.editorLogger,\n    exports.serverLogger,\n    exports.nodeLogger,\n    exports.rpcLogger,\n    exports.cliLogger,\n    exports.httpLogger,\n    exports.testLogger,\n];\nexports.setGlobalLogLevel = (level) => loggers.forEach((logger) => {\n    logger.level = level;\n});\nexports.getFinalLogger = (logger) => pino_1.default.final(logger);\nexports.createChild = (parent, bindings) => {\n    const child = parent.child(bindings);\n    loggers = loggers.concat(child);\n    return child;\n};\n\n//# sourceMappingURL=loggers.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./pretty\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet pretty = false;\nexports.getPretty = () => pretty;\nexports.setPretty = (newPretty) => {\n    pretty = newPretty;\n};\n\n//# sourceMappingURL=pretty.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst operators_1 = require(\"rxjs/operators\");\nclass ValidatorCache {\n    constructor(blockchain) {\n        this.blockchain = blockchain;\n        this.mutableAccounts = {};\n        this.mutableValidators = {};\n    }\n    async getAccount(hash) {\n        let account = this.mutableAccounts[client_common_1.common.uInt160ToHex(hash)];\n        if (account === undefined) {\n            account = await this.blockchain.account.tryGet({ hash });\n        }\n        if (account === undefined) {\n            account = new node_core_1.Account({ hash });\n        }\n        this.mutableAccounts[client_common_1.common.uInt160ToHex(hash)] = account;\n        return account;\n    }\n    async updateAccountBalance(hash, asset, value) {\n        const assetHex = client_common_1.common.uInt256ToHex(asset);\n        await this.getAccount(hash);\n        const hashHex = client_common_1.common.uInt160ToHex(hash);\n        const account = this.mutableAccounts[hashHex];\n        const balance = account.balances[assetHex];\n        this.mutableAccounts[hashHex] = account.update({\n            balances: Object.assign(Object.assign({}, account.balances), { [assetHex]: value.add(balance === undefined ? client_common_1.utils.ZERO : balance) }),\n        });\n    }\n    async getValidator(publicKey) {\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        let validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            validator = await this.blockchain.validator.tryGet({ publicKey });\n        }\n        if (validator === undefined) {\n            validator = new node_core_1.Validator({ publicKey });\n        }\n        this.mutableValidators[publicKeyHex] = validator;\n        return validator;\n    }\n    async addValidator(validator) {\n        this.mutableValidators[client_common_1.common.ecPointToHex(validator.publicKey)] = validator;\n    }\n    async deleteValidator(publicKey) {\n        this.mutableValidators[client_common_1.common.ecPointToHex(publicKey)] = undefined;\n    }\n    async updateValidatorVotes(publicKey, value) {\n        await this.getValidator(publicKey);\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        const validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            throw new Error('For Flow');\n        }\n        this.mutableValidators[publicKeyHex] = validator.update({\n            votes: validator.votes.add(value),\n        });\n    }\n    async updateValidator(publicKey, update) {\n        await this.getValidator(publicKey);\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        const validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            throw new Error('For Flow');\n        }\n        const newValidator = validator.update(update);\n        this.mutableValidators[publicKeyHex] = newValidator;\n        return newValidator;\n    }\n    async getAllValidators() {\n        const validators = await this.blockchain.validator.all$.pipe(operators_1.toArray()).toPromise();\n        const mutablePublicKeyToValidator = lodash_1.default.fromPairs(validators.map((validator) => [client_common_1.common.ecPointToHex(validator.publicKey), validator]));\n        Object.entries(this.mutableValidators).forEach(([publicKey, validator]) => {\n            const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n            if (validator === undefined) {\n                delete mutablePublicKeyToValidator[publicKeyHex];\n            }\n            else {\n                mutablePublicKeyToValidator[publicKeyHex] = validator;\n            }\n        });\n        return Object.values(mutablePublicKeyToValidator);\n    }\n    async getValidatorsCount() {\n        let validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            validatorsCount = await this.blockchain.validatorsCount.tryGet();\n        }\n        if (validatorsCount === undefined) {\n            validatorsCount = new node_core_1.ValidatorsCount();\n        }\n        this.mutableValidatorsCount = validatorsCount;\n        return validatorsCount;\n    }\n    async updateValidatorsCountVotes(index, value) {\n        await this.getValidatorsCount();\n        const validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            throw new Error('For Flow');\n        }\n        const votes = validatorsCount.votes[index];\n        this.mutableValidatorsCount = validatorsCount.update({\n            votes: validatorsCount.votes\n                .slice(0, index)\n                .concat((votes === undefined ? client_common_1.utils.ZERO : votes).add(value))\n                .concat(validatorsCount.votes.slice(index + 1)),\n        });\n    }\n    async addValidatorsCount(validatorsCount) {\n        this.mutableValidatorsCount = validatorsCount;\n    }\n    async updateValidatorsCount(update) {\n        await this.getValidatorsCount();\n        const validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            throw new Error('For Flow');\n        }\n        this.mutableValidatorsCount = validatorsCount.update(update);\n        return this.mutableValidatorsCount;\n    }\n}\nexports.ValidatorCache = ValidatorCache;\n\n//# sourceMappingURL=ValidatorCache.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst errors_1 = require(\"./errors\");\nconst getValidators_1 = require(\"./getValidators\");\nconst StorageCache_1 = require(\"./StorageCache\");\nconst wrapExecuteScripts_1 = require(\"./wrapExecuteScripts\");\nclass WriteBatchBlockchain {\n    constructor(options) {\n        this.settings = options.settings;\n        this.currentBlockInternal = options.currentBlock;\n        this.currentHeaderInternal = options.currentHeader;\n        this.storage = options.storage;\n        this.vm = options.vm;\n        this.getValidators = options.getValidators;\n        const output = new StorageCache_1.OutputStorageCache(() => this.storage.output);\n        this.caches = {\n            account: new StorageCache_1.ReadAllAddUpdateDeleteStorageCache({\n                name: 'account',\n                readAllStorage: () => this.storage.account,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt160ToString(key.hash),\n                createAddChange: (value) => ({ type: 'account', value }),\n                createDeleteChange: (key) => ({ type: 'account', key }),\n            }),\n            accountUnspent: new StorageCache_1.ReadGetAllAddDeleteStorageCache({\n                name: 'accountUnspent',\n                readGetAllStorage: () => this.storage.accountUnspent,\n                getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${client_common_1.common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n                matchesPartialKey: (value, key) => client_common_1.common.uInt160Equal(value.hash, key.hash),\n                createAddChange: (value) => ({ type: 'accountUnspent', value }),\n                createDeleteChange: (key) => ({ type: 'accountUnspent', key }),\n            }),\n            accountUnclaimed: new StorageCache_1.ReadGetAllAddDeleteStorageCache({\n                name: 'accountUnclaimed',\n                readGetAllStorage: () => this.storage.accountUnclaimed,\n                getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${client_common_1.common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n                matchesPartialKey: (value, key) => client_common_1.common.uInt160Equal(value.hash, key.hash),\n                createAddChange: (value) => ({ type: 'accountUnclaimed', value }),\n                createDeleteChange: (key) => ({ type: 'accountUnclaimed', key }),\n            }),\n            action: new StorageCache_1.ReadGetAllAddStorageCache({\n                name: 'action',\n                readGetAllStorage: () => this.storage.action,\n                getKeyFromValue: (value) => ({\n                    index: value.index,\n                }),\n                getKeyString: (key) => key.index.toString(10),\n                matchesPartialKey: (value, key) => (key.indexStart === undefined || value.index.gte(key.indexStart)) &&\n                    (key.indexStop === undefined || value.index.lte(key.indexStop)),\n                createAddChange: (value) => ({ type: 'action', value }),\n            }),\n            asset: new StorageCache_1.ReadAddUpdateStorageCache({\n                name: 'asset',\n                readStorage: () => this.storage.asset,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'asset', value }),\n            }),\n            block: new StorageCache_1.BlockLikeStorageCache({\n                name: 'block',\n                readStorage: () => ({\n                    get: this.storage.block.get,\n                    tryGet: this.storage.block.tryGet,\n                }),\n                createAddChange: (value) => ({ type: 'block', value }),\n            }),\n            blockData: new StorageCache_1.ReadAddStorageCache({\n                name: 'blockData',\n                readStorage: () => this.storage.blockData,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'blockData', value }),\n            }),\n            header: new StorageCache_1.BlockLikeStorageCache({\n                name: 'header',\n                readStorage: () => ({\n                    get: this.storage.header.get,\n                    tryGet: this.storage.header.tryGet,\n                }),\n                createAddChange: (value) => ({ type: 'header', value }),\n            }),\n            transaction: new StorageCache_1.ReadAddStorageCache({\n                name: 'transaction',\n                readStorage: () => this.storage.transaction,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'transaction', value }),\n                onAdd: async (value) => {\n                    await Promise.all(value.outputs.map(async (out, index) => output.add({ hash: value.hash, index, output: out })));\n                },\n                allowDupes: true,\n            }),\n            transactionData: new StorageCache_1.ReadAddUpdateStorageCache({\n                name: 'transactionData',\n                readStorage: () => this.storage.transactionData,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'transactionData', value }),\n                allowDupes: true,\n            }),\n            output,\n            contract: new StorageCache_1.ReadAddDeleteStorageCache({\n                name: 'contract',\n                readStorage: () => this.storage.contract,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt160ToString(key.hash),\n                createAddChange: (value) => ({ type: 'contract', value }),\n                createDeleteChange: (key) => ({ type: 'contract', key }),\n            }),\n            storageItem: new StorageCache_1.ReadGetAllAddUpdateDeleteStorageCache({\n                name: 'storageItem',\n                readGetAllStorage: () => this.storage.storageItem,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({\n                    hash: value.hash,\n                    key: value.key,\n                }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${key.key.toString('hex')}`,\n                matchesPartialKey: (value, key) => (key.hash === undefined || client_common_1.common.uInt160Equal(value.hash, key.hash)) &&\n                    (key.prefix === undefined || key.prefix.every((byte, idx) => value.key[idx] === byte)),\n                createAddChange: (value) => ({ type: 'storageItem', value }),\n                createDeleteChange: (key) => ({ type: 'storageItem', key }),\n            }),\n            validator: new StorageCache_1.ReadAllAddUpdateDeleteStorageCache({\n                name: 'validator',\n                readAllStorage: () => this.storage.validator,\n                getKeyFromValue: (value) => ({ publicKey: value.publicKey }),\n                getKeyString: (key) => client_common_1.common.ecPointToString(key.publicKey),\n                createAddChange: (value) => ({ type: 'validator', value }),\n                update: (value, update) => value.update(update),\n                createDeleteChange: (key) => ({ type: 'validator', key }),\n            }),\n            invocationData: new StorageCache_1.ReadAddStorageCache({\n                name: 'invocationData',\n                readStorage: () => this.storage.invocationData,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'invocationData', value }),\n            }),\n            validatorsCount: new StorageCache_1.ReadAddUpdateMetadataStorageCache({\n                name: 'validatorsCount',\n                readStorage: () => this.storage.validatorsCount,\n                createAddChange: (value) => ({ type: 'validatorsCount', value }),\n                update: (value, update) => value.update(update),\n            }),\n        };\n        this.account = this.caches.account;\n        this.accountUnspent = this.caches.accountUnspent;\n        this.accountUnclaimed = this.caches.accountUnclaimed;\n        this.action = this.caches.action;\n        this.asset = this.caches.asset;\n        this.block = this.caches.block;\n        this.blockData = this.caches.blockData;\n        this.header = this.caches.header;\n        this.transaction = this.caches.transaction;\n        this.transactionData = this.caches.transactionData;\n        this.output = this.caches.output;\n        this.contract = this.caches.contract;\n        this.storageItem = this.caches.storageItem;\n        this.validator = this.caches.validator;\n        this.invocationData = this.caches.invocationData;\n        this.validatorsCount = this.caches.validatorsCount;\n    }\n    get currentBlock() {\n        if (this.currentBlockInternal === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.currentBlockInternal;\n    }\n    get currentBlockIndex() {\n        return this.currentBlockInternal === undefined ? 0 : this.currentBlockInternal.index;\n    }\n    get currentHeader() {\n        if (this.currentHeaderInternal === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.currentHeaderInternal;\n    }\n    getChangeSet() {\n        return Object.values(this.caches).reduce((acc, cache) => acc.concat(cache.getChangeSet()), []);\n    }\n    getTrackedChangeSet() {\n        return Object.values(this.caches).reduce((acc, cache) => acc.concat(cache.getTrackedChangeSet()), []);\n    }\n    async persistBlock(block) {\n        const [maybePrevBlockData, outputContractsList] = await Promise.all([\n            block.index === 0 ? Promise.resolve(undefined) : this.blockData.get({ hash: block.previousHash }),\n            Promise.all([\n                ...new Set(block.transactions.reduce((acc, transaction) => acc.concat(transaction.outputs.map((output) => client_common_1.common.uInt160ToString(output.address))), [])),\n            ].map(async (hash) => this.contract.tryGet({ hash: client_common_1.common.stringToUInt160(hash) }))),\n            this.block.add(block),\n            this.header.add(block.header),\n        ]);\n        const prevBlockData = maybePrevBlockData === undefined\n            ? {\n                lastGlobalTransactionIndex: client_common_1.utils.NEGATIVE_ONE,\n                lastGlobalActionIndex: client_common_1.utils.NEGATIVE_ONE,\n                systemFee: client_common_1.utils.ZERO,\n            }\n            : {\n                lastGlobalTransactionIndex: maybePrevBlockData.lastGlobalTransactionIndex,\n                lastGlobalActionIndex: maybePrevBlockData.lastGlobalActionIndex,\n                systemFee: maybePrevBlockData.systemFee,\n            };\n        const outputContracts = {};\n        outputContractsList.filter(utils_1.utils.notNull).forEach((outputContract) => {\n            outputContracts[outputContract.hashHex] = outputContract;\n        });\n        const [utxo, rest] = lodash_1.default.partition(block.transactions.map((transaction, idx) => [idx, transaction]), ([idx, transaction]) => ((transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction) ||\n            (transaction.type === node_core_1.TransactionType.Contract && transaction instanceof node_core_1.ContractTransaction) ||\n            (transaction.type === node_core_1.TransactionType.Miner && transaction instanceof node_core_1.MinerTransaction)) &&\n            !transaction.outputs.some((output) => outputContracts[client_common_1.common.uInt160ToString(output.address)] !== undefined));\n        const [globalActionIndex] = await Promise.all([\n            rest.length > 0\n                ? this.persistTransactions(block, rest, prevBlockData.lastGlobalTransactionIndex, prevBlockData.lastGlobalActionIndex)\n                : Promise.resolve(prevBlockData.lastGlobalActionIndex),\n            utxo.length > 0\n                ?\n                    this.persistUTXOTransactions(block, utxo, prevBlockData.lastGlobalTransactionIndex)\n                : Promise.resolve(),\n        ]);\n        await this.blockData.add(new node_core_1.BlockData({\n            hash: block.hash,\n            lastGlobalTransactionIndex: prevBlockData.lastGlobalTransactionIndex.add(new bn_js_1.BN(block.transactions.length)),\n            lastGlobalActionIndex: globalActionIndex,\n            systemFee: prevBlockData.systemFee.add(block.getSystemFee({\n                getOutput: this.output.get,\n                governingToken: this.settings.governingToken,\n                utilityToken: this.settings.utilityToken,\n                fees: this.settings.fees,\n                registerValidatorFee: this.settings.registerValidatorFee,\n            })),\n        }));\n    }\n    async persistUTXOTransactions(block, transactions, lastGlobalTransactionIndex) {\n        const inputs = [];\n        const claims = [];\n        const outputWithInputs = [];\n        for (const idxAndTransaction of transactions) {\n            const transaction = idxAndTransaction[1];\n            inputs.push(...transaction.inputs);\n            if (transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction) {\n                claims.push(...transaction.claims);\n            }\n            outputWithInputs.push(...this.getOutputWithInput(transaction));\n        }\n        await Promise.all([\n            Promise.all(transactions.map(async ([idx, transaction]) => this.transaction.add(transaction))),\n            Promise.all(transactions.map(async ([idx, transaction]) => this.transactionData.add(new node_core_1.TransactionData({\n                hash: transaction.hash,\n                startHeight: block.index,\n                blockHash: block.hash,\n                index: idx,\n                globalIndex: lastGlobalTransactionIndex.add(new bn_js_1.BN(idx + 1)),\n            })))),\n            this.updateAccounts(inputs, claims, outputWithInputs),\n            this.updateCoins(inputs, claims, block),\n        ]);\n    }\n    async persistTransactions(block, transactions, lastGlobalTransactionIndex, lastGlobalActionIndex) {\n        let globalActionIndex = lastGlobalActionIndex.add(client_common_1.utils.ONE);\n        for (const [idx, transaction] of transactions) {\n            globalActionIndex = await this.persistTransaction(block, transaction, idx, lastGlobalTransactionIndex, globalActionIndex);\n        }\n        return globalActionIndex.sub(client_common_1.utils.ONE);\n    }\n    async persistTransaction(block, transactionIn, transactionIndex, lastGlobalTransactionIndex, globalActionIndexIn) {\n        let globalActionIndex = globalActionIndexIn;\n        const transaction = transactionIn;\n        const claims = transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction ? transaction.claims : [];\n        let accountChanges = {};\n        let validatorChanges = {};\n        let validatorsCountChanges = [];\n        if (transaction.type === node_core_1.TransactionType.State && transaction instanceof node_core_1.StateTransaction) {\n            ({ accountChanges, validatorChanges, validatorsCountChanges } = await getValidators_1.getDescriptorChanges({\n                transactions: [transaction],\n                getAccount: async (hash) => this.account.tryGet({ hash }).then((account) => (account === undefined ? new node_core_1.Account({ hash }) : account)),\n                governingTokenHash: this.settings.governingToken.hashHex,\n            }));\n        }\n        await Promise.all([\n            this.transaction.add(transaction),\n            this.transactionData.add(new node_core_1.TransactionData({\n                hash: transaction.hash,\n                blockHash: block.hash,\n                startHeight: block.index,\n                index: transactionIndex,\n                globalIndex: lastGlobalTransactionIndex.add(new bn_js_1.BN(transactionIndex + 1)),\n            })),\n            this.updateAccounts(transaction.inputs, claims, this.getOutputWithInput(transaction), accountChanges),\n            this.updateCoins(transaction.inputs, claims, block),\n            this.processStateTransaction(validatorChanges, validatorsCountChanges),\n        ]);\n        if (transaction.type === node_core_1.TransactionType.Register && transaction instanceof node_core_1.RegisterTransaction) {\n            await this.asset.add(new node_core_1.Asset({\n                hash: transaction.hash,\n                type: transaction.asset.type,\n                name: transaction.asset.name,\n                amount: transaction.asset.amount,\n                precision: transaction.asset.precision,\n                owner: transaction.asset.owner,\n                admin: transaction.asset.admin,\n                issuer: transaction.asset.admin,\n                expiration: this.currentBlockIndex + 2 * 2000000,\n                isFrozen: false,\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Issue && transaction instanceof node_core_1.IssueTransaction) {\n            const results = await Promise.all(Object.entries(transaction.getTransactionResults({\n                getOutput: this.output.get,\n            })));\n            await Promise.all(results.map(async ([assetHex, value]) => {\n                const hash = client_common_1.common.stringToUInt256(assetHex);\n                const asset = await this.asset.get({ hash });\n                await this.asset.update(asset, {\n                    available: asset.available.add(value.neg()),\n                });\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Enrollment && transaction instanceof node_core_1.EnrollmentTransaction) {\n            await this.validator.add(new node_core_1.Validator({\n                publicKey: transaction.publicKey,\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Publish && transaction instanceof node_core_1.PublishTransaction) {\n            const contract = await this.contract.tryGet({\n                hash: transaction.contract.hash,\n            });\n            if (contract === undefined) {\n                await this.contract.add(transaction.contract);\n            }\n        }\n        else if (transaction.type === node_core_1.TransactionType.Invocation && transaction instanceof node_core_1.InvocationTransaction) {\n            const temporaryBlockchain = new WriteBatchBlockchain({\n                settings: this.settings,\n                currentBlock: this.currentBlockInternal,\n                currentHeader: this.currentHeader,\n                storage: this,\n                vm: this.vm,\n                getValidators: this.getValidators,\n            });\n            const migratedContractHashes = [];\n            const voteUpdates = [];\n            const actions = [];\n            const result = await wrapExecuteScripts_1.wrapExecuteScripts(async () => this.vm.executeScripts({\n                scripts: [{ code: transaction.script }],\n                blockchain: temporaryBlockchain,\n                scriptContainer: {\n                    type: node_core_1.ScriptContainerType.Transaction,\n                    value: transaction,\n                },\n                triggerType: node_core_1.TriggerType.Application,\n                action: {\n                    blockIndex: block.index,\n                    blockHash: block.hash,\n                    transactionIndex,\n                    transactionHash: transaction.hash,\n                },\n                gas: transaction.gas,\n                listeners: {\n                    onLog: ({ message, scriptHash }) => {\n                        actions.push(new node_core_1.LogAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            message,\n                        }));\n                        globalActionIndex = globalActionIndex.add(client_common_1.utils.ONE);\n                    },\n                    onNotify: ({ args, scriptHash }) => {\n                        actions.push(new node_core_1.NotificationAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            args,\n                        }));\n                        globalActionIndex = globalActionIndex.add(client_common_1.utils.ONE);\n                    },\n                    onMigrateContract: ({ from, to }) => {\n                        migratedContractHashes.push([from, to]);\n                    },\n                    onSetVotes: ({ address, votes }) => {\n                        voteUpdates.push([address, votes]);\n                    },\n                },\n                persistingBlock: block,\n            }));\n            const addActionsPromise = Promise.all(actions.map(async (action) => this.action.add(action)));\n            if (result instanceof node_core_1.InvocationResultSuccess) {\n                const assetChangeSet = temporaryBlockchain.asset.getChangeSet();\n                const assetHash = assetChangeSet\n                    .map((change) => change.type === 'add' && change.change.type === 'asset' ? change.change.value.hash : undefined)\n                    .find((value) => value !== undefined);\n                const contractsChangeSet = temporaryBlockchain.contract.getChangeSet();\n                const contractHashes = contractsChangeSet\n                    .map((change) => change.type === 'add' && change.change.type === 'contract' ? change.change.value.hash : undefined)\n                    .filter(utils_1.utils.notNull);\n                const deletedContractHashes = contractsChangeSet\n                    .map((change) => change.type === 'delete' && change.change.type === 'contract' ? change.change.key.hash : undefined)\n                    .filter(utils_1.utils.notNull);\n                const storageChanges = temporaryBlockchain.storageItem\n                    .getChangeSet()\n                    .map((change) => {\n                    const addChange = change.type === 'add' && change.change.type === 'storageItem'\n                        ? { value: change.change.value, subType: change.subType }\n                        : undefined;\n                    if (addChange !== undefined) {\n                        const options = {\n                            hash: addChange.value.hash,\n                            key: addChange.value.key,\n                            value: addChange.value.value,\n                        };\n                        return addChange.subType === 'add' ? new node_core_1.StorageChangeAdd(options) : new node_core_1.StorageChangeModify(options);\n                    }\n                    const deleteChange = change.type === 'delete' && change.change.type === 'storageItem' ? change.change.key : undefined;\n                    if (deleteChange !== undefined) {\n                        return new node_core_1.StorageChangeDelete(deleteChange);\n                    }\n                    return undefined;\n                })\n                    .filter(utils_1.utils.notNull);\n                temporaryBlockchain.getTrackedChangeSet().forEach((change) => {\n                    this.caches[change.type].addTrackedChange(change.key, change.value);\n                });\n                await Promise.all([\n                    this.invocationData.add(new node_core_1.InvocationData({\n                        hash: transaction.hash,\n                        assetHash,\n                        contractHashes,\n                        deletedContractHashes,\n                        migratedContractHashes,\n                        voteUpdates,\n                        blockIndex: block.index,\n                        transactionIndex,\n                        actionIndexStart: globalActionIndexIn,\n                        actionIndexStop: globalActionIndex,\n                        result,\n                        storageChanges,\n                    })),\n                    addActionsPromise,\n                ]);\n            }\n            else {\n                await Promise.all([\n                    this.invocationData.add(new node_core_1.InvocationData({\n                        hash: transaction.hash,\n                        assetHash: undefined,\n                        contractHashes: [],\n                        deletedContractHashes: [],\n                        migratedContractHashes: [],\n                        voteUpdates: [],\n                        blockIndex: block.index,\n                        transactionIndex,\n                        actionIndexStart: globalActionIndexIn,\n                        actionIndexStop: globalActionIndex,\n                        result,\n                        storageChanges: [],\n                    })),\n                    addActionsPromise,\n                ]);\n            }\n        }\n        return globalActionIndex;\n    }\n    async processStateTransaction(validatorChanges, validatorsCountChanges) {\n        const validatorsCount = await this.validatorsCount.tryGet();\n        const validatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n        for (const [index, value] of validatorsCountChanges.entries()) {\n            validatorsCountVotes[index] = value;\n        }\n        await Promise.all([\n            Promise.all(Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n                const publicKey = client_common_1.common.hexToECPoint(publicKeyHex);\n                const validator = await this.validator.tryGet({ publicKey });\n                if (validator === undefined) {\n                    await this.validator.add(new node_core_1.Validator({\n                        publicKey,\n                        registered,\n                        votes,\n                    }));\n                }\n                else if (((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n                    ((votes !== undefined && votes.eq(client_common_1.utils.ZERO)) || (votes === undefined && validator.votes.eq(client_common_1.utils.ZERO)))) {\n                    await this.validator.delete({ publicKey: validator.publicKey });\n                }\n                else {\n                    await this.validator.update(validator, { votes, registered });\n                }\n            })),\n            validatorsCount === undefined\n                ? this.validatorsCount.add(new node_core_1.ValidatorsCount({\n                    votes: validatorsCountVotes,\n                }))\n                : (async () => {\n                    await this.validatorsCount.update(validatorsCount, {\n                        votes: validatorsCountVotes,\n                    });\n                })(),\n        ]);\n    }\n    async updateAccounts(inputs, claims, outputs, accountChanges = {}) {\n        const [inputOutputs, claimOutputs] = await Promise.all([\n            this.getInputOutputs(inputs),\n            this.getInputOutputs(claims),\n        ]);\n        const addressValues = Object.entries(lodash_1.default.groupBy(inputOutputs\n            .map(({ output }) => [output.address, output.asset, output.value.neg()])\n            .concat(outputs.map(({ output }) => [output.address, output.asset, output.value])), ([address]) => client_common_1.common.uInt160ToHex(address)));\n        const addressSpent = this.groupByAddress(inputOutputs);\n        const addressClaimed = lodash_1.default.mapValues(this.groupByAddress(claimOutputs), (values) => values.map(({ input }) => input));\n        const addressOutputs = lodash_1.default.groupBy(outputs, (output) => client_common_1.common.uInt160ToHex(output.output.address));\n        await Promise.all(addressValues.map(async ([address, values]) => {\n            const spent = addressSpent[address];\n            const claimed = addressClaimed[address];\n            const outs = addressOutputs[address];\n            const changes = accountChanges[address];\n            await this.updateAccount(client_common_1.common.hexToUInt160(address), values.map(([_address, asset, value]) => [asset, value]), spent === undefined ? [] : spent, claimed === undefined ? [] : claimed, outs === undefined ? [] : outs, changes === undefined ? [] : changes);\n        }));\n    }\n    getOutputWithInput(transaction) {\n        return transaction.outputs.map((output, index) => ({\n            output,\n            input: new node_core_1.Input({ hash: transaction.hash, index }),\n        }));\n    }\n    async getInputOutputs(inputs) {\n        return Promise.all(inputs.map(async (input) => {\n            const output = await this.output.get(input);\n            return { input, output };\n        }));\n    }\n    groupByAddress(inputOutputs) {\n        return lodash_1.default.groupBy(inputOutputs, ({ output }) => client_common_1.common.uInt160ToHex(output.address));\n    }\n    async updateAccount(address, values, spent, claimed, outputs, votes) {\n        const account = await this.account.tryGet({ hash: address });\n        const balances = values.reduce((acc, [asset, value]) => {\n            const key = client_common_1.common.uInt256ToHex(asset);\n            if (acc[key] === undefined) {\n                acc[key] = client_common_1.utils.ZERO;\n            }\n            acc[key] = acc[key].add(value);\n            return acc;\n        }, account === undefined\n            ? {}\n            : Object.entries(account.balances).reduce((acc, [key, value]) => {\n                if (value === undefined) {\n                    return Object.assign(Object.assign({}, acc), { [key]: client_common_1.utils.ZERO });\n                }\n                return Object.assign(Object.assign({}, acc), { [key]: value });\n            }, {}));\n        const promises = [];\n        promises.push(...spent.map(async ({ input }) => this.accountUnspent.delete({\n            hash: address,\n            input,\n        })));\n        promises.push(...outputs.map(async ({ input }) => this.accountUnspent.add(new node_core_1.AccountUnspent({ hash: address, input }))));\n        promises.push(...claimed.map(async (input) => this.accountUnclaimed.delete({\n            hash: address,\n            input,\n        })));\n        promises.push(...spent\n            .filter(({ output }) => client_common_1.common.uInt256Equal(output.asset, this.settings.governingToken.hash))\n            .map(async ({ input }) => this.accountUnclaimed.add(new node_core_1.AccountUnclaimed({ hash: address, input }))));\n        if (account === undefined) {\n            promises.push(this.account.add(new node_core_1.Account({\n                hash: address,\n                balances,\n                votes,\n            })));\n        }\n        else {\n            promises.push(this.account.update(account, { balances, votes }).then(async (newAccount) => {\n                if (newAccount.isDeletable()) {\n                    await this.account.delete({ hash: address });\n                }\n            }));\n        }\n        await Promise.all(promises);\n    }\n    async updateCoins(inputs, claims, block) {\n        const inputClaims = inputs\n            .map((input) => ({ type: 'input', input, hash: input.hash }))\n            .concat(claims.map((input) => ({ type: 'claim', input, hash: input.hash })));\n        const hashInputClaims = Object.entries(lodash_1.default.groupBy(inputClaims, ({ hash }) => client_common_1.common.uInt256ToHex(hash)));\n        await Promise.all(hashInputClaims.map(async ([hash, values]) => this.updateCoin(client_common_1.common.hexToUInt256(hash), values, block)));\n    }\n    async updateCoin(hash, inputClaims, block) {\n        const spentCoins = await this.transactionData.get({ hash });\n        const endHeights = Object.assign({}, spentCoins.endHeights);\n        const claimed = Object.assign({}, spentCoins.claimed);\n        for (const inputClaim of inputClaims) {\n            if (inputClaim.type === 'input') {\n                endHeights[inputClaim.input.index] = block.index;\n            }\n            else {\n                claimed[inputClaim.input.index] = true;\n            }\n        }\n        await this.transactionData.update(spentCoins, {\n            endHeights,\n            claimed,\n        });\n    }\n}\nexports.WriteBatchBlockchain = WriteBatchBlockchain;\n\n//# sourceMappingURL=WriteBatchBlockchain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nfunction createGet({ tryGetTracked, readStorage, }) {\n    return async (key) => {\n        const trackedChange = tryGetTracked(key);\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                throw new Error('Not found');\n            }\n            return trackedChange.value;\n        }\n        return readStorage().get(key);\n    };\n}\nfunction createTryGet({ tryGetTracked, readStorage, }) {\n    return async (key) => {\n        const trackedChange = tryGetTracked(key);\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                return undefined;\n            }\n            return trackedChange.value;\n        }\n        return readStorage().tryGet(key);\n    };\n}\nclass BaseReadStorageCache {\n    constructor(options) {\n        this.readStorage = options.readStorage;\n        this.name = options.name;\n        this.createAddChange = options.createAddChange;\n        this.createDeleteChange = options.createDeleteChange;\n        this.onAdd = options.onAdd;\n        this.mutableValues = {};\n        this.get = createGet({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGet = createTryGet({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGetValue = (key) => this.readStorage().tryGet(key);\n    }\n    getChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        return Object.values(this.mutableValues).map((value) => {\n            if (value.type === 'delete') {\n                if (createDeleteChange === undefined) {\n                    throw new Error('Invalid delete');\n                }\n                return { type: 'delete', change: createDeleteChange(value.key) };\n            }\n            return { type: 'add', change: this.createAddChange(value.addValue), subType: value.subType };\n        });\n    }\n    getTrackedChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        return Object.entries(this.mutableValues).map(([key, value]) => {\n            if (value.type === 'delete') {\n                if (createDeleteChange === undefined) {\n                    throw new Error('Invalid delete');\n                }\n                return { type: createDeleteChange(value.key).type, key, value };\n            }\n            return { type: this.createAddChange(value.addValue).type, key, value };\n        });\n    }\n    tryGetTracked(_key) {\n        throw new Error('Not Implemented');\n    }\n}\nexports.BaseReadStorageCache = BaseReadStorageCache;\nclass ReadStorageCache extends BaseReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.getKeyString = options.getKeyString;\n    }\n    tryGetTracked(key) {\n        return this.mutableValues[this.getKeyString(key)];\n    }\n    addTrackedChange(key, value) {\n        this.mutableValues[key] = value;\n    }\n}\nclass ReadAllStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: () => ({\n                get: options.readAllStorage().get,\n                tryGet: options.readAllStorage().tryGet,\n            }),\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.readAllStorage = options.readAllStorage;\n        this.getKeyFromValue = options.getKeyFromValue;\n        this.all$ = rxjs_1.concat(rxjs_1.defer(() => this.readAllStorage().all$.pipe(operators_1.concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n            if (trackedChange !== undefined) {\n                return rxjs_1.EMPTY;\n            }\n            return rxjs_1.of(value);\n        }))), rxjs_1.defer(() => rxjs_1.of(...Object.values(this.mutableValues)\n            .map((value) => (value.type === 'add' ? value.value : undefined))\n            .filter(utils_1.utils.notNull))));\n    }\n}\nclass ReadGetAllStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: () => ({\n                get: options.readGetAllStorage().get,\n                tryGet: options.readGetAllStorage().tryGet,\n            }),\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.readGetAllStorage = options.readGetAllStorage;\n        this.getKeyFromValue = options.getKeyFromValue;\n        this.matchesPartialKey = options.matchesPartialKey;\n        this.getAll$ = (key) => rxjs_1.concat(rxjs_1.defer(() => this.readGetAllStorage()\n            .getAll$(key)\n            .pipe(operators_1.concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n            if (trackedChange !== undefined) {\n                return rxjs_1.EMPTY;\n            }\n            return rxjs_1.of(value);\n        }))), rxjs_1.defer(() => rxjs_1.of(...Object.values(this.mutableValues)\n            .map((value) => value.type === 'add' && this.matchesPartialKey(value.value, key) ? value.value : undefined)\n            .filter(utils_1.utils.notNull))));\n    }\n}\nfunction createAdd({ cache, getKeyFromValue, getKeyString, allowDupes, }) {\n    return async (value) => {\n        const key = getKeyFromValue(value);\n        if (!allowDupes) {\n            const currentValue = await cache.tryGet(key);\n            if (currentValue !== undefined) {\n                throw new Error(`Attempted to add an already existing object for key ` + `${cache.name}:${getKeyString(key)}.`);\n            }\n        }\n        if (cache.onAdd !== undefined) {\n            await cache.onAdd(value);\n        }\n        const trackedChange = cache.tryGetTracked(key);\n        cache.mutableValues[cache.getKeyString(key)] = {\n            type: 'add',\n            addValue: value,\n            value,\n            subType: trackedChange === undefined ? 'add' : 'update',\n        };\n    };\n}\nfunction createUpdate({ cache, update: updateFunc, getKeyFromValue, }) {\n    return async (value, update) => {\n        const key = getKeyFromValue(value);\n        const updatedValue = updateFunc(value, update);\n        const trackedChange = cache.tryGetTracked(key);\n        cache.mutableValues[cache.getKeyString(key)] = {\n            type: 'add',\n            addValue: updatedValue,\n            value: updatedValue,\n            subType: trackedChange === undefined || trackedChange.type === 'delete' || trackedChange.subType === 'update'\n                ? 'update'\n                : 'add',\n        };\n        return updatedValue;\n    };\n}\nfunction createDelete({ cache }) {\n    return async (key) => {\n        const currentValue = await cache.tryGetValue(key);\n        if (currentValue === undefined) {\n            delete cache.mutableValues[cache.getKeyString(key)];\n        }\n        else {\n            cache.mutableValues[cache.getKeyString(key)] = { type: 'delete', key };\n        }\n    };\n}\nclass ReadAddUpdateDeleteStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAddUpdateDeleteStorageCache = ReadAddUpdateDeleteStorageCache;\nclass ReadAddUpdateStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n            allowDupes: options.allowDupes,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n    }\n}\nexports.ReadAddUpdateStorageCache = ReadAddUpdateStorageCache;\nclass ReadAddDeleteStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAddDeleteStorageCache = ReadAddDeleteStorageCache;\nclass ReadAddStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n            allowDupes: options.allowDupes,\n        });\n    }\n}\nexports.ReadAddStorageCache = ReadAddStorageCache;\nclass ReadGetAllAddDeleteStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadGetAllAddDeleteStorageCache = ReadGetAllAddDeleteStorageCache;\nclass ReadGetAllAddUpdateDeleteStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadGetAllAddUpdateDeleteStorageCache = ReadGetAllAddUpdateDeleteStorageCache;\nclass ReadGetAllAddStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n    }\n}\nexports.ReadGetAllAddStorageCache = ReadGetAllAddStorageCache;\nclass ReadAllAddUpdateDeleteStorageCache extends ReadAllStorageCache {\n    constructor(options) {\n        super({\n            readAllStorage: options.readAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAllAddUpdateDeleteStorageCache = ReadAllAddUpdateDeleteStorageCache;\nclass ReadAllAddStorageCache extends ReadAllStorageCache {\n    constructor(options) {\n        super({\n            readAllStorage: options.readAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n    }\n}\nexports.ReadAllAddStorageCache = ReadAllAddStorageCache;\nclass BlockLikeStorageCache extends BaseReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n        });\n        this.mutableIndexValues = {};\n    }\n    async add(value) {\n        const currentValue = await this.tryGet({ hashOrIndex: value.index });\n        if (currentValue !== undefined) {\n            throw new Error('Attempted to add an already existing object.');\n        }\n        const addValue = { type: 'add', addValue: value, value, subType: 'add' };\n        this.mutableValues[client_common_1.common.uInt256ToString(value.hash)] = addValue;\n        this.mutableIndexValues[`${value.index}`] = addValue;\n    }\n    tryGetTracked(key) {\n        if (typeof key.hashOrIndex !== 'number') {\n            return this.mutableValues[client_common_1.common.uInt256ToString(key.hashOrIndex)];\n        }\n        return this.mutableIndexValues[`${key.hashOrIndex}`];\n    }\n    addTrackedChange(key, value) {\n        this.mutableValues[key] = value;\n    }\n}\nexports.BlockLikeStorageCache = BlockLikeStorageCache;\nconst getOutputValueKeyString = (key) => `${client_common_1.common.uInt256ToHex(key.hash)}:${key.index}`;\nclass OutputStorageCache extends ReadStorageCache {\n    constructor(readStorage) {\n        super({\n            readStorage,\n            name: 'output',\n            getKeyString: getOutputValueKeyString,\n            createAddChange: (value) => ({ type: 'output', value }),\n        });\n        this.add = async (value) => {\n            const key = { hash: value.hash, index: value.index };\n            const currentValue = await this.tryGet(key);\n            if (currentValue !== undefined) {\n                throw new Error(`Attempted to add an already existing object for key ` + `${this.name}:${this.getKeyString(key)}.`);\n            }\n            this.mutableValues[this.getKeyString(key)] = {\n                type: 'add',\n                addValue: value,\n                value: value.output,\n                subType: 'add',\n            };\n        };\n    }\n}\nexports.OutputStorageCache = OutputStorageCache;\nfunction createGetMetadata({ tryGetTracked, readStorage, }) {\n    return async () => {\n        const trackedChange = tryGetTracked();\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                throw new Error('Not found');\n            }\n            return trackedChange.value;\n        }\n        return readStorage().get();\n    };\n}\nfunction createTryGetMetadata({ tryGetTracked, readStorage, }) {\n    return async () => {\n        const trackedChange = tryGetTracked();\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                return undefined;\n            }\n            return trackedChange.value;\n        }\n        return readStorage().tryGet();\n    };\n}\nclass BaseReadMetadataStorageCache {\n    constructor(options) {\n        this.readStorage = options.readStorage;\n        this.name = options.name;\n        this.createAddChange = options.createAddChange;\n        this.createDeleteChange = options.createDeleteChange;\n        this.onAdd = options.onAdd;\n        this.get = createGetMetadata({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGet = createTryGetMetadata({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n    }\n    getChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        const value = this.mutableValue;\n        if (value === undefined) {\n            return [];\n        }\n        if (value.type === 'delete') {\n            if (createDeleteChange === undefined) {\n                throw new Error('Invalid delete');\n            }\n            return [{ type: 'delete', change: createDeleteChange() }];\n        }\n        return [{ type: 'add', change: this.createAddChange(value.addValue), subType: value.subType }];\n    }\n    getTrackedChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        const value = this.mutableValue;\n        if (value === undefined) {\n            return [];\n        }\n        if (value.type === 'delete') {\n            if (createDeleteChange === undefined) {\n                throw new Error('Invalid delete');\n            }\n            return [{ type: createDeleteChange().type, key: 'metadata', value: Object.assign(Object.assign({}, value), { key: 'metadata' }) }];\n        }\n        return [{ type: this.createAddChange(value.addValue).type, key: 'metadata', value }];\n    }\n    tryGetTracked() {\n        return this.mutableValue;\n    }\n    addTrackedChange(_key, value) {\n        this.mutableValue = value;\n    }\n}\nexports.BaseReadMetadataStorageCache = BaseReadMetadataStorageCache;\nclass ReadMetadataStorageCache extends BaseReadMetadataStorageCache {\n}\nfunction createAddMetadata({ cache, }) {\n    return async (value) => {\n        if (cache.onAdd !== undefined) {\n            await cache.onAdd(value);\n        }\n        cache.mutableValue = {\n            type: 'add',\n            addValue: value,\n            value,\n            subType: 'add',\n        };\n    };\n}\nfunction createUpdateMetadata({ cache, update: updateFunc, }) {\n    return async (value, update) => {\n        const updatedValue = updateFunc(value, update);\n        cache.mutableValue = {\n            type: 'add',\n            addValue: updatedValue,\n            value: updatedValue,\n            subType: 'update',\n        };\n        return updatedValue;\n    };\n}\nclass ReadAddUpdateMetadataStorageCache extends ReadMetadataStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAddMetadata({\n            cache: this,\n        });\n        this.update = createUpdateMetadata({\n            cache: this,\n            update: options.update,\n        });\n    }\n}\nexports.ReadAddUpdateMetadataStorageCache = ReadAddUpdateMetadataStorageCache;\n\n//# sourceMappingURL=StorageCache.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"./Node\");\nexports.Node = Node_1.Node;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst client_switch_1 = require(\"@neo-one/client-switch\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_consensus_1 = require(\"@neo-one/node-consensus\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bloem_1 = require(\"bloem\");\nconst bloom_filter_1 = tslib_1.__importDefault(require(\"bloom-filter\"));\nconst cross_fetch_1 = tslib_1.__importDefault(require(\"cross-fetch\"));\nconst ip_address_1 = require(\"ip-address\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst lru_cache_1 = tslib_1.__importDefault(require(\"lru-cache\"));\nconst Command_1 = require(\"./Command\");\nconst errors_1 = require(\"./errors\");\nconst Message_1 = require(\"./Message\");\nconst payload_1 = require(\"./payload\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'node-protocol' });\nconst messageReceivedTag = utils_1.labelToTag(utils_1.Labels.COMMAND_NAME);\nconst messagesReceived = client_switch_1.globalStats.createMeasureInt64('messages/received', client_switch_1.MeasureUnit.UNIT);\nconst messagesFailed = client_switch_1.globalStats.createMeasureInt64('messages/failed', client_switch_1.MeasureUnit.UNIT);\nconst mempoolSize = client_switch_1.globalStats.createMeasureInt64('mempool/size', client_switch_1.MeasureUnit.UNIT);\nconst NEO_PROTOCOL_MESSAGES_RECEIVED_TOTAL = client_switch_1.globalStats.createView('neo_protocol_messages_received_total', messagesReceived, client_switch_1.AggregationType.COUNT, [messageReceivedTag], 'number of messages received');\nclient_switch_1.globalStats.registerView(NEO_PROTOCOL_MESSAGES_RECEIVED_TOTAL);\nconst NEO_PROTOCOL_MESSAGES_FAILURES_TOTAL = client_switch_1.globalStats.createView('neo_protocol_messages_failures_total', messagesFailed, client_switch_1.AggregationType.COUNT, [messageReceivedTag], 'number of message failures');\nclient_switch_1.globalStats.registerView(NEO_PROTOCOL_MESSAGES_FAILURES_TOTAL);\nconst NEO_PROTOCOL_MEMPOOL_SIZE = client_switch_1.globalStats.createView('neo_protocol_mempool_size', mempoolSize, client_switch_1.AggregationType.LAST_VALUE, [], 'current mempool size');\nclient_switch_1.globalStats.registerView(NEO_PROTOCOL_MEMPOOL_SIZE);\nconst createPeerBloomFilter = ({ filter, k, tweak, }) => new bloom_filter_1.default({\n    vData: Buffer.from(filter),\n    nHashFuncs: k,\n    nTweak: tweak,\n});\nconst createScalingBloomFilter = () => new bloem_1.ScalingBloem(0.05, {\n    initial_capacity: 100000,\n    scaling: 4,\n});\nconst compareTransactionAndFees = (val1, val2) => {\n    const a = val1.networkFee.divn(val1.transaction.size);\n    const b = val2.networkFee.divn(val2.transaction.size);\n    if (a.lt(b)) {\n        return -1;\n    }\n    if (b.lt(a)) {\n        return 1;\n    }\n    return val1.transaction.hash.compare(val2.transaction.hash);\n};\nconst MEM_POOL_SIZE = 5000;\nconst GET_ADDR_PEER_COUNT = 200;\nconst GET_BLOCKS_COUNT = 500;\nconst GET_BLOCKS_BUFFER = GET_BLOCKS_COUNT / 3;\nconst GET_BLOCKS_TIME_MS = 10000;\nconst GET_BLOCKS_THROTTLE_MS = 1000;\nconst TRIM_MEMPOOL_THROTTLE = 5000;\nconst GET_BLOCKS_CLOSE_COUNT = 2;\nconst UNHEALTHY_PEER_SECONDS = 300;\nconst LOCAL_HOST_ADDRESSES = new Set(['', '0.0.0.0', 'localhost', '127.0.0.1', '::', '::1']);\nclass Node {\n    constructor({ blockchain, createNetwork, options, }) {\n        this.mutableUnhealthyPeerSeconds = UNHEALTHY_PEER_SECONDS;\n        this.requestBlocks = lodash_1.default.debounce(() => {\n            const peer = this.mutableBestPeer;\n            const previousBlock = this.blockchain.previousBlock;\n            const block = previousBlock === undefined ? this.blockchain.currentBlock : previousBlock;\n            if (peer !== undefined && block.index < peer.data.startHeight) {\n                if (this.mutableGetBlocksRequestsCount > GET_BLOCKS_CLOSE_COUNT) {\n                    this.mutableBestPeer = this.findBestPeer(peer);\n                    this.network.blacklistAndClose(peer);\n                    this.mutableGetBlocksRequestsCount = 0;\n                }\n                else if (this.shouldRequestBlocks()) {\n                    if (this.mutableGetBlocksRequestsIndex === block.index) {\n                        this.mutableGetBlocksRequestsCount += 1;\n                    }\n                    else {\n                        this.mutableGetBlocksRequestsCount = 1;\n                        this.mutableGetBlocksRequestsIndex = block.index;\n                    }\n                    this.mutableGetBlocksRequestTime = Date.now();\n                    this.sendMessage(peer, this.createMessage({\n                        command: Command_1.Command.getblocks,\n                        payload: new payload_1.GetBlocksPayload({\n                            hashStart: [block.hash],\n                        }),\n                    }));\n                }\n                this.requestBlocks();\n            }\n        }, GET_BLOCKS_THROTTLE_MS);\n        this.onRequestEndpoints = lodash_1.default.throttle(() => {\n            this.relay(this.createMessage({ command: Command_1.Command.getaddr }));\n            this.fetchEndpointsFromRPC();\n        }, 5000);\n        this.trimMemPool = lodash_1.default.throttle(async () => {\n            const memPool = Object.values(this.mutableMemPool);\n            if (memPool.length > MEM_POOL_SIZE) {\n                const transactionAndFees = await Promise.all(memPool.map(async (transaction) => {\n                    const networkFee = await transaction.getNetworkFee({\n                        getOutput: this.blockchain.output.get,\n                        governingToken: this.blockchain.settings.governingToken,\n                        utilityToken: this.blockchain.settings.utilityToken,\n                        fees: this.blockchain.settings.fees,\n                        registerValidatorFee: this.blockchain.settings.registerValidatorFee,\n                    });\n                    return { transaction, networkFee };\n                }));\n                const hashesToRemove = lodash_1.default.take(transactionAndFees.slice().sort(compareTransactionAndFees), this.blockchain.settings.memPoolSize).map((transactionAndFee) => transactionAndFee.transaction.hashHex);\n                hashesToRemove.forEach((hash) => {\n                    delete this.mutableMemPool[hash];\n                });\n                client_switch_1.globalStats.record([\n                    {\n                        measure: mempoolSize,\n                        value: Object.keys(this.mutableMemPool).length,\n                    },\n                ]);\n            }\n        }, TRIM_MEMPOOL_THROTTLE);\n        this.negotiate = async (peer) => {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.version,\n                payload: new payload_1.VersionPayload({\n                    protocolVersion: 0,\n                    services: payload_1.SERVICES.NODE_NETWORK,\n                    timestamp: Math.round(Date.now() / 1000),\n                    port: this.externalPort,\n                    nonce: this.nonce,\n                    userAgent: this.userAgent,\n                    startHeight: this.blockchain.currentBlockIndex,\n                    relay: true,\n                }),\n            }));\n            const message = await peer.receiveMessage(30000);\n            let versionPayload;\n            if (message.value.command === Command_1.Command.version) {\n                versionPayload = message.value.payload;\n            }\n            else {\n                throw new errors_1.NegotiationError(message);\n            }\n            this.checkVersion(peer, message, versionPayload);\n            const { host } = node_core_1.getEndpointConfig(peer.endpoint);\n            let address;\n            if (payload_1.NetworkAddress.isValid(host)) {\n                address = new payload_1.NetworkAddress({\n                    host,\n                    port: versionPayload.port,\n                    timestamp: versionPayload.timestamp,\n                    services: versionPayload.services,\n                });\n            }\n            this.sendMessage(peer, this.createMessage({ command: Command_1.Command.verack }));\n            const nextMessage = await peer.receiveMessage(30000);\n            if (nextMessage.value.command !== Command_1.Command.verack) {\n                throw new errors_1.NegotiationError(nextMessage);\n            }\n            return {\n                data: {\n                    nonce: versionPayload.nonce,\n                    startHeight: versionPayload.startHeight,\n                    mutableBloomFilter: undefined,\n                    address,\n                },\n                relay: versionPayload.relay,\n            };\n        };\n        this.checkPeerHealth = (peer, prevHealth) => {\n            const checkTimeSeconds = utils_1.utils.nowSeconds();\n            const blockIndex = this.mutableBlockIndex[peer.endpoint];\n            if (prevHealth === undefined) {\n                return { healthy: true, checkTimeSeconds, blockIndex };\n            }\n            if (prevHealth.blockIndex !== undefined && blockIndex !== undefined && prevHealth.blockIndex < blockIndex) {\n                return { healthy: true, checkTimeSeconds, blockIndex };\n            }\n            if (prevHealth.blockIndex === blockIndex &&\n                utils_1.utils.nowSeconds() - prevHealth.checkTimeSeconds < this.mutableUnhealthyPeerSeconds) {\n                return {\n                    healthy: true,\n                    checkTimeSeconds: prevHealth.checkTimeSeconds,\n                    blockIndex: prevHealth.blockIndex,\n                };\n            }\n            return { healthy: false, checkTimeSeconds, blockIndex };\n        };\n        this.onEvent = (event) => {\n            if (event.event === 'PEER_CONNECT_SUCCESS') {\n                const { connectedPeer } = event;\n                if (this.mutableBestPeer === undefined ||\n                    this.mutableBestPeer.data.startHeight + 100 < connectedPeer.data.startHeight) {\n                    this.mutableBestPeer = connectedPeer;\n                    this.resetRequestBlocks();\n                    this.requestBlocks();\n                }\n            }\n            else if (event.event === 'PEER_CLOSED' &&\n                this.mutableBestPeer !== undefined &&\n                this.mutableBestPeer.endpoint === event.peer.endpoint) {\n                this.mutableBestPeer = this.findBestPeer();\n                this.resetRequestBlocks();\n                this.requestBlocks();\n            }\n        };\n        this.blockchain = blockchain;\n        this.network = createNetwork({\n            negotiate: this.negotiate,\n            checkPeerHealth: this.checkPeerHealth,\n            createMessageTransform: () => new Message_1.MessageTransform(this.blockchain.deserializeWireContext),\n            onMessageReceived: (peer, message) => {\n                this.onMessageReceived(peer, message);\n            },\n            onRequestEndpoints: this.onRequestEndpoints.bind(this),\n            onEvent: this.onEvent,\n        });\n        this.options = options;\n        const { externalPort = 0 } = options;\n        this.externalPort = externalPort;\n        this.nonce = Math.floor(Math.random() * client_common_1.utils.UINT_MAX_NUMBER);\n        this.userAgent = `NEO:neo-one-js:1.0.0-preview`;\n        this.mutableMemPool = {};\n        this.mutableKnownBlockHashes = createScalingBloomFilter();\n        this.tempKnownBlockHashes = new Set();\n        this.mutableKnownTransactionHashes = createScalingBloomFilter();\n        this.tempKnownTransactionHashes = new Set();\n        this.mutableKnownHeaderHashes = createScalingBloomFilter();\n        this.tempKnownHeaderHashes = new Set();\n        this.mutableGetBlocksRequestsCount = 1;\n        this.consensusCache = new lru_cache_1.default(10000);\n        this.mutableBlockIndex = {};\n    }\n    get consensus() {\n        return this.mutableConsensus;\n    }\n    get connectedPeers() {\n        return this.network.connectedPeers.map((peer) => peer.endpoint);\n    }\n    get memPool() {\n        return this.mutableMemPool;\n    }\n    async reset() {\n        this.mutableMemPool = {};\n        this.mutableKnownBlockHashes = createScalingBloomFilter();\n        this.tempKnownBlockHashes.clear();\n        this.mutableKnownTransactionHashes = createScalingBloomFilter();\n        this.tempKnownTransactionHashes.clear();\n        this.mutableKnownHeaderHashes = createScalingBloomFilter();\n        this.tempKnownHeaderHashes.clear();\n        this.mutableGetBlocksRequestsCount = 1;\n        this.consensusCache.reset();\n        this.mutableBlockIndex = {};\n    }\n    async start() {\n        let disposable = utils_1.noopDisposable;\n        try {\n            this.network.start();\n            logger.debug({ name: 'neo_protocol_start' }, 'Protocol started.');\n            disposable = utils_1.composeDisposables(disposable, () => {\n                this.network.stop();\n                logger.debug({ name: 'neo_protocol_stop' }, 'Protocol stopped.');\n            });\n            if (this.options.consensus !== undefined) {\n                const mutableConsensus = new node_consensus_1.Consensus({\n                    options: this.options.consensus,\n                    node: this,\n                });\n                this.mutableConsensus = mutableConsensus;\n                const consensusDisposable = await mutableConsensus.start();\n                disposable = utils_1.composeDisposables(disposable, consensusDisposable);\n            }\n            this.mutableUnhealthyPeerSeconds =\n                this.options.unhealthyPeerSeconds === undefined ? UNHEALTHY_PEER_SECONDS : this.options.unhealthyPeerSeconds;\n            return disposable;\n        }\n        catch (err) {\n            await disposable();\n            throw err;\n        }\n    }\n    async relayTransaction(transaction, { throwVerifyError = false, forceAdd = false, } = {\n        throwVerifyError: false,\n        forceAdd: false,\n    }) {\n        const result = {};\n        if (transaction.type === node_core_1.TransactionType.Miner ||\n            this.mutableMemPool[transaction.hashHex] !== undefined ||\n            this.tempKnownTransactionHashes.has(transaction.hashHex)) {\n            return result;\n        }\n        if (!this.mutableKnownTransactionHashes.has(transaction.hash)) {\n            this.tempKnownTransactionHashes.add(transaction.hashHex);\n            try {\n                const memPool = Object.values(this.mutableMemPool);\n                if (memPool.length > MEM_POOL_SIZE / 2 && !forceAdd) {\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                    return result;\n                }\n                let logLabels = { [utils_1.Labels.NEO_TRANSACTION_HASH]: transaction.hashHex };\n                let finalResult;\n                try {\n                    let foundTransaction;\n                    try {\n                        foundTransaction = await this.blockchain.transaction.tryGet({\n                            hash: transaction.hash,\n                        });\n                    }\n                    finally {\n                        logLabels = Object.assign({ [utils_1.Labels.NEO_TRANSACTION_FOUND]: foundTransaction !== undefined }, logLabels);\n                    }\n                    let verifyResult;\n                    if (foundTransaction === undefined) {\n                        verifyResult = await this.blockchain.verifyTransaction({\n                            transaction,\n                            memPool: Object.values(this.mutableMemPool),\n                        });\n                        const verified = verifyResult.verifications.every(({ failureMessage }) => failureMessage === undefined);\n                        if (verified) {\n                            this.mutableMemPool[transaction.hashHex] = transaction;\n                            client_switch_1.globalStats.record([\n                                {\n                                    measure: mempoolSize,\n                                    value: Object.keys(this.mutableMemPool).length,\n                                },\n                            ]);\n                            if (this.mutableConsensus !== undefined) {\n                                this.mutableConsensus.onTransactionReceived(transaction);\n                            }\n                            this.relayTransactionInternal(transaction);\n                            await this.trimMemPool();\n                        }\n                    }\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                    finalResult = { verifyResult };\n                    logger.debug(Object.assign({ name: 'neo_relay_transaction' }, logLabels));\n                }\n                catch (err) {\n                    logger.error(Object.assign({ name: 'neo_relay_transaction', err }, logLabels));\n                    throw err;\n                }\n                return finalResult;\n            }\n            catch (error) {\n                if (error.code === undefined ||\n                    typeof error.code !== 'string' ||\n                    !error.code.includes('VERIFY') ||\n                    throwVerifyError) {\n                    throw error;\n                }\n            }\n            finally {\n                this.tempKnownTransactionHashes.delete(transaction.hashHex);\n            }\n        }\n        return result;\n    }\n    async relayBlock(block) {\n        await this.persistBlock(block);\n    }\n    relayConsensusPayload(payload) {\n        const message = this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Consensus,\n                hashes: [payload.hash],\n            }),\n        });\n        this.consensusCache.set(payload.hashHex, payload);\n        this.relay(message);\n    }\n    syncMemPool() {\n        this.relay(this.createMessage({ command: Command_1.Command.mempool }));\n    }\n    relay(message) {\n        this.network.relay(message.serializeWire());\n    }\n    relayTransactionInternal(transaction) {\n        const message = this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Transaction,\n                hashes: [transaction.hash],\n            }),\n        });\n        const messagePayload = message.serializeWire();\n        this.network.connectedPeers.forEach((peer) => {\n            if (peer.relay && this.testFilter(peer.data.mutableBloomFilter, transaction)) {\n                peer.write(messagePayload);\n            }\n        });\n    }\n    sendMessage(peer, message) {\n        peer.write(message.serializeWire());\n    }\n    findBestPeer(bestPeer) {\n        let peers = this.network.connectedPeers;\n        if (bestPeer !== undefined) {\n            peers = peers.filter((peer) => peer.endpoint !== bestPeer.endpoint);\n        }\n        const result = lodash_1.default.maxBy(peers, (peer) => peer.data.startHeight);\n        if (result === undefined) {\n            return undefined;\n        }\n        return lodash_1.default.shuffle(peers.filter((peer) => peer.data.startHeight === result.data.startHeight))[0];\n    }\n    resetRequestBlocks() {\n        this.mutableGetBlocksRequestsIndex = undefined;\n        this.mutableGetBlocksRequestsCount = 0;\n    }\n    shouldRequestBlocks() {\n        const block = this.blockchain.currentBlock;\n        const getBlocksRequestTime = this.mutableGetBlocksRequestTime;\n        return (this.mutableGetBlocksRequestsIndex === undefined ||\n            block.index - this.mutableGetBlocksRequestsIndex > GET_BLOCKS_BUFFER ||\n            getBlocksRequestTime === undefined ||\n            Date.now() - getBlocksRequestTime > GET_BLOCKS_TIME_MS);\n    }\n    checkVersion(peer, message, version) {\n        if (version.nonce === this.nonce) {\n            this.network.permanentlyBlacklist(peer.endpoint);\n            throw new errors_1.NegotiationError(message, 'Nonce equals my nonce.');\n        }\n        const connectedPeer = this.network.connectedPeers.find((otherPeer) => version.nonce === otherPeer.data.nonce);\n        if (connectedPeer !== undefined) {\n            throw new errors_1.AlreadyConnectedError('Already connected to nonce.');\n        }\n    }\n    ready() {\n        const peer = this.mutableBestPeer;\n        const block = this.blockchain.currentBlock;\n        return peer !== undefined && block.index >= peer.data.startHeight;\n    }\n    async fetchEndpointsFromRPC() {\n        try {\n            await this.doFetchEndpointsFromRPC();\n        }\n        catch (_a) {\n        }\n    }\n    async doFetchEndpointsFromRPC() {\n        const { rpcURLs = [] } = this.options;\n        await Promise.all(rpcURLs.map(async (rpcURL) => this.fetchEndpointsFromRPCURL(rpcURL)));\n    }\n    async fetchEndpointsFromRPCURL(rpcURL) {\n        try {\n            const response = await cross_fetch_1.default(rpcURL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    jsonrpc: '2.0',\n                    id: 1,\n                    method: 'getpeers',\n                    params: [],\n                }),\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch peers from ${rpcURL}: ${response.status} ${response.statusText}`);\n            }\n            const result = await response.json();\n            if (typeof result === 'object' &&\n                result.error !== undefined &&\n                typeof result.error === 'object' &&\n                typeof result.error.code === 'number' &&\n                typeof result.error.message === 'string') {\n                throw new Error(result.error);\n            }\n            const connected = result.result.connected;\n            connected\n                .map((peer) => {\n                const { address, port } = peer;\n                let canonicalForm = new ip_address_1.Address6(address).canonicalForm();\n                if (canonicalForm == undefined) {\n                    canonicalForm = ip_address_1.Address6.fromAddress4(address).canonicalForm();\n                }\n                return { host: canonicalForm == undefined ? '' : canonicalForm, port };\n            })\n                .filter((endpoint) => !LOCAL_HOST_ADDRESSES.has(endpoint.host))\n                .map((endpoint) => node_core_1.createEndpoint({\n                type: 'tcp',\n                host: endpoint.host,\n                port: endpoint.port,\n            }))\n                .forEach((endpoint) => this.network.addEndpoint(endpoint));\n        }\n        catch (err) {\n            logger.error({ name: 'neo_protocol_fetch_endpoints_error', [utils_1.Labels.HTTP_URL]: rpcURL, err }, `Failed to fetch endpoints from ${rpcURL}`);\n        }\n    }\n    onMessageReceived(peer, message) {\n        try {\n            new Promise(async (resolve) => {\n                switch (message.value.command) {\n                    case Command_1.Command.addr:\n                        this.onAddrMessageReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.block:\n                        await this.onBlockMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.consensus:\n                        await this.onConsensusMessageReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.filteradd:\n                        this.onFilterAddMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.filterclear:\n                        this.onFilterClearMessageReceived(peer);\n                        break;\n                    case Command_1.Command.filterload:\n                        this.onFilterLoadMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getaddr:\n                        this.onGetAddrMessageReceived(peer);\n                        break;\n                    case Command_1.Command.getblocks:\n                        await this.onGetBlocksMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getdata:\n                        await this.onGetDataMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getheaders:\n                        await this.onGetHeadersMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.headers:\n                        await this.onHeadersMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.inv:\n                        this.onInvMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.mempool:\n                        this.onMemPoolMessageReceived(peer);\n                        break;\n                    case Command_1.Command.tx:\n                        await this.onTransactionReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.verack:\n                        this.onVerackMessageReceived(peer);\n                        break;\n                    case Command_1.Command.version:\n                        this.onVersionMessageReceived(peer);\n                        break;\n                    case Command_1.Command.alert:\n                        break;\n                    case Command_1.Command.merkleblock:\n                        break;\n                    case Command_1.Command.notfound:\n                        break;\n                    case Command_1.Command.ping:\n                        break;\n                    case Command_1.Command.pong:\n                        break;\n                    case Command_1.Command.reject:\n                        break;\n                    default:\n                        utils_1.utils.assertNever(message.value);\n                }\n                resolve();\n            }).catch(() => {\n            });\n        }\n        catch (_a) {\n        }\n    }\n    onAddrMessageReceived(addr) {\n        addr.addresses\n            .filter((address) => !LOCAL_HOST_ADDRESSES.has(address.host))\n            .map((address) => node_core_1.createEndpoint({\n            type: 'tcp',\n            host: address.host,\n            port: address.port,\n        }))\n            .forEach((endpoint) => this.network.addEndpoint(endpoint));\n    }\n    async onBlockMessageReceived(peer, block) {\n        const blockIndex = this.mutableBlockIndex[peer.endpoint];\n        this.mutableBlockIndex[peer.endpoint] = Math.max(block.index, blockIndex === undefined ? 0 : blockIndex);\n        await this.relayBlock(block);\n    }\n    async persistBlock(block) {\n        if (this.blockchain.currentBlockIndex > block.index || this.tempKnownBlockHashes.has(block.hashHex)) {\n            return;\n        }\n        if (!this.mutableKnownBlockHashes.has(block.hash)) {\n            this.tempKnownBlockHashes.add(block.hashHex);\n            try {\n                const foundBlock = await this.blockchain.block.tryGet({\n                    hashOrIndex: block.hash,\n                });\n                if (foundBlock === undefined) {\n                    try {\n                        await this.blockchain.persistBlock({ block });\n                        if (this.mutableConsensus !== undefined) {\n                            this.mutableConsensus.onPersistBlock();\n                        }\n                        const peer = this.mutableBestPeer;\n                        if (peer !== undefined && block.index > peer.data.startHeight) {\n                            this.relay(this.createMessage({\n                                command: Command_1.Command.inv,\n                                payload: new payload_1.InvPayload({\n                                    type: payload_1.InventoryType.Block,\n                                    hashes: [block.hash],\n                                }),\n                            }));\n                        }\n                        logger.info({ name: 'neo_relay_block', [utils_1.Labels.NEO_BLOCK_INDEX]: block.index });\n                    }\n                    catch (err) {\n                        logger.error({ name: 'neo_relay_block', [utils_1.Labels.NEO_BLOCK_INDEX]: block.index, err });\n                        throw err;\n                    }\n                }\n                this.mutableKnownBlockHashes.add(block.hash);\n                this.mutableKnownHeaderHashes.add(block.hash);\n                block.transactions.forEach((transaction) => {\n                    delete this.mutableMemPool[transaction.hashHex];\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                });\n                client_switch_1.globalStats.record([\n                    {\n                        measure: mempoolSize,\n                        value: Object.keys(this.mutableMemPool).length,\n                    },\n                ]);\n            }\n            finally {\n                this.tempKnownBlockHashes.delete(block.hashHex);\n            }\n        }\n    }\n    async onConsensusMessageReceived(payload) {\n        const { consensus } = this;\n        if (consensus !== undefined) {\n            await this.blockchain.verifyConsensusPayload(payload);\n            consensus.onConsensusPayloadReceived(payload);\n        }\n    }\n    onFilterAddMessageReceived(peer, filterAdd) {\n        if (peer.data.mutableBloomFilter !== undefined) {\n            peer.data.mutableBloomFilter.insert(filterAdd.data);\n        }\n    }\n    onFilterClearMessageReceived(peer) {\n        peer.data.mutableBloomFilter = undefined;\n    }\n    onFilterLoadMessageReceived(peer, filterLoad) {\n        peer.data.mutableBloomFilter = createPeerBloomFilter(filterLoad);\n    }\n    onGetAddrMessageReceived(peer) {\n        const addresses = lodash_1.default.take(lodash_1.default.shuffle(this.network.connectedPeers.map((connectedPeer) => connectedPeer.data.address).filter(utils_1.utils.notNull)), GET_ADDR_PEER_COUNT);\n        if (addresses.length > 0) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.addr,\n                payload: new payload_1.AddrPayload({ addresses }),\n            }));\n        }\n    }\n    async onGetBlocksMessageReceived(peer, getBlocks) {\n        const headers = await this.getHeaders(getBlocks, this.blockchain.currentBlockIndex);\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Block,\n                hashes: headers.map((header) => header.hash),\n            }),\n        }));\n    }\n    async onGetDataMessageReceived(peer, getData) {\n        switch (getData.type) {\n            case payload_1.InventoryType.Transaction:\n                await Promise.all(getData.hashes.map(async (hash) => {\n                    let transaction = this.mutableMemPool[client_common_1.common.uInt256ToHex(hash)];\n                    if (transaction === undefined) {\n                        transaction = await this.blockchain.transaction.tryGet({ hash });\n                    }\n                    if (transaction !== undefined) {\n                        this.sendMessage(peer, this.createMessage({\n                            command: Command_1.Command.tx,\n                            payload: transaction,\n                        }));\n                    }\n                }));\n                break;\n            case payload_1.InventoryType.Block:\n                await Promise.all(getData.hashes.map(async (hash) => {\n                    const block = await this.blockchain.block.tryGet({\n                        hashOrIndex: hash,\n                    });\n                    if (block !== undefined) {\n                        if (peer.data.mutableBloomFilter === undefined) {\n                            this.sendMessage(peer, this.createMessage({\n                                command: Command_1.Command.block,\n                                payload: block,\n                            }));\n                        }\n                        else {\n                            this.sendMessage(peer, this.createMessage({\n                                command: Command_1.Command.merkleblock,\n                                payload: this.createMerkleBlockPayload({\n                                    block,\n                                    flags: block.transactions.map((transaction) => this.testFilter(peer.data.mutableBloomFilter, transaction)),\n                                }),\n                            }));\n                        }\n                    }\n                }));\n                break;\n            case payload_1.InventoryType.Consensus:\n                getData.hashes.forEach((hash) => {\n                    const payload = this.consensusCache.get(client_common_1.common.uInt256ToHex(hash));\n                    if (payload !== undefined) {\n                        this.sendMessage(peer, this.createMessage({\n                            command: Command_1.Command.consensus,\n                            payload,\n                        }));\n                    }\n                });\n                break;\n            default:\n                utils_1.utils.assertNever(getData.type);\n        }\n    }\n    async onGetHeadersMessageReceived(peer, getBlocks) {\n        const headers = await this.getHeaders(getBlocks, this.blockchain.currentHeader.index);\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.headers,\n            payload: new payload_1.HeadersPayload({ headers }),\n        }));\n    }\n    async onHeadersMessageReceived(peer, headersPayload) {\n        const headers = headersPayload.headers.filter((header) => !this.mutableKnownHeaderHashes.has(header.hash) && !this.tempKnownHeaderHashes.has(header.hashHex));\n        if (headers.length > 0) {\n            headers.forEach((header) => {\n                this.tempKnownHeaderHashes.add(header.hashHex);\n            });\n            try {\n                await this.blockchain.persistHeaders(headers);\n                headers.forEach((header) => {\n                    this.mutableKnownHeaderHashes.add(header.hash);\n                });\n            }\n            finally {\n                headers.forEach((header) => {\n                    this.tempKnownHeaderHashes.delete(header.hashHex);\n                });\n            }\n        }\n        if (this.blockchain.currentHeader.index < peer.data.startHeight) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.getheaders,\n                payload: new payload_1.GetBlocksPayload({\n                    hashStart: [this.blockchain.currentHeader.hash],\n                }),\n            }));\n        }\n    }\n    onInvMessageReceived(peer, inv) {\n        let hashes;\n        switch (inv.type) {\n            case payload_1.InventoryType.Transaction:\n                hashes = inv.hashes.filter((hash) => !this.mutableKnownTransactionHashes.has(hash) &&\n                    !this.tempKnownTransactionHashes.has(client_common_1.common.uInt256ToHex(hash)));\n                break;\n            case payload_1.InventoryType.Block:\n                hashes = inv.hashes.filter((hash) => !this.mutableKnownBlockHashes.has(hash) && !this.tempKnownBlockHashes.has(client_common_1.common.uInt256ToHex(hash)));\n                break;\n            case payload_1.InventoryType.Consensus:\n                hashes = inv.hashes;\n                break;\n            default:\n                utils_1.utils.assertNever(inv.type);\n                hashes = [];\n        }\n        if (hashes.length > 0) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.getdata,\n                payload: new payload_1.InvPayload({ type: inv.type, hashes }),\n            }));\n        }\n    }\n    onMemPoolMessageReceived(peer) {\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Transaction,\n                hashes: Object.values(this.mutableMemPool).map((transaction) => transaction.hash),\n            }),\n        }));\n    }\n    async onTransactionReceived(transaction) {\n        if (this.ready()) {\n            if (transaction.type === node_core_1.TransactionType.Miner) {\n                if (this.mutableConsensus !== undefined) {\n                    this.mutableConsensus.onTransactionReceived(transaction);\n                }\n            }\n            else {\n                await this.relayTransaction(transaction);\n            }\n        }\n    }\n    onVerackMessageReceived(peer) {\n        peer.close();\n    }\n    onVersionMessageReceived(peer) {\n        peer.close();\n    }\n    async getHeaders(getBlocks, maxHeight) {\n        let hashStopIndexPromise = Promise.resolve(maxHeight);\n        if (!getBlocks.hashStop.equals(client_common_1.common.ZERO_UINT256)) {\n            hashStopIndexPromise = this.blockchain.header\n                .tryGet({ hashOrIndex: getBlocks.hashStop })\n                .then((hashStopHeader) => hashStopHeader === undefined ? maxHeight : Math.min(hashStopHeader.index, maxHeight));\n        }\n        const [hashStartHeaders, hashEnd] = await Promise.all([\n            Promise.all(getBlocks.hashStart.map(async (hash) => this.blockchain.header.tryGet({ hashOrIndex: hash }))),\n            hashStopIndexPromise,\n        ]);\n        const hashStartHeader = lodash_1.default.head(lodash_1.default.orderBy(hashStartHeaders.filter(utils_1.utils.notNull), [(header) => header.index]));\n        if (hashStartHeader === undefined) {\n            return [];\n        }\n        const hashStart = hashStartHeader.index + 1;\n        if (hashStart > maxHeight) {\n            return [];\n        }\n        return Promise.all(lodash_1.default.range(hashStart, Math.min(hashStart + GET_BLOCKS_COUNT, hashEnd)).map(async (index) => this.blockchain.header.get({ hashOrIndex: index })));\n    }\n    testFilter(bloomFilterIn, transaction) {\n        const bloomFilter = bloomFilterIn;\n        if (bloomFilter === undefined) {\n            return true;\n        }\n        return (bloomFilter.contains(transaction.hash) ||\n            transaction.outputs.some((output) => bloomFilter.contains(output.address)) ||\n            transaction.inputs.some((input) => bloomFilter.contains(input.serializeWire())) ||\n            transaction.scripts.some((script) => bloomFilter.contains(client_common_1.crypto.toScriptHash(script.verification))) ||\n            (transaction.type === node_core_1.TransactionType.Register &&\n                transaction instanceof node_core_1.RegisterTransaction &&\n                bloomFilter.contains(transaction.asset.admin)));\n    }\n    createMerkleBlockPayload({ block, flags, }) {\n        const tree = new node_core_1.MerkleTree(block.transactions.map((transaction) => transaction.hash)).trim(flags);\n        const mutableBuffer = Buffer.allocUnsafe(Math.floor((flags.length + 7) / 8));\n        for (let i = 0; i < flags.length; i += 1) {\n            if (flags[i]) {\n                mutableBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n            }\n        }\n        return new payload_1.MerkleBlockPayload({\n            version: block.version,\n            previousHash: block.previousHash,\n            merkleRoot: block.merkleRoot,\n            timestamp: block.timestamp,\n            index: block.index,\n            consensusData: block.consensusData,\n            nextConsensus: block.nextConsensus,\n            script: block.script,\n            transactionCount: block.transactions.length,\n            hashes: tree.toHashArray(),\n            flags: mutableBuffer,\n        });\n    }\n    createMessage(value) {\n        return new Message_1.Message({\n            magic: this.blockchain.settings.messageMagic,\n            value,\n        });\n    }\n}\nexports.Node = Node;\n\n//# sourceMappingURL=Node.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Consensus_1 = require(\"./Consensus\");\nexports.Consensus = Consensus_1.Consensus;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst asynciterablex_1 = require(\"@reactivex/ix-es2015-cjs/asynciterable/asynciterablex\");\nconst scan_1 = require(\"@reactivex/ix-es2015-cjs/asynciterable/pipe/scan\");\nconst common_1 = require(\"./common\");\nconst ConsensusContext_1 = require(\"./ConsensusContext\");\nconst ConsensusQueue_1 = require(\"./ConsensusQueue\");\nconst handleConsensusPayload_1 = require(\"./handleConsensusPayload\");\nconst handlePersistBlock_1 = require(\"./handlePersistBlock\");\nconst handleTransactionReceived_1 = require(\"./handleTransactionReceived\");\nconst runConsensus_1 = require(\"./runConsensus\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'consensus' });\nconst MS_IN_SECOND = 1000;\nclass Consensus {\n    constructor({ options, node }) {\n        this.mutableQueue = new ConsensusQueue_1.ConsensusQueue();\n        const privateKey = client_common_1.common.stringToPrivateKey(options.privateKey);\n        const publicKey = client_common_1.crypto.privateKeyToPublicKey(privateKey);\n        const feeAddress = client_common_1.crypto.publicKeyToScriptHash(publicKey);\n        this.options = {\n            privateKey,\n            publicKey,\n            feeAddress,\n            privateNet: options.privateNet,\n        };\n        this.node = node;\n        this.mutableConsensusContext = new ConsensusContext_1.ConsensusContext();\n    }\n    async start() {\n        let disposable = utils_1.noopDisposable;\n        try {\n            await this.pause();\n            this.doStart(this.options);\n            disposable = utils_1.composeDisposables(disposable, async () => {\n                await this.pause();\n            });\n            return disposable;\n        }\n        catch (err) {\n            await disposable();\n            throw err;\n        }\n    }\n    onPersistBlock() {\n        this.mutableQueue.write({ type: 'handlePersistBlock' });\n    }\n    onConsensusPayloadReceived(payload) {\n        this.mutableQueue.write({\n            type: 'handleConsensusPayload',\n            payload,\n        });\n    }\n    onTransactionReceived(transaction) {\n        this.mutableQueue.write({\n            type: 'handleTransactionReceived',\n            transaction,\n        });\n    }\n    async runConsensusNow() {\n        if (this.options.privateNet) {\n            await new Promise((resolve, reject) => {\n                this.mutableQueue.write({ type: 'timer', promise: { resolve, reject } });\n            });\n        }\n        else {\n            throw new Error('Can only force consensus on a private network.');\n        }\n    }\n    nowSeconds() {\n        return this.mutableConsensusContext.nowSeconds();\n    }\n    async fastForwardOffset(seconds) {\n        if (this.options.privateNet) {\n            this.mutableConsensusContext.fastForwardOffset(seconds);\n        }\n        else {\n            throw new Error('Can only fast forward on a private network.');\n        }\n    }\n    async fastForwardToTime(seconds) {\n        if (this.options.privateNet) {\n            this.mutableConsensusContext.fastForwardToTime(seconds);\n        }\n        else {\n            throw new Error('Can only fast forward on a private network.');\n        }\n    }\n    async pause() {\n        this.clearTimer();\n        this.mutableQueue.done();\n        this.mutableQueue = new ConsensusQueue_1.ConsensusQueue();\n        if (this.mutableStartPromise !== undefined) {\n            await this.mutableStartPromise;\n        }\n    }\n    async reset() {\n        this.mutableConsensusContext = new ConsensusContext_1.ConsensusContext();\n    }\n    async resume() {\n        this.doStart(this.options);\n    }\n    doStart(options) {\n        let completed = false;\n        const mutableStartPromise = this.startInternal(options).then(() => {\n            completed = true;\n            this.mutableStartPromise = undefined;\n        });\n        if (!completed) {\n            this.mutableStartPromise = mutableStartPromise;\n        }\n    }\n    async startInternal(options) {\n        logger.info({ name: 'neo_consensus_start' }, 'Consensus started.');\n        const initialResult = await common_1.initializeNewConsensus({\n            blockchain: this.node.blockchain,\n            publicKey: options.publicKey,\n            consensusContext: this.mutableConsensusContext,\n        });\n        await asynciterablex_1.AsyncIterableX.from(this.mutableQueue)\n            .pipe(scan_1.scan(async (context, event) => {\n            let result;\n            switch (event.type) {\n                case 'handlePersistBlock':\n                    result = await handlePersistBlock_1.handlePersistBlock({\n                        blockchain: this.node.blockchain,\n                        publicKey: options.publicKey,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'handleConsensusPayload':\n                    result = await handleConsensusPayload_1.handleConsensusPayload({\n                        context,\n                        node: this.node,\n                        privateKey: options.privateKey,\n                        payload: event.payload,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'handleTransactionReceived':\n                    result = await handleTransactionReceived_1.handleTransactionReceived({\n                        context,\n                        node: this.node,\n                        privateKey: options.privateKey,\n                        transaction: event.transaction,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'timer':\n                    result = await runConsensus_1.runConsensus({\n                        context,\n                        node: this.node,\n                        options,\n                        consensusContext: this.mutableConsensusContext,\n                    }).catch((err) => {\n                        if (event.promise !== undefined) {\n                            event.promise.reject(err);\n                        }\n                        throw err;\n                    });\n                    if (event.promise !== undefined) {\n                        event.promise.resolve();\n                    }\n                    break;\n                default:\n                    utils_1.utils.assertNever(event);\n                    throw new Error('For TS');\n            }\n            return this.handleResult(result);\n        }, this.handleResult(initialResult)))\n            .forEach(() => {\n        });\n        logger.info({ name: 'neo_consensus_stop' }, 'Consensus stopped.');\n    }\n    handleResult(result) {\n        if (result.timerSeconds !== undefined) {\n            this.handleTimer(result.timerSeconds);\n        }\n        return result.context;\n    }\n    handleTimer(mutableTimerSeconds) {\n        this.clearTimer();\n        this.mutableTimer = setTimeout(() => this.mutableQueue.write({ type: 'timer' }), mutableTimerSeconds * MS_IN_SECOND);\n    }\n    clearTimer() {\n        if (this.mutableTimer !== undefined) {\n            clearTimeout(this.mutableTimer);\n            this.mutableTimer = undefined;\n        }\n    }\n}\nexports.Consensus = Consensus;\n\n//# sourceMappingURL=Consensus.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst HeaderContext_1 = require(\"./HeaderContext\");\nconst SignatureSentContext_1 = require(\"./SignatureSentContext\");\nconst ViewChangingContext_1 = require(\"./ViewChangingContext\");\nclass RequestReceivedContext extends HeaderContext_1.HeaderContext {\n    constructor({ viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        super({\n            type: 'backup',\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n            transactions,\n            signatures,\n            header,\n        });\n    }\n    clone({ transactions }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n            signatures: this.signatures,\n        });\n    }\n    cloneViewChanging({ expectedView }) {\n        return new ViewChangingContext_1.ViewChangingContext({\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n    cloneSignatureSent({ signatures, }) {\n        return new SignatureSentContext_1.SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n            signatures,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.RequestReceivedContext = RequestReceivedContext;\n\n//# sourceMappingURL=RequestReceivedContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BlockSentContext_1 = require(\"./BlockSentContext\");\nfunction cloneBlockSent(context) {\n    return new BlockSentContext_1.BlockSentContext({\n        type: context.type,\n        previousHash: context.previousHash,\n        blockIndex: context.blockIndex,\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n    });\n}\nexports.cloneBlockSent = cloneBlockSent;\n\n//# sourceMappingURL=cloneBlockSent.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst InitialContext_1 = require(\"./InitialContext\");\nfunction cloneInitial(context, { type, previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n    return new InitialContext_1.InitialContext({\n        type,\n        previousHash: previousHash === undefined ? context.previousHash : previousHash,\n        blockIndex: blockIndex === undefined ? context.blockIndex : blockIndex,\n        viewNumber,\n        myIndex: myIndex === undefined ? context.myIndex : myIndex,\n        primaryIndex,\n        expectedView: expectedView === undefined ? context.expectedView : expectedView,\n        validators: validators === undefined ? context.validators : validators,\n        blockReceivedTimeSeconds: blockReceivedTimeSeconds === undefined ? context.blockReceivedTimeSeconds : blockReceivedTimeSeconds,\n    });\n}\nexports.cloneInitial = cloneInitial;\n\n//# sourceMappingURL=cloneInitial.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@neo-one/utils\");\nclass ConsensusContext {\n    constructor() {\n        this.mutableFastForwardSeconds = 0;\n    }\n    nowSeconds() {\n        return utils_1.utils.nowSeconds() + this.mutableFastForwardSeconds;\n    }\n    fastForwardOffset(seconds) {\n        if (seconds >= 0) {\n            this.mutableFastForwardSeconds += seconds;\n        }\n        else {\n            throw new Error('Can only fast forward to future time.');\n        }\n    }\n    fastForwardToTime(seconds) {\n        this.fastForwardOffset(seconds - this.nowSeconds());\n    }\n}\nexports.ConsensusContext = ConsensusContext;\n\n//# sourceMappingURL=ConsensusContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ConsensusQueue {\n    constructor() {\n        this.mutableItems = [];\n        this.mutableResolvers = [];\n        this.mutableDoneInternal = false;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async next() {\n        const item = this.mutableItems.shift();\n        if (item !== undefined) {\n            if (item.type === 'error') {\n                return Promise.reject(item.error);\n            }\n            return Promise.resolve({ done: false, value: item.value });\n        }\n        if (this.mutableDoneInternal) {\n            return Promise.resolve({ done: true });\n        }\n        return new Promise((resolve, reject) => {\n            this.mutableResolvers.push({ resolve, reject });\n        });\n    }\n    write(value) {\n        let pushTimer = false;\n        if (value.type === 'handlePersistBlock') {\n            pushTimer = this.mutableItems.some((item) => item.type === 'value' && item.value.type === 'timer');\n            this.clear();\n        }\n        this.push({ type: 'value', value });\n        if (pushTimer) {\n            this.push({ type: 'value', value: { type: 'timer' } });\n        }\n    }\n    error(error) {\n        this.push({ type: 'error', error });\n    }\n    clear() {\n        this.mutableItems = [];\n    }\n    done() {\n        this.clear();\n        this.mutableResolvers.forEach(({ resolve }) => resolve({ done: true }));\n        this.mutableResolvers = [];\n        this.mutableDoneInternal = true;\n    }\n    push(item) {\n        if (this.mutableDoneInternal) {\n            throw new Error('ConsensusQueue already ended');\n        }\n        const resolver = this.mutableResolvers.shift();\n        if (resolver !== undefined) {\n            const { resolve, reject } = resolver;\n            if (item.type === 'error') {\n                reject(item.error);\n            }\n            else {\n                resolve({ done: false, value: item.value });\n            }\n        }\n        else {\n            this.mutableItems.push(item);\n        }\n    }\n}\nexports.ConsensusQueue = ConsensusQueue;\n\n//# sourceMappingURL=ConsensusQueue.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nconst handleChangeView = ({ context: contextIn, node, payload, consensusContext, message, }) => {\n    let context = contextIn;\n    const viewNumber = message.newViewNumber;\n    if (viewNumber > context.expectedView[payload.validatorIndex]) {\n        const mutableExpectedView = [...context.expectedView];\n        mutableExpectedView[payload.validatorIndex] = viewNumber;\n        context = context.cloneExpectedView({ expectedView: mutableExpectedView });\n        if (common_1.checkExpectedView({ context, viewNumber })) {\n            return common_1.initializeConsensus({\n                node,\n                context,\n                viewNumber,\n                consensusContext,\n            });\n        }\n    }\n    return { context };\n};\nconst TEN_MINUTES_IN_SECONDS = 10 * 60;\nconst handlePrepareRequest = async ({ context: contextIn, node, privateKey, payload, consensusContext, message, }) => {\n    let context = contextIn;\n    if (context.type !== 'backup' ||\n        context instanceof context_1.RequestReceivedContext ||\n        payload.validatorIndex !== context.primaryIndex ||\n        payload.timestamp > consensusContext.nowSeconds() + TEN_MINUTES_IN_SECONDS) {\n        return { context };\n    }\n    const header = await node.blockchain.header.get({\n        hashOrIndex: context.previousHash,\n    });\n    if (payload.timestamp <= header.timestamp) {\n        return { context };\n    }\n    const mutableSignatures = [];\n    mutableSignatures[payload.validatorIndex] = message.signature;\n    const newContext = new context_1.RequestReceivedContext({\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n        transactions: {},\n        signatures: mutableSignatures,\n        header: {\n            type: 'new',\n            previousHash: context.previousHash,\n            transactionHashes: message.transactionHashes.map((hash) => client_common_1.common.uInt256ToHex(hash)),\n            blockIndex: context.blockIndex,\n            nonce: message.nonce,\n            timestamp: payload.timestamp,\n            nextConsensus: message.nextConsensus,\n        },\n    });\n    const verified = client_common_1.crypto.verify({\n        message: newContext.header.message,\n        signature: message.signature,\n        publicKey: context.validators[payload.validatorIndex],\n    });\n    if (!verified) {\n        return { context };\n    }\n    let nextContext = newContext;\n    for (const hash of newContext.transactionHashes.slice(1)) {\n        const transaction = node.memPool[hash];\n        if (transaction !== undefined) {\n            const res = await common_1.addTransaction({\n                context: nextContext,\n                node,\n                privateKey,\n                transaction,\n                verify: false,\n                consensusContext,\n            });\n            if (!(res.context instanceof context_1.RequestReceivedContext)) {\n                return res;\n            }\n            nextContext = res.context;\n        }\n    }\n    const result = await common_1.addTransaction({\n        context: nextContext,\n        node,\n        privateKey,\n        transaction: message.minerTransaction,\n        verify: true,\n        consensusContext,\n    });\n    if (!(result.context instanceof context_1.RequestReceivedContext)) {\n        return result;\n    }\n    context = result.context;\n    node.syncMemPool();\n    return { context };\n};\nconst handlePrepareResponse = async ({ context, node, payload, message, }) => {\n    if (context instanceof context_1.HeaderContext &&\n        context.signatures[payload.validatorIndex] === undefined &&\n        client_common_1.crypto.verify({\n            message: context.header.message,\n            signature: message.signature,\n            publicKey: context.validators[payload.validatorIndex],\n        })) {\n        const mutableSignatures = [...context.signatures];\n        mutableSignatures[payload.validatorIndex] = message.signature;\n        const newContext = context.cloneSignatures({ signatures: mutableSignatures });\n        return common_1.checkSignatures({ context: newContext, node });\n    }\n    return { context };\n};\nexports.handleConsensusPayload = async ({ context, node, privateKey, payload, consensusContext, }) => {\n    const { consensusMessage } = payload;\n    if (payload.validatorIndex === context.myIndex ||\n        payload.version !== context.version ||\n        !client_common_1.common.uInt256Equal(payload.previousHash, context.previousHash) ||\n        payload.blockIndex !== context.blockIndex ||\n        payload.validatorIndex >= context.validators.length ||\n        (consensusMessage.type !== node_core_1.ConsensusMessageType.ChangeView && consensusMessage.viewNumber !== context.viewNumber)) {\n        return { context };\n    }\n    switch (consensusMessage.type) {\n        case node_core_1.ConsensusMessageType.ChangeView:\n            return handleChangeView({\n                context,\n                node,\n                payload,\n                consensusContext,\n                message: consensusMessage,\n            });\n        case node_core_1.ConsensusMessageType.PrepareRequest:\n            return handlePrepareRequest({\n                context,\n                node,\n                privateKey,\n                payload,\n                consensusContext,\n                message: consensusMessage,\n            });\n        case node_core_1.ConsensusMessageType.PrepareResponse:\n            return handlePrepareResponse({\n                context,\n                node,\n                payload,\n                message: consensusMessage,\n            });\n        default:\n            utils_1.utils.assertNever(consensusMessage);\n            throw new Error('For TS');\n    }\n};\n\n//# sourceMappingURL=handleConsensusPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"./common\");\nexports.handlePersistBlock = async ({ blockchain, publicKey, consensusContext, }) => common_1.initializeNewConsensus({\n    blockchain,\n    publicKey,\n    consensusContext,\n});\n\n//# sourceMappingURL=handlePersistBlock.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nexports.handleTransactionReceived = async ({ context, node, privateKey, transaction, consensusContext, }) => {\n    if (!(context instanceof context_1.RequestReceivedContext) ||\n        context.transactions[transaction.hashHex] !== undefined ||\n        !context.transactionHashesSet.has(transaction.hashHex)) {\n        return { context };\n    }\n    return common_1.addTransaction({\n        context,\n        node,\n        privateKey,\n        transaction,\n        verify: true,\n        consensusContext,\n    });\n};\n\n//# sourceMappingURL=handleTransactionReceived.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bignumber_js_1 = tslib_1.__importDefault(require(\"bignumber.js\"));\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nconst createMinerTransaction = async ({ node, feeAddress, transactions, nonce, }) => {\n    const networkFee = await node_core_1.Block.calculateNetworkFee(node.blockchain.feeContext, transactions);\n    const outputs = networkFee.isZero()\n        ? []\n        : [\n            new node_core_1.Output({\n                asset: node.blockchain.settings.utilityToken.hash,\n                value: networkFee,\n                address: feeAddress,\n            }),\n        ];\n    return new node_core_1.MinerTransaction({\n        nonce: nonce.mod(node_core_1.utils.UINT_MAX.addn(1)).toNumber(),\n        outputs,\n    });\n};\nconst requestChangeView = ({ context: contextIn, node, privateKey, consensusContext, }) => {\n    let context = contextIn;\n    context = context.cloneExpectedView({\n        expectedView: common_1.incrementExpectedView(context),\n    });\n    common_1.signAndRelayChangeView({ context, node, privateKey });\n    const viewNumber = context.expectedView[context.myIndex];\n    if (common_1.checkExpectedView({ context, viewNumber })) {\n        return common_1.initializeConsensusInitial({\n            blockchain: node.blockchain,\n            context,\n            viewNumber,\n            consensusContext,\n        });\n    }\n    const { secondsPerBlock } = node.blockchain.settings;\n    return {\n        context,\n        timerSeconds: secondsPerBlock << (viewNumber + 1),\n    };\n};\nexports.runConsensus = async ({ context, node, options: { privateKey, feeAddress, privateNet }, consensusContext, }) => {\n    if (context.type === 'primary' && !(context instanceof context_1.RequestSentContext)) {\n        let requestSentContext;\n        if (context instanceof context_1.SignatureSentContext) {\n            requestSentContext = context.cloneRequestSent();\n        }\n        else {\n            const nonce = node_core_1.utils.randomUInt64();\n            let mutableTransactions = Object.values(node.memPool);\n            const minerTransaction = await createMinerTransaction({\n                node,\n                feeAddress,\n                transactions: mutableTransactions,\n                nonce,\n            });\n            if (mutableTransactions.length >= node.blockchain.settings.maxTransactionsPerBlock) {\n                const mutableNetworkFees = await Promise.all(mutableTransactions.map(async (transaction) => {\n                    const networkFee = await transaction.getNetworkFee(node.blockchain.feeContext);\n                    return [transaction, new bignumber_js_1.default(networkFee.toString(10))];\n                }));\n                mutableNetworkFees.sort(([first, a], [second, b]) => b.div(second.size).comparedTo(a.div(first.size)));\n                mutableTransactions = lodash_1.default.take(mutableNetworkFees, node.blockchain.settings.maxTransactionsPerBlock - 1)\n                    .map(([transaction, _unused]) => transaction);\n            }\n            mutableTransactions.unshift(minerTransaction);\n            const [previousHeader, validators] = await Promise.all([\n                node.blockchain.header.get({ hashOrIndex: context.previousHash }),\n                node.blockchain.getValidators(mutableTransactions),\n            ]);\n            const newContext = new context_1.RequestSentContext({\n                viewNumber: context.viewNumber,\n                myIndex: context.myIndex,\n                primaryIndex: context.primaryIndex,\n                expectedView: context.expectedView,\n                validators: context.validators,\n                blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n                transactions: mutableTransactions.reduce((acc, transaction) => (Object.assign(Object.assign({}, acc), { [transaction.hashHex]: transaction })), {}),\n                signatures: [],\n                header: {\n                    type: 'new',\n                    previousHash: context.previousHash,\n                    transactionHashes: mutableTransactions.map((transaction) => transaction.hashHex),\n                    blockIndex: context.blockIndex,\n                    nonce,\n                    timestamp: Math.max(consensusContext.nowSeconds(), previousHeader.timestamp + 1),\n                    nextConsensus: client_common_1.crypto.getConsensusAddress(validators),\n                },\n            });\n            const mutableSignatures = [];\n            mutableSignatures[newContext.myIndex] = client_common_1.crypto.sign({\n                message: newContext.header.message,\n                privateKey,\n            });\n            requestSentContext = newContext.cloneSignatures({ signatures: mutableSignatures });\n        }\n        if (privateNet) {\n            return common_1.checkSignatures({ node, context: requestSentContext });\n        }\n        common_1.signAndRelay({\n            context: requestSentContext,\n            node,\n            privateKey,\n            consensusMessage: new node_core_1.PrepareRequestConsensusMessage({\n                viewNumber: requestSentContext.viewNumber,\n                nonce: requestSentContext.header.consensusData,\n                nextConsensus: requestSentContext.header.nextConsensus,\n                transactionHashes: requestSentContext.transactionHashes.map((hash) => client_common_1.common.hexToUInt256(hash)),\n                minerTransaction: utils_1.utils.nullthrows(requestSentContext.transactions[requestSentContext.transactionHashes[0]]),\n                signature: utils_1.utils.nullthrows(requestSentContext.signatures[requestSentContext.myIndex]),\n            }),\n        });\n        const { secondsPerBlock } = node.blockchain.settings;\n        return {\n            context: requestSentContext,\n            timerSeconds: secondsPerBlock << (requestSentContext.viewNumber + 1),\n        };\n    }\n    if (context instanceof context_1.RequestSentContext || context.type === 'backup') {\n        return requestChangeView({\n            context,\n            node,\n            privateKey,\n            consensusContext,\n        });\n    }\n    return { context };\n};\n\n//# sourceMappingURL=runConsensus.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@neo-one/utils\");\nexports.NegotiationError = utils_1.makeErrorWithCode('NEGOTIATION', (message, reason) => `Negotiation failed. Unexpected message received: ${message.value.command}${reason === undefined ? '' : `. ${reason}`}`);\nexports.AlreadyConnectedError = utils_1.makeErrorWithCode('ALREADY_CONNECTED', (reason) => `Negotiation failed: ${reason}`);\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst stream_1 = require(\"stream\");\nconst Command_1 = require(\"./Command\");\nconst payload_1 = require(\"./payload\");\nexports.COMMAND_LENGTH = 12;\nexports.PAYLOAD_MAX_SIZE = 0x02000000;\nconst calculateChecksum = (buffer) => client_common_1.common.toUInt32LE(client_common_1.crypto.hash256(buffer));\nconst deserializeMessageHeader = ({ context, reader, }) => {\n    if (reader.readUInt32LE() !== context.messageMagic) {\n        throw new client_common_1.InvalidFormatError(`Expected BinaryReader readUInt32LE(0) to equal ${context.messageMagic}. Received: ${context.messageMagic}`);\n    }\n    const command = Command_1.assertCommand(reader.readFixedString(exports.COMMAND_LENGTH));\n    const length = reader.readUInt32LE();\n    if (length > exports.PAYLOAD_MAX_SIZE) {\n        throw new client_common_1.InvalidFormatError(`Expected buffer readout to be less than max payload size of ${exports.PAYLOAD_MAX_SIZE}. Received: ${length}`);\n    }\n    const checksum = reader.readUInt32LE();\n    return { command, length, checksum };\n};\nclass Message {\n    constructor({ magic, value }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.magic = magic;\n        this.value = value;\n    }\n    static deserializeWireBase(options) {\n        const { reader, context } = options;\n        const { command, length, checksum } = deserializeMessageHeader(options);\n        const payloadBuffer = reader.readBytes(length);\n        const payloadBufferChecksum = calculateChecksum(payloadBuffer);\n        if (payloadBufferChecksum !== checksum) {\n            throw new client_common_1.InvalidFormatError(`Expected payloadBuffer checksum to be ${checksum}. Received: ${payloadBufferChecksum}`);\n        }\n        const payloadOptions = {\n            context: options.context,\n            buffer: payloadBuffer,\n        };\n        let value;\n        switch (command) {\n            case Command_1.Command.addr:\n                value = {\n                    command: Command_1.Command.addr,\n                    payload: payload_1.AddrPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.block:\n                value = {\n                    command: Command_1.Command.block,\n                    payload: node_core_1.Block.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.consensus:\n                value = {\n                    command: Command_1.Command.consensus,\n                    payload: node_core_1.ConsensusPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.filteradd:\n                value = {\n                    command: Command_1.Command.filteradd,\n                    payload: payload_1.FilterAddPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.filterclear:\n                value = { command: Command_1.Command.filterclear };\n                break;\n            case Command_1.Command.filterload:\n                value = {\n                    command: Command_1.Command.filterload,\n                    payload: payload_1.FilterLoadPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getaddr:\n                value = { command: Command_1.Command.getaddr };\n                break;\n            case Command_1.Command.getblocks:\n                value = {\n                    command: Command_1.Command.getblocks,\n                    payload: payload_1.GetBlocksPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getdata:\n                value = {\n                    command: Command_1.Command.getdata,\n                    payload: payload_1.InvPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getheaders:\n                value = {\n                    command: Command_1.Command.getheaders,\n                    payload: payload_1.GetBlocksPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.headers:\n                value = {\n                    command: Command_1.Command.headers,\n                    payload: payload_1.HeadersPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.inv:\n                value = {\n                    command: Command_1.Command.inv,\n                    payload: payload_1.InvPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.mempool:\n                value = { command: Command_1.Command.mempool };\n                break;\n            case Command_1.Command.tx:\n                value = {\n                    command: Command_1.Command.tx,\n                    payload: node_core_1.deserializeTransactionWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.verack:\n                value = { command: Command_1.Command.verack };\n                break;\n            case Command_1.Command.version:\n                value = {\n                    command: Command_1.Command.version,\n                    payload: payload_1.VersionPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.alert:\n                value = { command: Command_1.Command.alert };\n                break;\n            case Command_1.Command.merkleblock:\n                value = {\n                    command: Command_1.Command.merkleblock,\n                    payload: payload_1.MerkleBlockPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.notfound:\n                value = { command: Command_1.Command.notfound };\n                break;\n            case Command_1.Command.ping:\n                value = { command: Command_1.Command.ping };\n                break;\n            case Command_1.Command.pong:\n                value = { command: Command_1.Command.pong };\n                break;\n            case Command_1.Command.reject:\n                value = { command: Command_1.Command.reject };\n                break;\n            default:\n                utils_1.utils.assertNever(command);\n                throw new client_common_1.InvalidFormatError(``);\n        }\n        return new this({ magic: context.messageMagic, value });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        const { value } = this;\n        writer.writeUInt32LE(this.magic);\n        writer.writeFixedString(value.command, exports.COMMAND_LENGTH);\n        let payload = Buffer.alloc(0);\n        switch (value.command) {\n            case Command_1.Command.addr:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.block:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.consensus:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.filteradd:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.filterclear:\n                break;\n            case Command_1.Command.filterload:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getaddr:\n                break;\n            case Command_1.Command.getblocks:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getdata:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getheaders:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.headers:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.inv:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.mempool:\n                break;\n            case Command_1.Command.tx:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.verack:\n                break;\n            case Command_1.Command.version:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.alert:\n                break;\n            case Command_1.Command.merkleblock:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.notfound:\n                break;\n            case Command_1.Command.ping:\n                break;\n            case Command_1.Command.pong:\n                break;\n            case Command_1.Command.reject:\n                break;\n            default:\n                utils_1.utils.assertNever(value);\n                throw new client_common_1.InvalidFormatError('Command does not exist');\n        }\n        writer.writeUInt32LE(payload.length);\n        writer.writeUInt32LE(calculateChecksum(payload));\n        writer.writeBytes(payload);\n    }\n}\nexports.Message = Message;\nexports.InvalidMessageTransformEncodingError = utils_1.makeErrorWithCode('INVALID_MESSAGE_TRANSFORM_ENCODING', (message) => message);\nconst SIZE_OF_MESSAGE_HEADER = client_common_1.IOHelper.sizeOfUInt32LE +\n    client_common_1.IOHelper.sizeOfFixedString(exports.COMMAND_LENGTH) +\n    client_common_1.IOHelper.sizeOfUInt32LE +\n    client_common_1.IOHelper.sizeOfUInt32LE;\nclass MessageTransform extends stream_1.Transform {\n    constructor(context) {\n        super({ readableObjectMode: true });\n        this.context = context;\n        this.mutableBuffer = Buffer.from([]);\n    }\n    _transform(chunk, encoding, callback) {\n        if (typeof chunk === 'string') {\n            throw new exports.InvalidMessageTransformEncodingError(`Invalid Message Transform Chunk Type. Expected chunk type to be 'string', found: ${typeof chunk}`);\n        }\n        if (encoding !== 'buffer') {\n            throw new exports.InvalidMessageTransformEncodingError(`Invalid Message Transform Encoding. Expected: 'buffer', found: ${encoding}`);\n        }\n        this.mutableBuffer = Buffer.concat([this.mutableBuffer, chunk]);\n        try {\n            const { remainingBuffer, mutableMessages } = this.processBuffer(new node_core_1.BinaryReader(this.mutableBuffer));\n            this.mutableBuffer = remainingBuffer;\n            mutableMessages.forEach((message) => this.push(message));\n            callback(undefined);\n        }\n        catch (error) {\n            callback(error);\n        }\n    }\n    processBuffer(reader) {\n        if (reader.remaining < SIZE_OF_MESSAGE_HEADER) {\n            return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n        }\n        const { length } = deserializeMessageHeader({\n            context: this.context,\n            reader: reader.clone(),\n        });\n        if (reader.remaining < SIZE_OF_MESSAGE_HEADER + length) {\n            return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n        }\n        const message = Message.deserializeWireBase({\n            context: this.context,\n            reader,\n        });\n        const { remainingBuffer, mutableMessages } = this.processBuffer(reader);\n        mutableMessages.push(message);\n        return { remainingBuffer, mutableMessages };\n    }\n}\nexports.MessageTransform = MessageTransform;\n\n//# sourceMappingURL=Message.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst NetworkAddress_1 = require(\"./NetworkAddress\");\nclass AddrPayload {\n    constructor({ addresses }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.addresses = addresses;\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const addresses = reader.readArray(() => NetworkAddress_1.NetworkAddress.deserializeWireBase(options));\n        return new this({ addresses });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.addresses, (address) => address.serializeWireBase(writer));\n    }\n}\nexports.AddrPayload = AddrPayload;\n\n//# sourceMappingURL=AddrPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass FilterAddPayload {\n    constructor({ data }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.data = data;\n    }\n    static deserializeWireBase({ reader }) {\n        const data = reader.readVarBytesLE(520);\n        return new this({ data });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeVarBytesLE(this.data);\n    }\n}\nexports.FilterAddPayload = FilterAddPayload;\n\n//# sourceMappingURL=FilterAddPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass FilterLoadPayload {\n    constructor({ filter, k, tweak }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.filter = filter;\n        this.k = k;\n        this.tweak = tweak;\n    }\n    static deserializeWireBase({ reader }) {\n        const filter = reader.readVarBytesLE(36000);\n        const k = reader.readUInt8();\n        const tweak = reader.readUInt32LE();\n        if (k > 50) {\n            throw new client_common_1.InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be less than 50. Received: ${k}`);\n        }\n        return new this({ filter, k, tweak });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeVarBytesLE(this.filter);\n        writer.writeUInt8(this.k);\n        writer.writeUInt32LE(this.tweak);\n    }\n}\nexports.FilterLoadPayload = FilterLoadPayload;\n\n//# sourceMappingURL=FilterLoadPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass GetBlocksPayload {\n    constructor({ hashStart, hashStop = client_common_1.common.ZERO_UINT256 }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.hashStart = hashStart;\n        this.hashStop = hashStop;\n    }\n    static deserializeWireBase({ reader }) {\n        const hashStart = reader.readArray(() => reader.readUInt256());\n        const hashStop = reader.readUInt256();\n        return new this({ hashStart, hashStop });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.hashStart, (value) => {\n            writer.writeUInt256(value);\n        });\n        writer.writeUInt256(this.hashStop);\n    }\n}\nexports.GetBlocksPayload = GetBlocksPayload;\n\n//# sourceMappingURL=GetBlocksPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass HeadersPayload {\n    constructor({ headers }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.headers = headers;\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const headers = reader.readArray(() => node_core_1.Header.deserializeWireBase(options));\n        return new this({ headers });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.headers, (header) => header.serializeWireBase(writer));\n    }\n}\nexports.HeadersPayload = HeadersPayload;\n\n//# sourceMappingURL=HeadersPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst InventoryType_1 = require(\"./InventoryType\");\nclass InvPayload {\n    constructor({ type, hashes }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.type = type;\n        this.hashes = hashes;\n    }\n    static deserializeWireBase({ reader }) {\n        const type = InventoryType_1.assertInventoryType(reader.readUInt8());\n        const hashes = reader.readArray(() => reader.readUInt256());\n        return new this({ type, hashes });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeUInt8(this.type);\n        writer.writeArray(this.hashes, (value) => {\n            writer.writeUInt256(value);\n        });\n    }\n}\nexports.InvPayload = InvPayload;\n\n//# sourceMappingURL=InvPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass MerkleBlockPayload extends node_core_1.BlockBase {\n    constructor({ version, previousHash, merkleRoot, timestamp, index, consensusData, nextConsensus, script, transactionCount, hashes, flags, }) {\n        super({\n            version,\n            previousHash,\n            merkleRoot,\n            timestamp,\n            index,\n            consensusData,\n            nextConsensus,\n            script,\n        });\n        this.transactionCount = transactionCount;\n        this.hashes = hashes;\n        this.flags = flags;\n        this.merkleBlockPayloadSizeInternal = node_core_1.utils.lazy(() => super.size +\n            client_common_1.IOHelper.sizeOfUInt32LE +\n            client_common_1.IOHelper.sizeOfArray(this.hashes, () => client_common_1.IOHelper.sizeOfUInt256) +\n            client_common_1.IOHelper.sizeOfVarBytesLE(this.flags));\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const blockBase = super.deserializeBlockBaseWireBase(options);\n        const transactionCount = reader.readVarUIntLE(node_core_1.utils.INT_MAX_VALUE).toNumber();\n        const hashes = reader.readArray(() => reader.readUInt256());\n        const flags = reader.readVarBytesLE();\n        return new this({\n            version: blockBase.version,\n            previousHash: blockBase.previousHash,\n            merkleRoot: blockBase.merkleRoot,\n            timestamp: blockBase.timestamp,\n            index: blockBase.index,\n            consensusData: blockBase.consensusData,\n            nextConsensus: blockBase.nextConsensus,\n            script: blockBase.script,\n            transactionCount,\n            hashes,\n            flags,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    get size() {\n        return this.merkleBlockPayloadSizeInternal();\n    }\n    serializeWireBase(writer) {\n        super.serializeWireBase(writer);\n        writer.writeVarUIntLE(this.transactionCount);\n        writer.writeArray(this.hashes, (hash) => {\n            writer.writeUInt256(hash);\n        });\n        writer.writeVarBytesLE(this.flags);\n    }\n}\nexports.MerkleBlockPayload = MerkleBlockPayload;\n\n//# sourceMappingURL=MerkleBlockPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nexports.SERVICES = {\n    NODE_NETWORK: new bn_js_1.BN(1),\n};\nclass VersionPayload {\n    constructor({ protocolVersion, services, timestamp, port, nonce, userAgent, startHeight, relay, }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.protocolVersion = protocolVersion;\n        this.services = services;\n        this.timestamp = timestamp;\n        this.port = port;\n        this.nonce = nonce;\n        this.userAgent = userAgent;\n        this.startHeight = startHeight;\n        this.relay = relay;\n    }\n    static deserializeWireBase({ reader }) {\n        const protocolVersion = reader.readUInt32LE();\n        const services = reader.readUInt64LE();\n        const timestamp = reader.readUInt32LE();\n        const port = reader.readUInt16LE();\n        const nonce = reader.readUInt32LE();\n        const userAgent = reader.readVarString(1024);\n        const startHeight = reader.readUInt32LE();\n        const relay = reader.readBoolean();\n        return new this({\n            protocolVersion,\n            services,\n            timestamp,\n            port,\n            nonce,\n            userAgent,\n            startHeight,\n            relay,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeUInt32LE(this.protocolVersion);\n        writer.writeUInt64LE(this.services);\n        writer.writeUInt32LE(this.timestamp);\n        writer.writeUInt16LE(this.port);\n        writer.writeUInt32LE(this.nonce);\n        writer.writeVarString(this.userAgent);\n        writer.writeUInt32LE(this.startHeight);\n        writer.writeBoolean(this.relay);\n    }\n}\nexports.VersionPayload = VersionPayload;\n\n//# sourceMappingURL=VersionPayload.js.map\n","import { ConnectedPeer, Endpoint } from '@neo-one/node-core';\n\nexport class Network<Message, PeerData> {\n  public readonly connectedPeers: ReadonlyArray<ConnectedPeer<Message, PeerData>> = [];\n  public blacklistAndClose(_peer: ConnectedPeer<Message, PeerData>): void {\n    // do nothing\n  }\n  public start(): void {\n    // do nothing\n  }\n  public stop(): void {\n    // do nothing\n  }\n  public relay(_buffer: Buffer): void {\n    // do nothing\n  }\n  public permanentlyBlacklist(_endpoint: Endpoint): void {\n    // do nothing\n  }\n  public addEndpoint(_endpoint: Endpoint): void {\n    // do nothing\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./createHandler\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst client_switch_1 = require(\"@neo-one/client-switch\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst operators_1 = require(\"rxjs/operators\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'rpc-handler' });\nclass JSONRPCError {\n    constructor(code, message) {\n        this.code = code;\n        this.message = message;\n    }\n}\nexports.JSONRPCError = JSONRPCError;\nconst RPC_METHODS = {\n    getaccountstate: 'getaccountstate',\n    getassetstate: 'getassetstate',\n    getbestblockhash: 'getbestblockhash',\n    getblock: 'getblock',\n    getblockcount: 'getblockcount',\n    getblockhash: 'getblockhash',\n    getblocksysfee: 'getblocksysfee',\n    getconnectioncount: 'getconnectioncount',\n    getcontractstate: 'getcontractstate',\n    getrawmempool: 'getrawmempool',\n    getrawtransaction: 'getrawtransaction',\n    getstorage: 'getstorage',\n    gettxout: 'gettxout',\n    invoke: 'invoke',\n    invokefunction: 'invokefunction',\n    invokescript: 'invokescript',\n    sendrawtransaction: 'sendrawtransaction',\n    submitblock: 'submitblock',\n    validateaddress: 'validateaddress',\n    getpeers: 'getpeers',\n    relaytransaction: 'relaytransaction',\n    getoutput: 'getoutput',\n    getclaimamount: 'getclaimamount',\n    getallstorage: 'getallstorage',\n    testinvocation: 'testinvocation',\n    gettransactionreceipt: 'gettransactionreceipt',\n    getinvocationdata: 'getinvocationdata',\n    getvalidators: 'getvalidators',\n    getnetworksettings: 'getnetworksettings',\n    runconsensusnow: 'runconsensusnow',\n    updatesettings: 'updatesettings',\n    getsettings: 'getsettings',\n    fastforwardoffset: 'fastforwardoffset',\n    fastforwardtotime: 'fastforwardtotime',\n    reset: 'reset',\n    getneotrackerurl: 'getneotrackerurl',\n    resetproject: 'resetproject',\n    UNKNOWN: 'UNKNOWN',\n    INVALID: 'INVALID',\n};\nconst rpcTag = utils_1.labelToTag(utils_1.Labels.RPC_METHOD);\nconst requestDurations = client_switch_1.globalStats.createMeasureDouble('request/duration', client_switch_1.MeasureUnit.MS);\nconst requestErrors = client_switch_1.globalStats.createMeasureInt64('request/failures', client_switch_1.MeasureUnit.UNIT);\nconst SINGLE_REQUESTS_HISTOGRAM = client_switch_1.globalStats.createView('jsonrpc_server_single_request_duration_ms', requestDurations, client_switch_1.AggregationType.DISTRIBUTION, [rpcTag], 'distribution of request durations', [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000]);\nclient_switch_1.globalStats.registerView(SINGLE_REQUESTS_HISTOGRAM);\nconst SINGLE_REQUEST_ERRORS_COUNTER = client_switch_1.globalStats.createView('jsonrpc_server_single_request_failures_total', requestErrors, client_switch_1.AggregationType.COUNT, [rpcTag], 'total number of request errors');\nclient_switch_1.globalStats.registerView(SINGLE_REQUEST_ERRORS_COUNTER);\nconst createJSONRPCHandler = (handlers) => {\n    const validateRequest = (request) => {\n        if (request !== undefined &&\n            typeof request === 'object' &&\n            request.jsonrpc === '2.0' &&\n            request.method !== undefined &&\n            typeof request.method === 'string' &&\n            (request.params === undefined || Array.isArray(request.params) || typeof request.params === 'object') &&\n            (request.id === undefined || typeof request.id === 'string' || typeof request.id === 'number')) {\n            return request;\n        }\n        throw new JSONRPCError(-32600, 'Invalid Request');\n    };\n    const handleSingleRequest = async (requestIn) => {\n        const startTime = utils_1.utils.nowSeconds();\n        let labels = {};\n        let method = RPC_METHODS.UNKNOWN;\n        try {\n            let request;\n            try {\n                request = validateRequest(requestIn);\n            }\n            finally {\n                if (request !== undefined) {\n                    ({ method } = request);\n                }\n                else if (typeof requestIn === 'object') {\n                    ({ method } = requestIn);\n                }\n                if (RPC_METHODS[method] === undefined) {\n                    method = RPC_METHODS.INVALID;\n                }\n                labels = { [utils_1.Labels.RPC_METHOD]: method };\n            }\n            const handler = handlers[request.method];\n            if (handler === undefined) {\n                throw new JSONRPCError(-32601, 'Method not found');\n            }\n            const { params } = request;\n            let handlerParams;\n            if (params === undefined) {\n                handlerParams = [];\n            }\n            else if (Array.isArray(params)) {\n                handlerParams = params;\n            }\n            else {\n                handlerParams = [params];\n            }\n            const result = await handler(handlerParams);\n            logger.debug(Object.assign({ name: 'jsonrpc_server_single_request' }, labels));\n            client_switch_1.globalStats.record([\n                {\n                    measure: requestDurations,\n                    value: utils_1.utils.nowSeconds() - startTime,\n                },\n            ]);\n            return {\n                jsonrpc: '2.0',\n                result,\n                id: request.id === undefined ? undefined : request.id,\n            };\n        }\n        catch (err) {\n            logger.error(Object.assign(Object.assign({ name: 'jsonrpc_server_single_request' }, labels), { err }));\n            const tags = new client_switch_1.TagMap();\n            tags.set(rpcTag, { value: method });\n            client_switch_1.globalStats.record([\n                {\n                    measure: requestErrors,\n                    value: 1,\n                },\n            ], tags);\n            throw err;\n        }\n    };\n    const handleRequest = async (request) => {\n        if (Array.isArray(request)) {\n            return Promise.all(request.map(async (batchRequest) => handleSingleRequest(batchRequest)));\n        }\n        return handleSingleRequest(request);\n    };\n    const handleRequestSafe = async (labels, request) => {\n        try {\n            let result;\n            try {\n                result = await handleRequest(request);\n                logger.debug(Object.assign({ name: 'jsonrpc_server_request' }, labels));\n            }\n            catch (err) {\n                logger.error(Object.assign(Object.assign({ name: 'jsonrpc_server_request' }, labels), { err }));\n                throw err;\n            }\n            return result;\n        }\n        catch (error) {\n            let errorResponse = {\n                code: -32603,\n                message: error.message === undefined ? 'Internal error' : error.message,\n            };\n            if (error.code !== undefined &&\n                error.message !== undefined &&\n                typeof error.code === 'number' &&\n                typeof error.message === 'string') {\n                errorResponse = { code: error.code, message: error.message };\n            }\n            return {\n                jsonrpc: '2.0',\n                error: errorResponse,\n                id: undefined,\n            };\n        }\n    };\n    return async (request) => handleRequestSafe({ [utils_1.Labels.RPC_TYPE]: 'jsonrpc' }, request);\n};\nconst getTransactionReceipt = (value) => ({\n    blockIndex: value.startHeight,\n    blockHash: client_common_1.JSONHelper.writeUInt256(value.blockHash),\n    transactionIndex: value.index,\n    globalIndex: client_common_1.JSONHelper.writeUInt64(value.globalIndex),\n});\nexports.createHandler = ({ blockchain, node, handleGetNEOTrackerURL, handleResetProject, }) => {\n    const checkHeight = (height) => {\n        if (height < 0 || height > blockchain.currentBlockIndex) {\n            throw new JSONRPCError(-100, 'Invalid Height');\n        }\n    };\n    const handlers = {\n        [RPC_METHODS.getaccountstate]: async (args) => {\n            const hash = client_common_1.crypto.addressToScriptHash({\n                addressVersion: blockchain.settings.addressVersion,\n                address: args[0],\n            });\n            let account = await blockchain.account.tryGet({ hash });\n            if (account === undefined) {\n                account = new node_core_1.Account({ hash });\n            }\n            return account.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getassetstate]: async (args) => {\n            const asset = await blockchain.asset.tryGet({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            if (asset === undefined) {\n                throw new JSONRPCError(-100, 'Unknown asset');\n            }\n            return asset.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getbestblockhash]: async () => client_common_1.JSONHelper.writeUInt256(blockchain.currentBlock.hash),\n        [RPC_METHODS.getblock]: async (args) => {\n            let hashOrIndex = args[0];\n            if (typeof args[0] === 'string') {\n                hashOrIndex = client_common_1.JSONHelper.readUInt256(args[0]);\n            }\n            let watchTimeoutMS;\n            if (args[1] !== undefined && typeof args[1] === 'number' && args[1] !== 1) {\n                watchTimeoutMS = args[1];\n            }\n            else if (args[2] !== undefined && typeof args[2] === 'number') {\n                watchTimeoutMS = args[2];\n            }\n            let block = await blockchain.block.tryGet({ hashOrIndex });\n            if (block === undefined) {\n                if (watchTimeoutMS === undefined) {\n                    throw new JSONRPCError(-100, 'Unknown block');\n                }\n                try {\n                    block = await blockchain.block$\n                        .pipe(operators_1.filter((value) => value.hashHex === args[0] || value.index === args[0]), operators_1.take(1), operators_1.timeout(new Date(Date.now() + watchTimeoutMS)))\n                        .toPromise();\n                }\n                catch (_a) {\n                    throw new JSONRPCError(-100, 'Unknown block');\n                }\n            }\n            if (args[1] === true || args[1] === 1) {\n                return block.serializeJSON(blockchain.serializeJSONContext);\n            }\n            return block.serializeWire().toString('hex');\n        },\n        [RPC_METHODS.getblockcount]: async () => blockchain.currentBlockIndex + 1,\n        [RPC_METHODS.getblockhash]: async (args) => {\n            const height = args[0];\n            checkHeight(height);\n            const block = await blockchain.block.get({ hashOrIndex: height });\n            return client_common_1.JSONHelper.writeUInt256(block.hash);\n        },\n        [RPC_METHODS.getblocksysfee]: async (args) => {\n            const height = args[0];\n            checkHeight(height);\n            const header = await blockchain.header.get({ hashOrIndex: height });\n            const blockData = await blockchain.blockData.get({\n                hash: header.hash,\n            });\n            return blockData.systemFee.toString(10);\n        },\n        [RPC_METHODS.getconnectioncount]: async () => node.connectedPeers.length,\n        [RPC_METHODS.getcontractstate]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const contract = await blockchain.contract.tryGet({ hash });\n            if (contract === undefined) {\n                throw new JSONRPCError(-100, 'Unknown contract');\n            }\n            return contract.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getrawmempool]: async () => Object.values(node.memPool).map((transaction) => client_common_1.JSONHelper.writeUInt256(transaction.hash)),\n        [RPC_METHODS.getrawtransaction]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            let transaction = node.memPool[client_common_1.common.uInt256ToHex(hash)];\n            if (transaction === undefined) {\n                transaction = await blockchain.transaction.tryGet({ hash });\n            }\n            if (transaction === undefined) {\n                throw new JSONRPCError(-100, 'Unknown transaction');\n            }\n            if (args[1] === true || args[1] === 1) {\n                return transaction.serializeJSON(blockchain.serializeJSONContext);\n            }\n            return transaction.serializeWire().toString('hex');\n        },\n        [RPC_METHODS.getstorage]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const key = Buffer.from(args[1], 'hex');\n            const item = await blockchain.storageItem.tryGet({ hash, key });\n            return item === undefined ? undefined : item.value.toString('hex');\n        },\n        [RPC_METHODS.gettxout]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            const [output, spentCoins] = await Promise.all([\n                blockchain.output.tryGet({ hash, index }),\n                blockchain.transactionData.tryGet({ hash }),\n            ]);\n            if (spentCoins !== undefined && spentCoins.endHeights[index] !== undefined) {\n                return undefined;\n            }\n            return output === undefined ? undefined : output.serializeJSON(blockchain.serializeJSONContext, index);\n        },\n        [RPC_METHODS.invoke]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.invokefunction]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.invokescript]: async (args) => {\n            const script = client_common_1.JSONHelper.readBuffer(args[0]);\n            const receipt = await blockchain.invokeScript(script);\n            return {\n                result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n                actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n            };\n        },\n        [RPC_METHODS.sendrawtransaction]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            try {\n                await node.relayTransaction(transaction, { throwVerifyError: true, forceAdd: true });\n                return true;\n            }\n            catch (_a) {\n                return false;\n            }\n        },\n        [RPC_METHODS.submitblock]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.validateaddress]: async (args) => {\n            let scriptHash;\n            try {\n                scriptHash = client_common_1.crypto.addressToScriptHash({\n                    addressVersion: blockchain.settings.addressVersion,\n                    address: args[0],\n                });\n            }\n            catch (_a) {\n            }\n            return { address: args[0], isvalid: scriptHash !== undefined };\n        },\n        [RPC_METHODS.getpeers]: async () => ({\n            connected: node.connectedPeers.map((endpoint) => {\n                const { host, port } = node_core_1.getEndpointConfig(endpoint);\n                return { address: host, port };\n            }),\n        }),\n        [RPC_METHODS.relaytransaction]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            try {\n                const [transactionJSON, result] = await Promise.all([\n                    transaction.serializeJSON(blockchain.serializeJSONContext),\n                    node.relayTransaction(transaction, { forceAdd: true, throwVerifyError: true }),\n                ]);\n                const resultJSON = result.verifyResult === undefined\n                    ? {}\n                    : {\n                        verifyResult: {\n                            verifications: result.verifyResult.verifications.map((verification) => ({\n                                hash: client_common_1.JSONHelper.writeUInt160(verification.hash),\n                                witness: verification.witness.serializeJSON(blockchain.serializeJSONContext),\n                                actions: verification.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                                failureMessage: verification.failureMessage,\n                            })),\n                        },\n                    };\n                return Object.assign(Object.assign({}, resultJSON), { transaction: transactionJSON });\n            }\n            catch (error) {\n                throw new JSONRPCError(-110, `Relay transaction failed: ${error.message}`);\n            }\n        },\n        [RPC_METHODS.getoutput]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            const output = await blockchain.output.tryGet({ hash, index });\n            if (output === undefined) {\n                throw new JSONRPCError(-100, 'Unknown output');\n            }\n            return output.serializeJSON(blockchain.serializeJSONContext, index);\n        },\n        [RPC_METHODS.getclaimamount]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            try {\n                const value = await blockchain.calculateClaimAmount([\n                    new node_core_1.Input({\n                        hash,\n                        index,\n                    }),\n                ]);\n                return client_common_1.common.fixed8ToDecimal(value).toString();\n            }\n            catch (error) {\n                throw new JSONRPCError(-102, error.message);\n            }\n        },\n        [RPC_METHODS.getallstorage]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const items = await blockchain.storageItem\n                .getAll$({ hash })\n                .pipe(operators_1.toArray())\n                .toPromise();\n            return items.map((item) => item.serializeJSON(blockchain.serializeJSONContext));\n        },\n        [RPC_METHODS.testinvocation]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            if (transaction instanceof node_core_1.InvocationTransaction) {\n                const receipt = await blockchain.invokeTransaction(transaction);\n                return {\n                    result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n                    actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                };\n            }\n            throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n        },\n        [RPC_METHODS.gettransactionreceipt]: async (args) => {\n            const transactionData = await blockchain.transactionData.tryGet({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            let watchTimeoutMS;\n            if (args[1] !== undefined && typeof args[1] === 'number') {\n                watchTimeoutMS = args[1];\n            }\n            let result;\n            if (transactionData === undefined) {\n                if (watchTimeoutMS === undefined) {\n                    throw new JSONRPCError(-100, 'Unknown transaction');\n                }\n                try {\n                    result = await blockchain.block$\n                        .pipe(operators_1.switchMap(async () => {\n                        const data = await blockchain.transactionData.tryGet({\n                            hash: client_common_1.JSONHelper.readUInt256(args[0]),\n                        });\n                        return data === undefined ? undefined : getTransactionReceipt(data);\n                    }), operators_1.filter((receipt) => receipt !== undefined), operators_1.take(1), operators_1.timeout(new Date(Date.now() + watchTimeoutMS)))\n                        .toPromise();\n                }\n                catch (_a) {\n                    throw new JSONRPCError(-100, 'Unknown transaction');\n                }\n            }\n            else {\n                result = getTransactionReceipt(transactionData);\n            }\n            return result;\n        },\n        [RPC_METHODS.getinvocationdata]: async (args) => {\n            const transaction = await blockchain.transaction.get({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            const result = await transaction.serializeJSON(blockchain.serializeJSONContext);\n            if (result.type !== 'InvocationTransaction' || result.invocationData === undefined) {\n                throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n            }\n            return result.invocationData;\n        },\n        [RPC_METHODS.getvalidators]: async () => {\n            const validators = await blockchain.validator.all$.pipe(operators_1.toArray()).toPromise();\n            return validators.map((validator) => validator.serializeJSON(blockchain.serializeJSONContext));\n        },\n        [RPC_METHODS.getnetworksettings]: async () => {\n            const fee = blockchain.settings.fees[node_core_1.TransactionType.Issue];\n            const issueGASFee = client_common_1.common.fixed8ToDecimal(fee === undefined ? client_common_1.utils.ZERO : fee);\n            return {\n                issueGASFee: issueGASFee.toString(),\n            };\n        },\n        [RPC_METHODS.runconsensusnow]: async () => {\n            if (node.consensus) {\n                await node.consensus.runConsensusNow();\n            }\n            else {\n                throw new Error('This node does not support triggering consensus.');\n            }\n            return true;\n        },\n        [RPC_METHODS.updatesettings]: async (args) => {\n            const { settings } = blockchain;\n            const newSettings = Object.assign(Object.assign({}, settings), { secondsPerBlock: args[0].secondsPerBlock });\n            blockchain.updateSettings(newSettings);\n            return true;\n        },\n        [RPC_METHODS.getsettings]: async () => ({\n            secondsPerBlock: blockchain.settings.secondsPerBlock,\n        }),\n        [RPC_METHODS.fastforwardoffset]: async (args) => {\n            if (node.consensus) {\n                await node.consensus.fastForwardOffset(args[0]);\n            }\n            else {\n                throw new Error('This node does not support fast forwarding.');\n            }\n            return true;\n        },\n        [RPC_METHODS.fastforwardtotime]: async (args) => {\n            if (node.consensus !== undefined) {\n                await node.consensus.fastForwardToTime(args[0]);\n            }\n            else {\n                throw new Error('This node does not support fast forwarding.');\n            }\n            return true;\n        },\n        [RPC_METHODS.reset]: async () => {\n            if (node.consensus !== undefined) {\n                await node.consensus.pause();\n                await node.consensus.reset();\n            }\n            await node.reset();\n            await blockchain.reset();\n            if (node.consensus !== undefined) {\n                await node.consensus.resume();\n            }\n            return true;\n        },\n        [RPC_METHODS.getneotrackerurl]: async () => handleGetNEOTrackerURL(),\n        [RPC_METHODS.resetproject]: async () => {\n            await handleResetProject();\n            return true;\n        },\n    };\n    return createJSONRPCHandler(handlers);\n};\n\n//# sourceMappingURL=createHandler.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst context_1 = require(\"./context\");\nexports.signAndRelay = ({ node, privateKey, context, consensusMessage, }) => {\n    const payload = node_core_1.ConsensusPayload.sign(new node_core_1.UnsignedConsensusPayload({\n        version: context.version,\n        previousHash: context.previousHash,\n        blockIndex: context.blockIndex,\n        validatorIndex: context.myIndex,\n        consensusMessage,\n    }), privateKey);\n    node.relayConsensusPayload(payload);\n};\nexports.getInitialContextAdd = ({ blockchain, publicKey, validators, blockReceivedTimeSeconds, }) => {\n    const blockIndex = blockchain.currentBlock.index + 1;\n    const primaryIndex = blockIndex % validators.length;\n    const myIndex = lodash_1.default.findIndex(validators, (validator) => client_common_1.common.ecPointEqual(validator, publicKey));\n    return {\n        type: primaryIndex === myIndex ? 'primary' : 'backup',\n        previousHash: blockchain.currentBlock.hash,\n        blockIndex,\n        viewNumber: 0,\n        myIndex,\n        primaryIndex,\n        expectedView: lodash_1.default.range(0, validators.length).map(() => 0),\n        validators,\n        blockReceivedTimeSeconds,\n    };\n};\nfunction initializeConsensusCommon({ context, blockchain, consensusContext, }) {\n    if (context.myIndex < 0) {\n        return { context };\n    }\n    if (context.type === 'primary') {\n        return {\n            context,\n            timerSeconds: Math.max(0, blockchain.settings.secondsPerBlock - (consensusContext.nowSeconds() - context.blockReceivedTimeSeconds)),\n        };\n    }\n    const { secondsPerBlock } = blockchain.settings;\n    return {\n        context,\n        timerSeconds: secondsPerBlock << (context.viewNumber + 1),\n    };\n}\nexports.initializeNewConsensus = async ({ blockchain, publicKey, consensusContext, }) => {\n    const validators = await blockchain.getValidators([]);\n    const blockReceivedTimeSeconds = blockchain.currentBlock.timestamp;\n    const blockIndex = blockchain.currentBlock.index + 1;\n    const primaryIndex = blockIndex % validators.length;\n    const myIndex = lodash_1.default.findIndex(validators, (validator) => client_common_1.common.ecPointEqual(validator, publicKey));\n    const context = new context_1.InitialContext({\n        type: primaryIndex === myIndex ? 'primary' : 'backup',\n        previousHash: blockchain.currentBlock.hash,\n        blockIndex,\n        viewNumber: 0,\n        myIndex,\n        primaryIndex,\n        expectedView: lodash_1.default.range(0, validators.length).map(() => 0),\n        validators,\n        blockReceivedTimeSeconds,\n    });\n    return initializeConsensusCommon({ context, blockchain, consensusContext });\n};\nconst getPrimaryIndexType = ({ context, viewNumber, }) => {\n    let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n    if (primaryIndex < 0) {\n        primaryIndex += context.validators.length;\n    }\n    return {\n        type: primaryIndex === context.myIndex ? 'primary' : 'backup',\n        primaryIndex,\n    };\n};\nexports.initializeConsensus = ({ node, context: contextIn, viewNumber, consensusContext, }) => {\n    if (viewNumber <= 0) {\n        throw new Error('Programming error');\n    }\n    const { blockchain } = node;\n    let context = contextIn;\n    let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n    if (primaryIndex < 0) {\n        primaryIndex += context.validators.length;\n    }\n    const type = primaryIndex === context.myIndex ? 'primary' : 'backup';\n    context =\n        type === 'primary' && context instanceof context_1.SignatureSentContext\n            ? context.clone({ type, primaryIndex, viewNumber })\n            : context_1.cloneInitial(context, { type, primaryIndex, viewNumber });\n    return initializeConsensusCommon({ blockchain, context, consensusContext });\n};\nasync function checkSignatures({ node, context, }) {\n    const signaturesLength = context.signatures.filter((p) => p !== undefined).length;\n    if (signaturesLength >= context.M &&\n        context.transactionHashes.every((hash) => context.transactions[hash] !== undefined)) {\n        const mutablePublicKeyToSignature = {};\n        for (let i = 0, j = 0; i < context.validators.length && j < context.M; i += 1) {\n            const validator = context.validators[i];\n            const signature = context.signatures[i];\n            if (signature !== undefined) {\n                mutablePublicKeyToSignature[client_common_1.common.ecPointToHex(validator)] = signature;\n                j += 1;\n            }\n        }\n        const script = client_common_1.crypto.createMultiSignatureWitness(context.M, context.validators, mutablePublicKeyToSignature, node_core_1.Witness);\n        const block = context.header.clone({\n            transactions: context.transactionHashes.map((hash) => context.transactions[hash]).filter(utils_1.utils.notNull),\n            script,\n        });\n        await node.relayBlock(block);\n        return { context: context_1.cloneBlockSent(context) };\n    }\n    return { context };\n}\nexports.checkSignatures = checkSignatures;\nexports.signAndRelayChangeView = ({ node, privateKey, context, }) => {\n    exports.signAndRelay({\n        node,\n        privateKey,\n        context,\n        consensusMessage: new node_core_1.ChangeViewConsensusMessage({\n            viewNumber: context.viewNumber,\n            newViewNumber: context.expectedView[context.myIndex],\n        }),\n    });\n};\nexports.checkExpectedView = ({ context, viewNumber, }) => context.viewNumber !== viewNumber && context.expectedView.filter((p) => p === viewNumber).length >= context.M;\nexports.initializeConsensusInitial = ({ blockchain, context, viewNumber, consensusContext, }) => {\n    const { primaryIndex, type } = getPrimaryIndexType({ context, viewNumber });\n    return initializeConsensusCommon({\n        blockchain,\n        context: context_1.cloneInitial(context, { type, primaryIndex, viewNumber }),\n        consensusContext,\n    });\n};\nexports.incrementExpectedView = (context) => {\n    const mutableExpectedView = [...context.expectedView];\n    mutableExpectedView[context.myIndex] += 1;\n    return mutableExpectedView;\n};\nconst requestChangeViewBackup = ({ context: contextIn, node, privateKey, consensusContext, }) => {\n    const context = contextIn.cloneViewChanging({\n        expectedView: exports.incrementExpectedView(contextIn),\n    });\n    exports.signAndRelayChangeView({ context, node, privateKey });\n    const viewNumber = context.expectedView[context.myIndex];\n    if (exports.checkExpectedView({ context, viewNumber })) {\n        return exports.initializeConsensusInitial({\n            blockchain: node.blockchain,\n            context,\n            viewNumber,\n            consensusContext,\n        });\n    }\n    return { context };\n};\nexports.addTransaction = async ({ context: contextIn, node, privateKey, transaction, verify, consensusContext, }) => {\n    let context = contextIn;\n    const { blockchain } = node;\n    const tx = await blockchain.transaction.tryGet({ hash: transaction.hash });\n    if (tx !== undefined) {\n        return { context };\n    }\n    if (verify) {\n        let verified = true;\n        try {\n            const { verifications } = await blockchain.verifyTransaction({\n                transaction,\n                memPool: Object.values(context.transactions).filter(utils_1.utils.notNull),\n            });\n            verified = verifications.every(({ failureMessage }) => failureMessage === undefined);\n        }\n        catch (_a) {\n            verified = false;\n        }\n        if (!verified) {\n            return { context };\n        }\n    }\n    context = context.clone({\n        transactions: Object.assign(Object.assign({}, context.transactions), { [transaction.hashHex]: transaction }),\n    });\n    const transactionsLength = Object.values(context.transactions).length;\n    if (context.transactionHashes.length === transactionsLength) {\n        const validators = await blockchain.getValidators(Object.values(context.transactions).filter(utils_1.utils.notNull));\n        const consensusAddress = client_common_1.crypto.getConsensusAddress(validators);\n        if (client_common_1.common.uInt160Equal(consensusAddress, context.header.nextConsensus)) {\n            const mutableSignatures = [...context.signatures];\n            mutableSignatures[context.myIndex] = client_common_1.crypto.sign({\n                message: context.header.message,\n                privateKey,\n            });\n            const newContext = context.cloneSignatureSent({ signatures: mutableSignatures });\n            exports.signAndRelay({\n                node,\n                context: newContext,\n                privateKey,\n                consensusMessage: new node_core_1.PrepareResponseConsensusMessage({\n                    viewNumber: newContext.viewNumber,\n                    signature: utils_1.utils.nullthrows(mutableSignatures[newContext.myIndex]),\n                }),\n            });\n            return checkSignatures({ node, context: newContext });\n        }\n        return requestChangeViewBackup({\n            context,\n            node,\n            privateKey,\n            consensusContext,\n        });\n    }\n    return { context };\n};\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nclass Context {\n    constructor({ type, previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n        this.version = 0;\n        this.type = type;\n        this.previousHash = previousHash;\n        this.blockIndex = blockIndex;\n        this.viewNumber = viewNumber;\n        this.myIndex = myIndex;\n        this.primaryIndex = primaryIndex;\n        this.expectedView = expectedView;\n        this.validators = validators;\n        this.blockReceivedTimeSeconds = blockReceivedTimeSeconds;\n    }\n    get M() {\n        return Math.floor(this.validators.length - (this.validators.length - 1) / 3);\n    }\n    cloneExpectedView(_options) {\n        throw new Error('Not Implemented');\n    }\n    toJSON() {\n        return {\n            class: this.constructor.name,\n            version: this.version,\n            type: this.type,\n            previousHash: client_common_1.common.uInt256ToString(this.previousHash),\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: [...this.expectedView],\n            validators: this.validators.map((validator) => client_common_1.common.ecPointToString(validator)),\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        };\n    }\n}\nexports.Context = Context;\n\n//# sourceMappingURL=Context.js.map\n","import {\n  DeveloperClient,\n  JSONRPCProvider,\n  JSONRPCRequest,\n  JSONRPCResponse,\n  NEOONEDataProvider,\n} from '@neo-one/client-core';\nimport { constants } from '@neo-one/utils';\nimport { FullNode, FullNodeOptions } from './FullNode';\n\n// tslint:disable-next-line no-let\nlet startPromise: Promise<FullNode> | undefined;\nconst start = async (options: FullNodeOptions, provider: JSONRPCLocalProvider, build: () => Promise<void>) => {\n  if (startPromise === undefined) {\n    const node = new FullNode(\n      options,\n      new DeveloperClient(new NEOONEDataProvider({ network: constants.LOCAL_NETWORK_NAME, rpcURL: provider })),\n      build,\n    );\n    startPromise = node.start().then(() => node);\n  }\n\n  return startPromise;\n};\n\nconst handleRequest = async (\n  options: FullNodeOptions,\n  provider: JSONRPCLocalProvider,\n  build: () => Promise<void>,\n  req: JSONRPCRequest,\n) => {\n  const node = await start(options, provider, build);\n  const { watchTimeoutMS, params = [] } = req;\n\n  return node.handleRequest({\n    jsonrpc: '2.0',\n    id: 1,\n    method: req.method,\n    params: watchTimeoutMS === undefined ? params : params.concat([watchTimeoutMS]),\n  });\n};\n\nexport interface JSONRPCLocalProviderOptions {\n  readonly options: FullNodeOptions;\n  readonly build: () => Promise<void>;\n}\n\nexport class JSONRPCLocalProvider extends JSONRPCProvider {\n  public constructor(private readonly options: JSONRPCLocalProviderOptions) {\n    super();\n  }\n\n  public async request(req: JSONRPCRequest): Promise<JSONRPCResponse> {\n    // Something weird with comlink causes the property to be wrapped in a function, so we do this as a workaround.\n    const options = await this.getOptions();\n    const response = await handleRequest(options.options, this, options.build, req);\n\n    return this.handleResponse(response);\n  }\n\n  private async getOptions(): Promise<JSONRPCLocalProviderOptions> {\n    return this.options;\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./loggers\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Context\"), exports);\ntslib_1.__exportStar(require(\"./BlockSentContext\"), exports);\ntslib_1.__exportStar(require(\"./HeaderContext\"), exports);\ntslib_1.__exportStar(require(\"./InitialContext\"), exports);\ntslib_1.__exportStar(require(\"./RequestReceivedContext\"), exports);\ntslib_1.__exportStar(require(\"./RequestSentContext\"), exports);\ntslib_1.__exportStar(require(\"./SignatureSentContext\"), exports);\ntslib_1.__exportStar(require(\"./ViewChangingContext\"), exports);\ntslib_1.__exportStar(require(\"./cloneBlockSent\"), exports);\ntslib_1.__exportStar(require(\"./cloneInitial\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst Context_1 = require(\"./Context\");\nclass HeaderContext extends Context_1.Context {\n    constructor({ type, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        const previousHash = header.type === 'existing' ? header.block.previousHash : header.previousHash;\n        const transactionHashes = header.transactionHashes;\n        const blockIndex = header.type === 'existing' ? header.block.index : header.blockIndex;\n        const nonce = header.type === 'existing' ? header.block.consensusData : header.nonce;\n        const timestamp = header.type === 'existing' ? header.block.timestamp : header.timestamp;\n        const nextConsensus = header.type === 'existing' ? header.block.nextConsensus : header.nextConsensus;\n        super({\n            type,\n            previousHash,\n            blockIndex,\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n        });\n        this.transactions = transactions;\n        this.transactionHashes = transactionHashes;\n        this.transactionHashesSet = new Set(transactionHashes);\n        this.signatures = signatures;\n        if (header.type === 'existing') {\n            this.header = header.block;\n        }\n        else {\n            this.header = new node_core_1.Block({\n                version: this.version,\n                previousHash: this.previousHash,\n                merkleRoot: node_core_1.MerkleTree.computeRoot(this.transactionHashes.map((hash) => client_common_1.common.hexToUInt256(hash))),\n                timestamp,\n                index: this.blockIndex,\n                consensusData: nonce,\n                nextConsensus,\n                transactions: [],\n            });\n        }\n    }\n    cloneSignatures(_options) {\n        throw new Error('Not Implemented');\n    }\n    toJSON() {\n        return Object.assign(Object.assign({}, super.toJSON()), { transactionHashes: this.transactionHashes.map((hash) => client_common_1.common.uInt256ToString(hash)), signatures: this.signatures.map((signature) => signature === undefined ? 'undefined' : signature.toString('hex')) });\n    }\n}\nexports.HeaderContext = HeaderContext;\n\n//# sourceMappingURL=HeaderContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@neo-one/utils\");\nexports.NotFoundError = utils_1.makeErrorWithCode('NOT_FOUND', () => 'Not found.');\nexports.UnknownTypeError = utils_1.makeErrorWithCode('UNKNOWN_TYPE', (type) => `Unknown type${type === undefined ? `.` : `, found: ${type}`}`);\nexports.KeyNotFoundError = utils_1.makeErrorWithCode('KEY_NOT_FOUND', (keyString) => `Key ${keyString} not found in database.`);\nexports.UnknownChangeTypeError = utils_1.makeErrorWithCode('UNKNOWN_CHANGE_TYPE', () => 'Unknown change type.');\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keys_1 = require(\"./keys\");\nexports.keys = keys_1.keys;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nexports.serializeHeaderHash = (hash) => client_common_1.common.uInt256ToBuffer(hash);\nexports.deserializeHeaderHash = (hash) => client_common_1.common.bufferToUInt256(hash);\nexports.serializeBlockHash = (hash) => client_common_1.common.uInt256ToBuffer(hash);\nexports.deserializeBlockHash = (hash) => client_common_1.common.bufferToUInt256(hash);\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@neo-one/utils\");\nexports.GenesisBlockNotRegisteredError = utils_1.makeErrorWithCode('GENESIS_BLOCK_NOT_REGISTERED', () => 'Genesis block was not registered with storage.');\nexports.ScriptVerifyError = utils_1.makeErrorWithCode('SCRIPT_VERIFY', (message) => message);\nexports.WitnessVerifyError = utils_1.makeErrorWithCode('WITNESS_VERIFY', () => 'Witness verification failed.');\nexports.UnknownVerifyError = utils_1.makeErrorWithCode('UNKNOWN_VERIFY', (message) => message);\nexports.InvalidClaimError = utils_1.makeErrorWithCode('INVALID_CLAIM', (asset, governingHash) => `Invalid Claim. Coin with asset: ${asset} does not match governing hash: ${governingHash}`);\nexports.CoinClaimedError = utils_1.makeErrorWithCode('COIN_CLAIMED', (asset, value) => `Coin with asset: ${asset}, value: ${value} is already claimed.`);\nexports.CoinUnspentError = utils_1.makeErrorWithCode('COIN_UNSPENT', (unspentCoins) => `${unspentCoins} coins unspent.`);\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst ValidatorCache_1 = require(\"./ValidatorCache\");\nconst processOutput = async (blockchain, cache, output, negative) => {\n    let { value } = output;\n    if (negative) {\n        value = value.neg();\n    }\n    const [account] = await Promise.all([\n        cache.getAccount(output.address),\n        cache.updateAccountBalance(output.address, output.asset, value),\n    ]);\n    if (client_common_1.common.uInt256Equal(output.asset, blockchain.settings.governingToken.hash) && account.votes.length > 0) {\n        await Promise.all([\n            Promise.all(account.votes.map(async (publicKey) => cache.updateValidatorVotes(publicKey, value))),\n            cache.updateValidatorsCountVotes(account.votes.length - 1, value),\n        ]);\n    }\n};\nconst processTransaction = async (blockchain, cache, transaction) => {\n    let allOutputs = await Promise.all(transaction.inputs.map(async (input) => {\n        const output = await blockchain.output.get(input);\n        return { output, negative: true };\n    }));\n    allOutputs = allOutputs.concat(transaction.outputs.map((output) => ({ output, negative: false })));\n    await Promise.all(allOutputs.map(async ({ output, negative }) => processOutput(blockchain, cache, output, negative)));\n    const accountHashes = [...new Set(allOutputs.map(({ output }) => client_common_1.common.uInt160ToHex(output.address)))].map((hash) => client_common_1.common.hexToUInt160(hash));\n    const touchedValidators = await Promise.all(accountHashes.map(async (hash) => {\n        const account = await cache.getAccount(hash);\n        return account.votes;\n    }));\n    const touchedValidatorsSet = [\n        ...new Set(touchedValidators.reduce((acc, votes) => acc.concat(votes.map((vote) => client_common_1.common.ecPointToHex(vote))), [])),\n    ].map((publicKey) => client_common_1.common.hexToECPoint(publicKey));\n    await Promise.all(touchedValidatorsSet.map(async (publicKey) => {\n        const validator = await cache.getValidator(publicKey);\n        if (!validator.registered && validator.votes.eq(node_core_1.utils.ZERO)) {\n            await cache.deleteValidator(publicKey);\n        }\n    }));\n};\nexports.getDescriptorChanges = async ({ transactions, getAccount, governingTokenHash, }) => {\n    const accountChanges = {};\n    const validatorVotesChanges = {};\n    const validatorRegisteredChanges = {};\n    const validatorsCountChanges = [];\n    const allDescriptors = transactions.reduce((acc, transaction) => acc.concat(transaction.descriptors), []);\n    const accountDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x40);\n    const groupedAccountDescriptors = Object.entries(lodash_1.default.groupBy(accountDescriptors, (descriptor) => client_common_1.common.uInt160ToHex(client_common_1.common.bufferToUInt160(descriptor.key))));\n    await Promise.all(groupedAccountDescriptors.map(async ([hash, descriptors]) => {\n        const account = await getAccount(client_common_1.common.hexToUInt160(hash));\n        const balance = account.getBalance(governingTokenHash);\n        for (const vote of account.votes) {\n            const voteHex = client_common_1.common.ecPointToHex(vote);\n            validatorVotesChanges[voteHex] = (validatorVotesChanges[voteHex] === undefined\n                ? node_core_1.utils.ZERO\n                : validatorVotesChanges[voteHex]).sub(balance);\n        }\n        const descriptor = descriptors[descriptors.length - 1];\n        const reader = new node_core_1.BinaryReader(descriptor.value);\n        const votes = reader.readArray(() => reader.readECPoint());\n        if (votes.length !== account.votes.length) {\n            if (account.votes.length > 0) {\n                validatorsCountChanges[account.votes.length - 1] = (validatorsCountChanges[account.votes.length - 1] === undefined\n                    ? node_core_1.utils.ZERO\n                    : validatorsCountChanges[account.votes.length - 1]).sub(balance);\n            }\n            if (votes.length > 0) {\n                validatorsCountChanges[votes.length - 1] = (validatorsCountChanges[votes.length - 1] ===\n                    undefined\n                    ? node_core_1.utils.ZERO\n                    : validatorsCountChanges[votes.length - 1]).add(balance);\n            }\n        }\n        accountChanges[hash] = votes;\n        for (const vote of votes) {\n            const voteHex = client_common_1.common.ecPointToHex(vote);\n            validatorVotesChanges[voteHex] = (validatorVotesChanges[voteHex] === undefined\n                ? node_core_1.utils.ZERO\n                : validatorVotesChanges[voteHex]).add(balance);\n        }\n    }));\n    const validatorDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x48);\n    for (const descriptor of validatorDescriptors) {\n        const publicKey = client_common_1.common.bufferToECPoint(descriptor.key);\n        validatorRegisteredChanges[client_common_1.common.ecPointToHex(publicKey)] = descriptor.value.some((byte) => byte !== 0);\n    }\n    const validatorChanges = {};\n    for (const [publicKey, votes] of Object.entries(validatorVotesChanges)) {\n        validatorChanges[publicKey] = { votes };\n    }\n    for (const [publicKey, registered] of Object.entries(validatorRegisteredChanges)) {\n        const current = validatorChanges[publicKey] === undefined ? {} : validatorChanges[publicKey];\n        validatorChanges[publicKey] = {\n            registered,\n            votes: current.votes,\n        };\n    }\n    return {\n        accountChanges,\n        validatorChanges,\n        validatorsCountChanges,\n    };\n};\nexports.processStateTransaction = async ({ validatorChanges, validatorsCountChanges, tryGetValidatorsCount, addValidatorsCount, updateValidatorsCount, tryGetValidator, addValidator, deleteValidator, updateValidator, }) => {\n    const validatorsCount = await tryGetValidatorsCount();\n    const mutableValidatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n    [...validatorsCountChanges.entries()].forEach(([index, value]) => {\n        mutableValidatorsCountVotes[index] = value;\n    });\n    await Promise.all([\n        Promise.all(Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n            const publicKey = client_common_1.common.hexToECPoint(publicKeyHex);\n            const validator = await tryGetValidator({ publicKey });\n            if (validator === undefined) {\n                await addValidator(new node_core_1.Validator({\n                    publicKey,\n                    registered,\n                    votes,\n                }));\n            }\n            else if (((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n                ((votes !== undefined && votes.eq(node_core_1.utils.ZERO)) || (votes === undefined && validator.votes.eq(node_core_1.utils.ZERO)))) {\n                await deleteValidator({ publicKey: validator.publicKey });\n            }\n            else {\n                await updateValidator(validator, { votes, registered });\n            }\n        })),\n        validatorsCount === undefined\n            ? addValidatorsCount(new node_core_1.ValidatorsCount({\n                votes: mutableValidatorsCountVotes,\n            }))\n            : updateValidatorsCount(validatorsCount, {\n                votes: mutableValidatorsCountVotes,\n            }),\n    ]);\n};\nexports.getValidators = async (blockchain, transactions) => {\n    const cache = new ValidatorCache_1.ValidatorCache(blockchain);\n    await Promise.all(transactions.map(async (transaction) => processTransaction(blockchain, cache, transaction)));\n    const { validatorChanges, validatorsCountChanges } = await exports.getDescriptorChanges({\n        transactions: transactions.filter((transaction) => transaction.type === node_core_1.TransactionType.State && transaction instanceof node_core_1.StateTransaction),\n        getAccount: async (hash) => cache.getAccount(hash),\n        governingTokenHash: blockchain.settings.governingToken.hashHex,\n    });\n    await exports.processStateTransaction({\n        validatorChanges,\n        validatorsCountChanges,\n        tryGetValidatorsCount: async () => cache.getValidatorsCount(),\n        addValidatorsCount: async (value) => cache.addValidatorsCount(value),\n        updateValidatorsCount: async (update) => {\n            await cache.updateValidatorsCount(update);\n        },\n        tryGetValidator: async (key) => cache.getValidator(key.publicKey),\n        addValidator: async (validator) => cache.addValidator(validator),\n        deleteValidator: async (key) => cache.deleteValidator(key.publicKey),\n        updateValidator: async (value, update) => cache.updateValidator(value.publicKey, update),\n    });\n    const [validatorsCount, validators] = await Promise.all([cache.getValidatorsCount(), cache.getAllValidators()]);\n    const numValidators = Math.max(node_core_1.utils.weightedAverage(node_core_1.utils\n        .weightedFilter(validatorsCount.votes\n        .map((votes, count) => ({ count, votes: votes === undefined ? node_core_1.utils.ZERO : votes }))\n        .filter(({ votes }) => votes.gt(node_core_1.utils.ZERO)), 0.25, 0.75, ({ count }) => new bn_js_1.BN(count))\n        .map(([{ count }, weight]) => ({ value: count, weight }))), blockchain.settings.standbyValidators.length);\n    const standbyValidatorsSet = new Set(blockchain.settings.standbyValidators.map((publicKey) => client_common_1.common.ecPointToHex(publicKey)));\n    const validatorsPublicKeySet = new Set(lodash_1.default.take(validators\n        .filter((validator) => (validator.registered && validator.votes.gt(node_core_1.utils.ZERO)) ||\n        standbyValidatorsSet.has(client_common_1.common.ecPointToHex(validator.publicKey)))\n        .sort((aValidator, bValidator) => aValidator.votes.eq(bValidator.votes)\n        ? client_common_1.common.ecPointCompare(aValidator.publicKey, bValidator.publicKey)\n        : -aValidator.votes.cmp(bValidator.votes))\n        .map((validator) => client_common_1.common.ecPointToHex(validator.publicKey)), numValidators));\n    const standbyValidatorsArray = [...standbyValidatorsSet];\n    for (let i = 0; i < standbyValidatorsArray.length && validatorsPublicKeySet.size < numValidators; i += 1) {\n        validatorsPublicKeySet.add(standbyValidatorsArray[i]);\n    }\n    const validatorsPublicKeys = [...validatorsPublicKeySet].map((hex) => client_common_1.common.hexToECPoint(hex));\n    return validatorsPublicKeys.sort((aKey, bKey) => client_common_1.common.ecPointCompare(aKey, bKey));\n};\n\n//# sourceMappingURL=getValidators.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nexports.wrapExecuteScripts = async (execute) => {\n    try {\n        const result = await execute();\n        if (result.state === client_common_1.VMState.Halt) {\n            return new node_core_1.InvocationResultSuccess({\n                gasConsumed: result.gasConsumed,\n                gasCost: result.gasCost,\n                stack: result.stack,\n            });\n        }\n        return new node_core_1.InvocationResultError({\n            gasConsumed: result.gasConsumed,\n            gasCost: result.gasCost,\n            stack: result.stack,\n            message: result.errorMessage === undefined ? 'Unknown Error' : result.errorMessage,\n        });\n    }\n    catch (error) {\n        return new node_core_1.InvocationResultError({\n            gasConsumed: client_common_1.utils.ZERO,\n            gasCost: client_common_1.utils.ZERO,\n            stack: [],\n            message: error.message,\n        });\n    }\n};\n\n//# sourceMappingURL=wrapExecuteScripts.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Context_1 = require(\"./Context\");\nclass BlockSentContext extends Context_1.Context {\n    cloneExpectedView({ expectedView }) {\n        return new BlockSentContext({\n            type: this.type,\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.BlockSentContext = BlockSentContext;\n\n//# sourceMappingURL=BlockSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Context_1 = require(\"./Context\");\nclass InitialContext extends Context_1.Context {\n    cloneExpectedView({ expectedView }) {\n        return new InitialContext({\n            type: this.type,\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.InitialContext = InitialContext;\n\n//# sourceMappingURL=InitialContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst HeaderContext_1 = require(\"./HeaderContext\");\nconst RequestSentContext_1 = require(\"./RequestSentContext\");\nclass SignatureSentContext extends HeaderContext_1.HeaderContext {\n    clone({ type, primaryIndex, viewNumber, }) {\n        return new SignatureSentContext({\n            type,\n            viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneRequestSent() {\n        return new RequestSentContext_1.RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.SignatureSentContext = SignatureSentContext;\n\n//# sourceMappingURL=SignatureSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst HeaderContext_1 = require(\"./HeaderContext\");\nclass RequestSentContext extends HeaderContext_1.HeaderContext {\n    constructor({ viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        super({\n            type: 'primary',\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n            transactions,\n            signatures,\n            header,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.RequestSentContext = RequestSentContext;\n\n//# sourceMappingURL=RequestSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Context_1 = require(\"./Context\");\nclass ViewChangingContext extends Context_1.Context {\n    constructor({ previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n        super({\n            type: 'backup',\n            previousHash,\n            blockIndex,\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new ViewChangingContext({\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.ViewChangingContext = ViewChangingContext;\n\n//# sourceMappingURL=ViewChangingContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@neo-one/utils\");\nvar Command;\n(function (Command) {\n    Command[\"addr\"] = \"addr\";\n    Command[\"block\"] = \"block\";\n    Command[\"consensus\"] = \"consensus\";\n    Command[\"filteradd\"] = \"filteradd\";\n    Command[\"filterclear\"] = \"filterclear\";\n    Command[\"filterload\"] = \"filterload\";\n    Command[\"getaddr\"] = \"getaddr\";\n    Command[\"getblocks\"] = \"getblocks\";\n    Command[\"getdata\"] = \"getdata\";\n    Command[\"getheaders\"] = \"getheaders\";\n    Command[\"headers\"] = \"headers\";\n    Command[\"inv\"] = \"inv\";\n    Command[\"mempool\"] = \"mempool\";\n    Command[\"tx\"] = \"tx\";\n    Command[\"verack\"] = \"verack\";\n    Command[\"version\"] = \"version\";\n    Command[\"alert\"] = \"alert\";\n    Command[\"merkleblock\"] = \"merkleblock\";\n    Command[\"notfound\"] = \"notfound\";\n    Command[\"ping\"] = \"ping\";\n    Command[\"pong\"] = \"pong\";\n    Command[\"reject\"] = \"reject\";\n})(Command = exports.Command || (exports.Command = {}));\nexports.InvalidCommandError = utils_1.makeErrorWithCode('INVALID_COMMAND', (command) => `Invalid Command. Found: ${command}`);\nconst isCommand = (command) => Command[command] !== undefined;\nexports.assertCommand = (command) => {\n    if (isCommand(command)) {\n        return command;\n    }\n    throw new exports.InvalidCommandError(command);\n};\n\n//# sourceMappingURL=Command.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AddrPayload_1 = require(\"./AddrPayload\");\nexports.AddrPayload = AddrPayload_1.AddrPayload;\nvar FilterAddPayload_1 = require(\"./FilterAddPayload\");\nexports.FilterAddPayload = FilterAddPayload_1.FilterAddPayload;\nvar FilterLoadPayload_1 = require(\"./FilterLoadPayload\");\nexports.FilterLoadPayload = FilterLoadPayload_1.FilterLoadPayload;\nvar GetBlocksPayload_1 = require(\"./GetBlocksPayload\");\nexports.GetBlocksPayload = GetBlocksPayload_1.GetBlocksPayload;\nvar HeadersPayload_1 = require(\"./HeadersPayload\");\nexports.HeadersPayload = HeadersPayload_1.HeadersPayload;\nvar InvPayload_1 = require(\"./InvPayload\");\nexports.InvPayload = InvPayload_1.InvPayload;\nvar MerkleBlockPayload_1 = require(\"./MerkleBlockPayload\");\nexports.MerkleBlockPayload = MerkleBlockPayload_1.MerkleBlockPayload;\nvar NetworkAddress_1 = require(\"./NetworkAddress\");\nexports.NetworkAddress = NetworkAddress_1.NetworkAddress;\nvar VersionPayload_1 = require(\"./VersionPayload\");\nexports.VersionPayload = VersionPayload_1.VersionPayload;\nexports.SERVICES = VersionPayload_1.SERVICES;\nvar InventoryType_1 = require(\"./InventoryType\");\nexports.InventoryType = InventoryType_1.InventoryType;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst ip_address_1 = require(\"ip-address\");\nconst BYTE_LENGTH = 16;\nclass NetworkAddress {\n    constructor({ host, port, timestamp, services }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.host = host;\n        this.port = port;\n        this.timestamp = timestamp;\n        this.services = services;\n    }\n    static deserializeWireBase({ reader }) {\n        const timestamp = reader.readUInt32LE();\n        const services = reader.readUInt64LE();\n        const address = ip_address_1.Address6.fromByteArray([...reader.readBytes(16)]);\n        const port = reader.readUInt16BE();\n        const canonical = address == undefined ? '' : address.canonicalForm();\n        return new this({\n            timestamp,\n            services,\n            host: canonical == undefined ? '' : canonical,\n            port,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    static isValid(host) {\n        const address = this.getAddress6(host);\n        if (address == undefined) {\n            return false;\n        }\n        try {\n            address.toByteArray();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    static getAddress6(host) {\n        const parts = host.split('.');\n        return parts.length === 4 ? ip_address_1.Address6.fromAddress4(host) : new ip_address_1.Address6(host);\n    }\n    serializeWireBase(writer) {\n        const address = NetworkAddress.getAddress6(this.host);\n        if (address == undefined) {\n            throw new client_common_1.InvalidFormatError('Network IP address undefined');\n        }\n        writer.writeUInt32LE(this.timestamp);\n        writer.writeUInt64LE(this.services);\n        const addressSerialized = Buffer.from(address.toByteArray());\n        writer.writeBytes(Buffer.concat([Buffer.alloc(BYTE_LENGTH - addressSerialized.length, 0), addressSerialized]));\n        writer.writeUInt16BE(this.port);\n    }\n}\nexports.NetworkAddress = NetworkAddress;\n\n//# sourceMappingURL=NetworkAddress.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@neo-one/utils\");\nvar InventoryType;\n(function (InventoryType) {\n    InventoryType[InventoryType[\"Transaction\"] = 1] = \"Transaction\";\n    InventoryType[InventoryType[\"Block\"] = 2] = \"Block\";\n    InventoryType[InventoryType[\"Consensus\"] = 224] = \"Consensus\";\n})(InventoryType = exports.InventoryType || (exports.InventoryType = {}));\nexports.InvalidInventoryTypeError = utils_1.makeErrorWithCode('INVALID_INVENTORY_TYPE', (inventoryType) => `Expected inventory type, found: ${inventoryType}`);\nconst isInventoryType = (inventoryType) => InventoryType[inventoryType] !== undefined;\nexports.assertInventoryType = (inventoryType) => {\n    if (isInventoryType(inventoryType)) {\n        return inventoryType;\n    }\n    throw new exports.InvalidInventoryTypeError(inventoryType);\n};\n\n//# sourceMappingURL=InventoryType.js.map\n"],"sourceRoot":""}