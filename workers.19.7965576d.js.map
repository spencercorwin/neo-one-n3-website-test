{"version":3,"sources":["webpack:///ts.init.ts","webpack:///AsyncLanguageService.ts","webpack:///create.ts"],"names":["expose","self","versionNumber","createLanguageService","fs","fileNamesIn","compilerOptions","isSmartContract","tmpFS","versions","Map","changes$","pipe","change","set","id","seq","subscribe","fileNames","concat","host","getNewLine","useCaseSensitiveFileNames","getScriptFileNames","getCurrentDirectory","getDefaultLibFileName","opts","result","getDefaultLibFilePath","slice","getCompilationSettings","getScriptVersion","fileNameIn","fileName","has","current","getVersion","version","get","undefined","getScriptSnapshot","textIn","readFileSync","text","getText","start","end","substring","getLength","length","getChangeRange","getScriptKind","substr","lastIndexOf","ScriptKind","TS","TSX","JS","JSX","allowJs","clearFiles","diagnostics","forEach","diag","file","related","relatedInformation","diag2","convertFormattingOptions","options","ConvertTabsToSpaces","insertSpaces","TabSize","tabSize","IndentSize","IndentStyle","Smart","NewLineCharacter","InsertSpaceAfterCommaDelimiter","InsertSpaceAfterSemicolonInForStatements","InsertSpaceBeforeAndAfterBinaryOperators","InsertSpaceAfterKeywordsInControlFlowStatements","InsertSpaceAfterFunctionKeywordForAnonymousFunctions","InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis","InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets","InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces","PlaceOpenBraceOnNewLineForControlBlocks","PlaceOpenBraceOnNewLineForFunctions","convertTags","tags","map","tag","name","label","match","join","preferences","includeCompletionsForModuleExports","includeCompletionsWithInsertText","defaultFormatOptions","convertTabsToSpaces","indentSize","indentStyle","newLineCharacter","insertSpaceAfterCommaDelimiter","insertSpaceAfterSemicolonInForStatements","insertSpaceBeforeAndAfterBinaryOperators","insertSpaceAfterKeywordsInControlFlowStatements","insertSpaceAfterFunctionKeywordForAnonymousFunctions","insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis","insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets","insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces","placeOpenBraceOnNewLineForControlBlocks","placeOpenBraceOnNewLineForFunctions","TRIGGER_CHARACTERS","Set","AsyncLanguageService","endpoint","getSyntacticDiagnostics","files","this","languageService","then","withTmpFS","diagnostic","message","flattenDiagnosticMessageText","messageText","getSemanticDiagnostics","Promise","all","getCompilerOptionsDiagnostics","_fileName","getCompletionsAtPosition","position","triggerCharacterIn","triggerCharacter","getCompletionEntryDetails","entry","formatOptions","source","parseCompletionEntryDetails","async","details","contents","displayPartsToString","displayParts","documentation","kind","codeActions","getCodeFixesAtPosition","errorCodes","getSignatureHelpItems","createSignatures","info","signatures","items","item","signature","parameters","prefixDisplayParts","p","i","a","parameter","value","push","separatorDisplayParts","suffixDisplayParts","activeSignature","selectedItemIndex","activeParameter","argumentIndex","getQuickInfoAtPosition","parseInfoAtPosition","textSpan","getOccurrencesAtPosition","getDefinitionAtPosition","getReferencesAtPosition","getNavigationBarItems","getFormattingEditsForDocument","getFormattingEditsForRange","optionsIn","getFormattingEditsAfterKeystroke","postion","ch","getEmitOutput","func","clear","Object","entries","path","content","createFileSystem","getFileSystemDBID"],"mappings":"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","file":"workers.19.7965576d.js","sourcesContent":["import { comlink } from '@neo-one/worker';\nimport { AsyncLanguageService } from './AsyncLanguageService';\n\ncomlink.expose(AsyncLanguageService, self);\n","/// <reference types=\"monaco-editor/monaco\" />\n// tslint:disable no-implicit-dependencies no-submodule-imports promise-function-async\nimport {\n  createCompilerHost,\n  createFSHost,\n  getSmartContractPath,\n  normalizePath,\n  PouchDBFileSystem,\n} from '@neo-one/local-browser';\nimport { getSemanticDiagnostics } from '@neo-one/smart-contract-compiler';\nimport { comlink } from '@neo-one/worker';\nimport { map } from 'rxjs/operators';\nimport ts from 'typescript';\nimport { createFileSystem } from '../engine/create';\n\ninterface Options {\n  readonly compilerOptions: ts.CompilerOptions;\n  readonly isSmartContract: boolean;\n  readonly id: string;\n  readonly endpoint: comlink.Endpoint;\n  readonly fileNames: readonly string[];\n}\n\ninterface ParsedBase {\n  readonly tags?: string;\n  readonly documentation?: string;\n  readonly contents: string;\n}\n\ninterface ParsedInfo extends ParsedBase {\n  readonly textSpan: ts.TextSpan;\n}\n\ninterface ParsedDetails extends ParsedBase {\n  readonly name: string;\n  readonly kind: ts.ScriptElementKind;\n  // tslint:disable-next-line:readonly-array\n  readonly codeActions?: ts.CodeAction[];\n}\n\nexport interface FlattenedDiagnostic extends ts.Diagnostic {\n  readonly message: string;\n}\n\n// tslint:disable-next-line no-let\nlet versionNumber = 0;\nconst getVersion = () => {\n  const current = versionNumber;\n  versionNumber += 1;\n\n  return `${current}`;\n};\n\nconst createLanguageService = (\n  fs: PouchDBFileSystem,\n  fileNamesIn: readonly string[],\n  compilerOptions: ts.CompilerOptions,\n  isSmartContract: boolean,\n  tmpFS: Map<string, string>,\n): ts.LanguageService => {\n  const versions = new Map<string, string>();\n  fs.changes$\n    .pipe(\n      map((change) => {\n        versions.set(change.id, `${change.seq}`);\n      }),\n    )\n    .subscribe();\n\n  const fileNames = isSmartContract\n    ? fileNamesIn.concat([getSmartContractPath('global.d.ts'), getSmartContractPath('index.d.ts')])\n    : fileNamesIn;\n\n  const host: ts.LanguageServiceHost = {\n    ...createFSHost(fs),\n    getNewLine: () => '\\n',\n    useCaseSensitiveFileNames: () => true,\n    getScriptFileNames: () => [...fileNames],\n    getCurrentDirectory: () => '/',\n    getDefaultLibFileName: (opts: ts.CompilerOptions) => {\n      const result = ts.getDefaultLibFilePath(opts);\n\n      return `/node_modules/typescript/lib/${result.slice(2)}`;\n    },\n    getCompilationSettings: (): ts.CompilerOptions => compilerOptions,\n    getScriptVersion: (fileNameIn: string): string => {\n      const fileName = normalizePath(fileNameIn);\n      if (tmpFS.has(fileName)) {\n        return getVersion();\n      }\n\n      const version = versions.get(fileName);\n\n      return version === undefined ? '-1' : version;\n    },\n    getScriptSnapshot: (fileNameIn: string): ts.IScriptSnapshot | undefined => {\n      try {\n        const fileName = normalizePath(fileNameIn);\n\n        let textIn = tmpFS.get(fileName);\n        if (textIn === undefined) {\n          textIn = fs.readFileSync(fileName);\n        }\n\n        const text = textIn;\n\n        return {\n          getText: (start, end) => text.substring(start, end),\n          getLength: () => text.length,\n          getChangeRange: () => undefined,\n        };\n      } catch {\n        return undefined;\n      }\n    },\n    getScriptKind: (fileName: string): ts.ScriptKind => {\n      const suffix = fileName.substr(fileName.lastIndexOf('.') + 1);\n      switch (suffix) {\n        case 'ts':\n          return ts.ScriptKind.TS;\n        case 'tsx':\n          return ts.ScriptKind.TSX;\n        case 'js':\n          return ts.ScriptKind.JS;\n        case 'jsx':\n          return ts.ScriptKind.JSX;\n        default:\n          return compilerOptions.allowJs ? ts.ScriptKind.JS : ts.ScriptKind.TS;\n      }\n    },\n  };\n\n  return ts.createLanguageService(host);\n};\n\nconst clearFiles = (diagnostics: readonly ts.Diagnostic[]) => {\n  // Clear the `file` field, which cannot be JSON'yfied because it\n  // contains cyclic data structures.\n  diagnostics.forEach((diag) => {\n    // tslint:disable-next-line no-object-mutation\n    diag.file = undefined;\n    const related = diag.relatedInformation as ts.Diagnostic[] | undefined;\n    if (related !== undefined) {\n      related.forEach((diag2) => {\n        // tslint:disable-next-line no-object-mutation\n        diag2.file = undefined;\n      });\n    }\n  });\n};\n\nconst convertFormattingOptions = (options: monaco.languages.FormattingOptions): ts.FormatCodeOptions => ({\n  ConvertTabsToSpaces: options.insertSpaces,\n  TabSize: options.tabSize,\n  IndentSize: options.tabSize,\n  IndentStyle: ts.IndentStyle.Smart,\n  NewLineCharacter: '\\n',\n  InsertSpaceAfterCommaDelimiter: true,\n  InsertSpaceAfterSemicolonInForStatements: true,\n  InsertSpaceBeforeAndAfterBinaryOperators: true,\n  InsertSpaceAfterKeywordsInControlFlowStatements: true,\n  InsertSpaceAfterFunctionKeywordForAnonymousFunctions: true,\n  InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n  InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n  InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n  PlaceOpenBraceOnNewLineForControlBlocks: false,\n  PlaceOpenBraceOnNewLineForFunctions: false,\n});\nconst convertTags = (tags: readonly ts.JSDocTagInfo[] | undefined) =>\n  tags\n    ? // tslint:disable-next-line:prefer-template\n      '\\n\\n' +\n      tags\n        .map((tag) => {\n          if (tag.name === 'example' && tag.text) {\n            return `*@${tag.name}*\\n` + '```typescript-internal\\n' + tag.text + '\\n```\\n';\n          }\n          const label = `*@${tag.name}*`;\n          if (!tag.text) {\n            return label;\n          }\n\n          return label + (tag.text.match(/\\r\\n|\\n/g) ? ' \\n' + tag.text : ` - ${tag.text}`);\n        })\n        .join('  \\n\\n')\n    : '';\n\nconst preferences = { includeCompletionsForModuleExports: true, includeCompletionsWithInsertText: true };\nconst defaultFormatOptions: ts.FormatCodeSettings = {\n  convertTabsToSpaces: true,\n  tabSize: 2,\n  indentSize: 2,\n  indentStyle: ts.IndentStyle.Smart,\n  newLineCharacter: '\\n',\n  insertSpaceAfterCommaDelimiter: true,\n  insertSpaceAfterSemicolonInForStatements: true,\n  insertSpaceBeforeAndAfterBinaryOperators: true,\n  insertSpaceAfterKeywordsInControlFlowStatements: true,\n  insertSpaceAfterFunctionKeywordForAnonymousFunctions: true,\n  insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n  insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n  insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n  placeOpenBraceOnNewLineForControlBlocks: false,\n  placeOpenBraceOnNewLineForFunctions: false,\n};\n\nconst TRIGGER_CHARACTERS = new Set(['.', '\"', \"'\", '`', '/', '@', '<']);\n\nexport class AsyncLanguageService {\n  private readonly fs: Promise<PouchDBFileSystem>;\n  private readonly tmpFS: Map<string, string>;\n  private readonly languageService: Promise<ts.LanguageService>;\n  private readonly isSmartContract: boolean;\n\n  public constructor({ id, endpoint, isSmartContract, compilerOptions, fileNames }: Options) {\n    this.fs = createFileSystem(id, endpoint);\n    this.tmpFS = new Map();\n    this.languageService = this.fs.then((fs) =>\n      createLanguageService(fs, fileNames, compilerOptions, isSmartContract, this.tmpFS),\n    );\n    this.isSmartContract = isSmartContract;\n  }\n\n  public readonly getSyntacticDiagnostics = (\n    fileName: string,\n    files: { readonly [key: string]: string },\n  ): Promise<readonly FlattenedDiagnostic[]> =>\n    this.languageService.then((languageService) =>\n      this.withTmpFS(files, () => {\n        const diagnostics = languageService.getSyntacticDiagnostics(fileName);\n        clearFiles(diagnostics);\n\n        return diagnostics.map((diagnostic) => ({\n          ...diagnostic,\n          message: ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n'),\n        }));\n      }),\n    );\n\n  public readonly getSemanticDiagnostics = (\n    fileName: string,\n    files: { readonly [key: string]: string },\n  ): Promise<readonly FlattenedDiagnostic[]> =>\n    Promise.all([this.fs, this.languageService]).then(([fs, languageService]) =>\n      this.withTmpFS(files, () => {\n        const diagnostics = this.isSmartContract\n          ? getSemanticDiagnostics(fileName, languageService, createCompilerHost({ fs }))\n          : languageService.getSemanticDiagnostics(fileName);\n        clearFiles(diagnostics);\n\n        return diagnostics.map((diagnostic) => ({\n          ...diagnostic,\n          message: ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n'),\n        }));\n      }),\n    );\n\n  public readonly getCompilerOptionsDiagnostics = (_fileName: string): Promise<readonly ts.Diagnostic[]> =>\n    this.languageService.then((languageService) => {\n      const diagnostics = languageService.getCompilerOptionsDiagnostics();\n      clearFiles(diagnostics);\n\n      return diagnostics;\n    });\n\n  public readonly getCompletionsAtPosition = (\n    fileName: string,\n    position: number,\n    triggerCharacterIn: string | undefined,\n    files: { readonly [key: string]: string },\n  ): Promise<ts.CompletionInfo | undefined> =>\n    this.languageService.then((languageService) =>\n      this.withTmpFS(files, () => {\n        let triggerCharacter: ts.CompletionsTriggerCharacter | undefined;\n        if (triggerCharacterIn !== undefined && TRIGGER_CHARACTERS.has(triggerCharacterIn)) {\n          triggerCharacter = triggerCharacterIn as ts.CompletionsTriggerCharacter;\n        }\n\n        return languageService.getCompletionsAtPosition(fileName, position, { ...preferences, triggerCharacter });\n      }),\n    );\n\n  public readonly getCompletionEntryDetails = (\n    fileName: string,\n    position: number,\n    entry: string,\n    formatOptions: ts.FormatCodeOptions | ts.FormatCodeSettings = defaultFormatOptions,\n    source?: string,\n  ): Promise<ts.CompletionEntryDetails | undefined> =>\n    this.languageService.then((languageService) =>\n      languageService.getCompletionEntryDetails(fileName, position, entry, formatOptions, source, preferences),\n    );\n\n  public readonly parseCompletionEntryDetails = async (\n    fileName: string,\n    position: number,\n    entry: string,\n    formatOptions: ts.FormatCodeOptions | ts.FormatCodeSettings = defaultFormatOptions,\n    source?: string,\n  ): Promise<ParsedDetails | undefined> => {\n    const details = await this.getCompletionEntryDetails(fileName, position, entry, formatOptions, source);\n    if (!details) {\n      return undefined;\n    }\n\n    return {\n      contents: ts.displayPartsToString(details.displayParts),\n      documentation: ts.displayPartsToString(details.documentation),\n      tags: convertTags(details.tags),\n      name: details.name,\n      kind: details.kind,\n      codeActions: details.codeActions,\n    };\n  };\n\n  public readonly getCodeFixesAtPosition = (\n    fileName: string,\n    start: number,\n    end: number,\n    errorCodes: readonly number[],\n    files: { readonly [key: string]: string },\n  ): Promise<readonly ts.CodeFixAction[]> =>\n    this.languageService.then((languageService) =>\n      this.withTmpFS(files, () =>\n        languageService.getCodeFixesAtPosition(fileName, start, end, errorCodes, defaultFormatOptions, preferences),\n      ),\n    );\n\n  public readonly getSignatureHelpItems = (\n    fileName: string,\n    position: number,\n    files: { readonly [key: string]: string },\n  ): Promise<ts.SignatureHelpItems | undefined> =>\n    this.languageService.then((languageService) =>\n      this.withTmpFS(files, () => languageService.getSignatureHelpItems(fileName, position, undefined)),\n    );\n\n  public readonly createSignatures = async (\n    fileName: string,\n    position: number,\n    files: { readonly [key: string]: string },\n  ): Promise<\n    | {\n        readonly activeSignature: number;\n        readonly activeParameter: number;\n        readonly signatures: readonly monaco.languages.SignatureInformation[];\n      }\n    | undefined\n  > => {\n    const info = await this.getSignatureHelpItems(fileName, position, files);\n    if (!info) {\n      return undefined;\n    }\n\n    const signatures: monaco.languages.SignatureInformation[] = [];\n\n    info.items.forEach((item) => {\n      const signature: monaco.languages.SignatureInformation = {\n        label: '',\n        documentation: undefined,\n        parameters: [],\n      };\n      // tslint:disable-next-line:no-object-mutation\n      signature.label += ts.displayPartsToString(item.prefixDisplayParts);\n      item.parameters.forEach((p, i, a) => {\n        const label = ts.displayPartsToString(p.displayParts);\n        const parameter: monaco.languages.ParameterInformation = {\n          label,\n          documentation: {\n            value: ts.displayPartsToString(p.documentation),\n          },\n        };\n        // tslint:disable-next-line:no-object-mutation\n        signature.label += label;\n        // tslint:disable-next-line:no-array-mutation\n        signature.parameters.push(parameter);\n        if (i < a.length - 1) {\n          // tslint:disable-next-line:no-object-mutation\n          signature.label += ts.displayPartsToString(item.separatorDisplayParts);\n        }\n      });\n      // tslint:disable-next-line:no-object-mutation\n      signature.label += ts.displayPartsToString(item.suffixDisplayParts);\n      // tslint:disable-next-line:no-array-mutation\n      signatures.push(signature);\n    });\n\n    return {\n      activeSignature: info.selectedItemIndex,\n      activeParameter: info.argumentIndex,\n      signatures,\n    };\n  };\n\n  public readonly getQuickInfoAtPosition = (fileName: string, position: number): Promise<ts.QuickInfo | undefined> =>\n    this.languageService.then((languageService) => languageService.getQuickInfoAtPosition(fileName, position));\n\n  public readonly parseInfoAtPosition = async (fileName: string, position: number): Promise<ParsedInfo | undefined> => {\n    const info = await this.getQuickInfoAtPosition(fileName, position);\n    if (!info) {\n      return undefined;\n    }\n\n    return {\n      textSpan: info.textSpan,\n      tags: convertTags(info.tags),\n      documentation: ts.displayPartsToString(info.documentation),\n      contents: ts.displayPartsToString(info.displayParts),\n    };\n  };\n\n  public readonly getOccurrencesAtPosition = (\n    fileName: string,\n    position: number,\n  ): Promise<readonly ts.ReferenceEntry[] | undefined> =>\n    // tslint:disable-next-line deprecation\n    this.languageService.then((languageService) => languageService.getOccurrencesAtPosition(fileName, position));\n\n  public readonly getDefinitionAtPosition = (\n    fileName: string,\n    position: number,\n  ): Promise<readonly ts.DefinitionInfo[] | undefined> =>\n    this.languageService.then((languageService) => languageService.getDefinitionAtPosition(fileName, position));\n\n  public readonly getReferencesAtPosition = (\n    fileName: string,\n    position: number,\n  ): Promise<readonly ts.ReferenceEntry[] | undefined> =>\n    this.languageService.then((languageService) => languageService.getReferencesAtPosition(fileName, position));\n\n  public readonly getNavigationBarItems = (fileName: string): Promise<readonly ts.NavigationBarItem[]> =>\n    this.languageService.then((languageService) => languageService.getNavigationBarItems(fileName));\n\n  public readonly getFormattingEditsForDocument = (\n    fileName: string,\n    options: ts.FormatCodeOptions,\n  ): Promise<readonly ts.TextChange[]> =>\n    this.languageService.then((languageService) => languageService.getFormattingEditsForDocument(fileName, options));\n\n  public readonly getFormattingEditsForRange = (\n    fileName: string,\n    start: number,\n    end: number,\n    optionsIn: monaco.languages.FormattingOptions,\n  ): Promise<readonly ts.TextChange[]> => {\n    const options = convertFormattingOptions(optionsIn);\n\n    return this.languageService.then((languageService) =>\n      languageService.getFormattingEditsForRange(fileName, start, end, options),\n    );\n  };\n\n  public readonly getFormattingEditsAfterKeystroke = (\n    fileName: string,\n    postion: number,\n    ch: string,\n    optionsIn: monaco.languages.FormattingOptions,\n  ): Promise<readonly ts.TextChange[]> => {\n    const options = convertFormattingOptions(optionsIn);\n\n    return this.languageService.then((languageService) =>\n      languageService.getFormattingEditsAfterKeystroke(fileName, postion, ch, options),\n    );\n  };\n\n  public readonly getEmitOutput = (fileName: string): Promise<ts.EmitOutput> =>\n    this.languageService.then((languageService) => languageService.getEmitOutput(fileName));\n\n  private withTmpFS<T>(files: { readonly [key: string]: string }, func: () => T): T {\n    this.tmpFS.clear();\n    Object.entries(files).forEach(([path, content]) => {\n      this.tmpFS.set(path, content);\n    });\n    try {\n      return func();\n    } finally {\n      this.tmpFS.clear();\n    }\n  }\n}\n\nexport interface ICreateData {\n  readonly compilerOptions: ts.CompilerOptions;\n  readonly isSmartContract: boolean;\n  readonly fileSystemID: string;\n}\n","// tslint:disable no-submodule-imports\nimport { createPouchDBFileSystem, PouchDBFileSystem } from '@neo-one/local-browser';\nimport { comlink } from '@neo-one/worker';\n\nexport const getFileSystemDBID = (id: string) => `${id}-fs`;\nexport const createFileSystem = async (\n  id: string,\n  endpoint: comlink.Endpoint | ServiceWorkerContainer,\n): Promise<PouchDBFileSystem> => createPouchDBFileSystem(getFileSystemDBID(id), endpoint);\nexport const createTranspileCache = async (\n  id: string,\n  endpoint: comlink.Endpoint | ServiceWorkerContainer,\n): Promise<PouchDBFileSystem> => createPouchDBFileSystem(`${id}-transpile`, endpoint);\n"],"sourceRoot":""}