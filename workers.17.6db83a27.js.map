{"version":3,"sources":["webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/errors.js","webpack:///jsonRPCLocalProvider.init.ts","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/createMain.js","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/common.js","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/createTest.js","webpack:///./packages/neo-one-node-storage-common/dist/cjs/index.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/common.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/errors.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/getValidators.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/wrapExecuteScripts.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/BlockSentContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/InitialContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/SignatureSentContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/RequestSentContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/ViewChangingContext.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/Command.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/index.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/NetworkAddress.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/InventoryType.js","webpack:///FullNode.ts","webpack:///constants.ts","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/index.js","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/main.js","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/serde.js","webpack:///./packages/neo-one-node-neo-settings/dist/cjs/test.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/index.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/levelUpStorage.js","webpack:///./packages/neo-one-node-storage-common/dist/cjs/keys.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/convertChange.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/read.js","webpack:///./packages/neo-one-node-storage-levelup/dist/cjs/streamToObservable.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/index.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/Blockchain.js","webpack:///./packages/neo-one-logger/dist/cjs/loggers.js","webpack:///./packages/neo-one-logger-config/dist/cjs/index.js","webpack:///./packages/neo-one-logger-config/dist/cjs/pretty.js","webpack:///./packages/neo-one-logger/dist/cjs/types.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/ValidatorCache.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/WriteBatchBlockchain.js","webpack:///./packages/neo-one-node-blockchain/dist/cjs/StorageCache.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/index.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/Node.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/index.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/Consensus.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/RequestReceivedContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/types.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/cloneBlockSent.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/cloneInitial.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/ConsensusContext.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/ConsensusQueue.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/handleConsensusPayload.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/handlePersistBlock.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/handleTransactionReceived.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/runConsensus.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/errors.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/Message.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/AddrPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/FilterAddPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/FilterLoadPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/GetBlocksPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/HeadersPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/InvPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/MerkleBlockPayload.js","webpack:///./packages/neo-one-node-protocol/dist/cjs/payload/VersionPayload.js","webpack:///Network.ts","webpack:///./packages/neo-one-node-rpc-handler/dist/cjs/index.js","webpack:///./packages/neo-one-node-rpc-handler/dist/cjs/createHandler.js","webpack:///JSONRPCLocalProvider.ts","webpack:///./packages/neo-one-node-consensus/dist/cjs/common.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/Context.js","webpack:///./packages/neo-one-logger/dist/cjs/index.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/index.js","webpack:///./packages/neo-one-node-consensus/dist/cjs/context/HeaderContext.js"],"names":["Object","defineProperty","exports","value","UnknownChangeTypeError","KeyNotFoundError","UnknownTypeError","NotFoundError","utils_1","makeErrorWithCode","type","undefined","keyString","expose","self","createMain","client_common_1","node_core_1","common_1","DEFAULT_VALIDATORS","privateNet","standbyValidators","standbyValidatorsIn","secondsPerBlock","address","addressIn","map","common","stringToECPoint","consensusAddress","asUInt160","Buffer","from","crypto","getConsensusAddress","toScriptHash","createMultiSignatureVerificationScript","length","stringToUInt160","commonSettings","genesisBlock","governingToken","utilityToken","decrementInterval","generationAmount","maxTransactionsPerBlock","memPoolSize","fees","TransactionType","Enrollment","fixed8FromDecimal","Issue","Publish","Register","registerValidatorFee","messageMagic","addressVersion","NEO_ADDRESS_VERSION","privateKeyVersion","NEO_PRIVATE_KEY_VERSION","vm","storageContext","v0","index","MAX_TRANSACTION_PER_BLOCK","SECONDS_PER_BLOCK","DECREMENT_INTERVAL","ISSUE_AMOUNT_PRIVATE","GENERATION_AMOUNT_PRIVATE","GENERATION_AMOUNT","bn_js_1","ONE_HUNDRED_MILLION","getGenesisBlock","Block","previousHash","ZERO_UINT256","timestamp","consensusData","BN","nextConsensus","script","Witness","invocation","verification","Op","PUSH1","transactions","MinerTransaction","nonce","IssueTransaction","version","outputs","Output","asset","hash","amount","scripts","PUSH0","filter","utils","notNull","scriptBuilder","ScriptBuilder","emitOp","admin","build","RegisterTransaction","AssetType","UtilityToken","name","precision","owner","ECPOINT_INFINITY","getUtilityToken","GoverningToken","getGoverningToken","createTest","keys_1","enumerable","get","keys","deserializeBlockHash","serializeBlockHash","deserializeHeaderHash","serializeHeaderHash","uInt256ToBuffer","bufferToUInt256","CoinUnspentError","CoinClaimedError","InvalidClaimError","UnknownVerifyError","WitnessVerifyError","ScriptVerifyError","GenesisBlockNotRegisteredError","message","governingHash","unspentCoins","getValidators","processStateTransaction","getDescriptorChanges","tslib_1","lodash_1","__importDefault","ValidatorCache_1","processTransaction","async","blockchain","cache","transaction","allOutputs","Promise","all","inputs","input","output","negative","concat","neg","account","getAccount","updateAccountBalance","uInt256Equal","settings","votes","publicKey","updateValidatorVotes","updateValidatorsCountVotes","processOutput","accountHashes","Set","uInt160ToHex","hexToUInt160","touchedValidators","touchedValidatorsSet","reduce","acc","vote","ecPointToHex","hexToECPoint","validator","getValidator","registered","eq","ZERO","deleteValidator","governingTokenHash","accountChanges","validatorVotesChanges","validatorRegisteredChanges","validatorsCountChanges","allDescriptors","descriptors","accountDescriptors","descriptor","groupedAccountDescriptors","entries","default","groupBy","bufferToUInt160","key","balance","getBalance","voteHex","sub","reader","BinaryReader","readArray","readECPoint","add","validatorDescriptors","bufferToECPoint","some","byte","validatorChanges","current","tryGetValidatorsCount","addValidatorsCount","updateValidatorsCount","tryGetValidator","addValidator","updateValidator","validatorsCount","mutableValidatorsCountVotes","forEach","publicKeyHex","Validator","ValidatorsCount","ValidatorCache","State","StateTransaction","hashHex","getValidatorsCount","update","validators","getAllValidators","numValidators","Math","max","weightedAverage","weightedFilter","count","gt","weight","standbyValidatorsSet","validatorsPublicKeySet","take","has","sort","aValidator","bValidator","ecPointCompare","cmp","standbyValidatorsArray","i","size","hex","aKey","bKey","wrapExecuteScripts","execute","result","state","VMState","Halt","InvocationResultSuccess","gasConsumed","gasCost","stack","InvocationResultError","errorMessage","error","BlockSentContext","Context_1","Context","expectedView","this","blockIndex","viewNumber","myIndex","primaryIndex","blockReceivedTimeSeconds","InitialContext","SignatureSentContext","HeaderContext_1","RequestSentContext_1","HeaderContext","signatures","header","block","transactionHashes","RequestSentContext","super","ViewChangingContext","assertCommand","InvalidCommandError","Command","command","isCommand","AddrPayload_1","AddrPayload","FilterAddPayload_1","FilterAddPayload","FilterLoadPayload_1","FilterLoadPayload","GetBlocksPayload_1","GetBlocksPayload","HeadersPayload_1","HeadersPayload","InvPayload_1","InvPayload","MerkleBlockPayload_1","MerkleBlockPayload","NetworkAddress_1","NetworkAddress","VersionPayload_1","VersionPayload","SERVICES","InventoryType_1","InventoryType","ip_address_1","host","port","services","serializeWire","createSerializeWire","serializeWireBase","bind","readUInt32LE","readUInt64LE","Address6","fromByteArray","readBytes","readUInt16BE","canonical","canonicalForm","options","deserializeWireBase","context","buffer","getAddress6","toByteArray","_a","split","fromAddress4","writer","InvalidFormatError","writeUInt32LE","writeUInt64LE","addressSerialized","writeBytes","alloc","writeUInt16BE","assertInventoryType","InvalidInventoryTypeError","inventoryType","isInventoryType","FullNode","developerClient","startPromise","startInternal","then","mutableDisposable","data","primaryPrivateKey","stringToPrivateKey","PRIVATE_NET_PRIVATE_KEY","primaryPublicKey","PRIVATE_NET_PUBLIC_KEY","addPublicKey","uInt160ToString","privateKeyToScriptHash","ecPointToString","storage","db","id","create","nodeOptions","consensus","privateKey","privateKeyToString","node","createNetwork","start","handleResetProject","reset","handleGetNEOTrackerURL","updateSettings","constants","__exportStar","main","createMain_1","mainCache","mainSettings","deserializeSettings","serializeSettings","toString","fromPairs","fee","JSON","stringify","deserializeWire","deserializeTransactionWire","test","createTest_1","testCache","testSettings","levelUpStorage_1","levelUpStorage","node_storage_common_1","__importStar","convertChange_1","errors_1","read","getHash","hashOrIndex","serializeHeaderIndexHashKey","notFound","headerBase","createReadStorage","serializeKey","typeKeyToSerializeKey","deserializeValue","Header","getHeader","tryGet","createTryGet","tryGetLatest","createTryGetLatest","latestKey","maxHeaderHashKey","deserializeResult","blockBase","getBlock","maxBlockHashKey","blockData","BlockData","createReadAllStorage","minKey","accountMinKey","maxKey","accountMaxKey","Account","accountUnclaimed","createReadGetAllStorage","getMinKey","getAccountUnclaimedKeyMin","getMaxKey","getAccountUnclaimedKeyMax","AccountUnclaimed","accountUnspent","getAccountUnspentKeyMin","getAccountUnspentKeyMax","AccountUnspent","action","getActionKeyMin","getActionKeyMax","deserializeActionWire","Asset","transactionData","TransactionData","contract","Contract","storageItem","getStorageItemKeyMin","getStorageItemKeyMax","StorageItem","validatorMinKey","validatorMaxKey","invocationData","InvocationData","createReadMetadataStorage","validatorsCountKey","close","changeSet","changes","convertChange","converted","push","batch","resolve","reject","createKeyStream","on","createPrefix","createMax","accountKeyPrefix","accountUnclaimedKeyPrefix","accountUnspentKeyPrefix","actionKeyPrefix","assetKeyPrefix","blockKeyPrefix","blockDataKeyPrefix","headerKeyPrefix","headerHashKeyPrefix","transactionKeyPrefix","outputKeyPrefix","transactionDataKeyPrefix","contractKeyPrefix","storageItemKeyPrefix","validatorKeyPrefix","invocationDataKeyPrefix","settingsPrefix","createSerializeAccountInputKey","prefix","uInt256ToString","createGetAccountInputKeyMin","createGetAccountInputKeyMax","join","serializeActionKey","createSerializeUInt160Key","serializeUInt160Key","createSerializeUInt256Key","serializeUInt256Key","indexStart","indexStop","convertDeleteChange","change","assertNever","changeIn","convertAddChange","createTryGetMetadata","createAll$","operators_1","streamToObservable_1","code","serialized","streamToObservable","createValueStream","gte","lte","pipe","readStorage","all$","getAll$","rxjs_1","getStream","Observable","observer","stream","done","cleanup","removeListener","onEnd","onError","onData","complete","next","once","Blockchain_1","Blockchain","logger_1","js_priority_queue_1","getValidators_1","wrapExecuteScripts_1","WriteBatchBlockchain_1","logger","createChild","nodeLogger","component","mutablePersistingBlocks","mutableBlockQueue","comparator","a","b","mutableInQueue","mutableRunning","mutableBlock$","Subject","debug","calculateClaimAmount","claims","spentCoins","claim","tryGetSpentCoin","filteredSpentCoinsIn","filteredSpentCoins","spentCoin","claimed","coins","coin","startHeight","endHeight","getSystemFee","systemFee","verifyScript","scriptContainer","witness","builder","emitAppCallVerification","uInt160Equal","createWriteBlockchain","mutableActions","globalActionIndex","executeResult","executeScripts","triggerType","TriggerType","Verification","NULL_ACTION","gas","listeners","onLog","scriptHash","LogAction","ONE","onNotify","args","NotificationAction","actions","Fault","assign","failureMessage","asBoolean","tryGetInvocationData","contracts","assetHash","contractHashes","contractHash","actionIndexStart","actionIndexStop","toArray","toPromise","deletedContractHashes","migratedContractHashes","voteUpdates","storageChanges","tryGetTransactionData","getUnclaimed","values","getUnspent","isSpent","endHeights","mutableCurrentBlock","currentBlock","mutablePreviousBlock","previousBlock","mutableCurrentHeader","currentHeader","settings$","BehaviorSubject","deserializeWireContext","feeContext","serializeJSONContext","persistHeaders","persistBlock","getValue","doneRunningPromise","mutableDoneRunningResolve","info","unsafe","queue","persistBlocksAsync","_headers","verify","tryGetBlock","tryGetHeader","getAsset","getOutput","tryGetAccount","currentHeight","payload","currentIndex","currentBlockHash","memPool","verifications","currentBlockIndex","includes","InvocationTransaction","ONE_HUNDRED_FIXED8","invokeTransaction","ScriptContainerType","Transaction","Application","skipWitnessVerify","stop","entry","cleanBlockQueue","entryNonNull","logData","Labels","NEO_BLOCK_INDEX","persistBlockInternal","err","dequeBlockQueue","dequeue","verifyBlock","commit","getChangeSet","WriteBatchBlockchain","getFinalLogger","setGlobalLogLevel","testLogger","httpLogger","cliLogger","rpcLogger","serverLogger","editorLogger","logger_config_1","pino_1","createLogger","service","browser","base","prettyPrint","getPretty","extreme","browserOptions","window","origin","asObject","loggers","level","final","parent","bindings","child","setPretty","pretty","newPretty","mutableAccounts","mutableValidators","assetHex","uInt256ToHex","balances","Error","newValidator","mutablePublicKeyToValidator","mutableValidatorsCount","slice","StorageCache_1","currentBlockInternal","currentHeaderInternal","OutputStorageCache","caches","ReadAllAddUpdateDeleteStorageCache","readAllStorage","getKeyFromValue","getKeyString","createAddChange","createDeleteChange","ReadGetAllAddDeleteStorageCache","readGetAllStorage","matchesPartialKey","ReadGetAllAddStorageCache","ReadAddUpdateStorageCache","BlockLikeStorageCache","ReadAddStorageCache","onAdd","out","allowDupes","ReadAddDeleteStorageCache","ReadGetAllAddUpdateDeleteStorageCache","every","idx","ReadAddUpdateMetadataStorageCache","getTrackedChangeSet","maybePrevBlockData","outputContractsList","prevBlockData","lastGlobalTransactionIndex","NEGATIVE_ONE","lastGlobalActionIndex","outputContracts","outputContract","utxo","rest","partition","Claim","ClaimTransaction","ContractTransaction","Miner","persistTransactions","persistUTXOTransactions","outputWithInputs","idxAndTransaction","getOutputWithInput","blockHash","globalIndex","updateAccounts","updateCoins","persistTransaction","transactionIn","transactionIndex","globalActionIndexIn","issuer","expiration","isFrozen","results","getTransactionResults","stringToUInt256","available","EnrollmentTransaction","PublishTransaction","Invocation","temporaryBlockchain","transactionHash","onMigrateContract","to","onSetVotes","persistingBlock","addActionsPromise","find","contractsChangeSet","addChange","subType","StorageChangeAdd","StorageChangeModify","deleteChange","StorageChangeDelete","addTrackedChange","validatorsCountVotes","delete","inputOutputs","claimOutputs","getInputOutputs","addressValues","addressSpent","groupByAddress","addressClaimed","mapValues","addressOutputs","spent","outs","updateAccount","_address","Input","promises","newAccount","isDeletable","inputClaims","hashInputClaims","updateCoin","hexToUInt256","inputClaim","BaseReadMetadataStorageCache","ReadAllAddStorageCache","ReadAddUpdateDeleteStorageCache","BaseReadStorageCache","mutableValues","tryGetTracked","trackedChange","createGet","tryGetValue","addValue","_key","ReadStorageCache","ReadAllStorageCache","defer","concatMap","EMPTY","of","ReadGetAllStorageCache","createAdd","createUpdate","updateFunc","updatedValue","createDelete","mutableIndexValues","getOutputValueKeyString","createGetMetadata","mutableValue","ReadMetadataStorageCache","createAddMetadata","createUpdateMetadata","Node_1","Node","node_consensus_1","bloem_1","bloom_filter_1","cross_fetch_1","lru_cache_1","Command_1","Message_1","payload_1","createScalingBloomFilter","ScalingBloem","initial_capacity","scaling","compareTransactionAndFees","val1","val2","networkFee","divn","lt","compare","LOCAL_HOST_ADDRESSES","mutableUnhealthyPeerSeconds","requestBlocks","debounce","peer","mutableBestPeer","mutableGetBlocksRequestsCount","findBestPeer","network","blacklistAndClose","shouldRequestBlocks","mutableGetBlocksRequestsIndex","mutableGetBlocksRequestTime","Date","now","sendMessage","createMessage","getblocks","hashStart","onRequestEndpoints","throttle","relay","getaddr","fetchEndpointsFromRPC","trimMemPool","mutableMemPool","transactionAndFees","getNetworkFee","transactionAndFee","negotiate","protocolVersion","NODE_NETWORK","round","externalPort","userAgent","receiveMessage","versionPayload","NegotiationError","checkVersion","getEndpointConfig","endpoint","isValid","verack","nextMessage","mutableBloomFilter","checkPeerHealth","prevHealth","checkTimeSeconds","nowSeconds","mutableBlockIndex","healthy","onEvent","event","connectedPeer","resetRequestBlocks","createMessageTransform","MessageTransform","onMessageReceived","floor","random","UINT_MAX_NUMBER","mutableKnownBlockHashes","tempKnownBlockHashes","mutableKnownTransactionHashes","tempKnownTransactionHashes","mutableKnownHeaderHashes","tempKnownHeaderHashes","consensusCache","mutableConsensus","connectedPeers","clear","disposable","noopDisposable","composeDisposables","Consensus","consensusDisposable","unhealthyPeerSeconds","throwVerifyError","forceAdd","MEM_POOL_SIZE","finalResult","logLabels","NEO_TRANSACTION_HASH","foundTransaction","verifyResult","NEO_TRANSACTION_FOUND","verifyTransaction","onTransactionReceived","relayTransactionInternal","inv","hashes","set","mempool","messagePayload","testFilter","write","bestPeer","peers","maxBy","shuffle","getBlocksRequestTime","permanentlyBlacklist","otherPeer","AlreadyConnectedError","doFetchEndpointsFromRPC","rpcURLs","rpcURL","fetchEndpointsFromRPCURL","response","method","headers","body","jsonrpc","params","ok","status","statusText","json","connected","createEndpoint","addEndpoint","HTTP_URL","addr","onAddrMessageReceived","onBlockMessageReceived","onConsensusMessageReceived","filteradd","onFilterAddMessageReceived","filterclear","onFilterClearMessageReceived","filterload","onFilterLoadMessageReceived","onGetAddrMessageReceived","onGetBlocksMessageReceived","getdata","onGetDataMessageReceived","getheaders","onGetHeadersMessageReceived","onHeadersMessageReceived","onInvMessageReceived","onMemPoolMessageReceived","tx","onVerackMessageReceived","onVersionMessageReceived","alert","merkleblock","notfound","ping","pong","catch","addresses","relayBlock","onPersistBlock","verifyConsensusPayload","onConsensusPayloadReceived","filterAdd","insert","filterLoad","k","tweak","vData","nHashFuncs","nTweak","createPeerBloomFilter","getBlocks","getHeaders","getData","createMerkleBlockPayload","flags","headersPayload","ready","relayTransaction","maxHeight","hashStopIndexPromise","hashStop","equals","hashStopHeader","min","hashStartHeaders","hashEnd","hashStartHeader","head","orderBy","range","bloomFilterIn","bloomFilter","contains","tree","MerkleTree","trim","mutableBuffer","allocUnsafe","merkleRoot","transactionCount","toHashArray","Message","magic","Consensus_1","asynciterablex_1","scan_1","ConsensusContext_1","ConsensusQueue_1","handleConsensusPayload_1","handlePersistBlock_1","handleTransactionReceived_1","runConsensus_1","mutableQueue","ConsensusQueue","privateKeyToPublicKey","feeAddress","publicKeyToScriptHash","mutableConsensusContext","ConsensusContext","pause","doStart","promise","seconds","fastForwardOffset","fastForwardToTime","clearTimer","mutableStartPromise","completed","initialResult","initializeNewConsensus","consensusContext","AsyncIterableX","scan","handlePersistBlock","handleConsensusPayload","handleTransactionReceived","runConsensus","handleResult","timerSeconds","handleTimer","mutableTimerSeconds","mutableTimer","setTimeout","clearTimeout","RequestReceivedContext","SignatureSentContext_1","ViewChangingContext_1","cloneBlockSent","BlockSentContext_1","cloneInitial","InitialContext_1","mutableFastForwardSeconds","mutableItems","mutableResolvers","mutableDoneInternal","Symbol","asyncIterator","item","shift","pushTimer","resolver","context_1","consensusMessage","validatorIndex","ConsensusMessageType","ChangeView","contextIn","newViewNumber","mutableExpectedView","cloneExpectedView","checkExpectedView","initializeConsensus","handleChangeView","PrepareRequest","mutableSignatures","signature","newContext","nextContext","res","addTransaction","minerTransaction","syncMemPool","handlePrepareRequest","PrepareResponse","cloneSignatures","checkSignatures","handlePrepareResponse","transactionHashesSet","bignumber_js_1","requestSentContext","cloneRequestSent","randomUInt64","mutableTransactions","calculateNetworkFee","isZero","mod","UINT_MAX","addn","toNumber","createMinerTransaction","mutableNetworkFees","first","second","div","comparedTo","_unused","unshift","previousHeader","sign","signAndRelay","PrepareRequestConsensusMessage","nullthrows","incrementExpectedView","signAndRelayChangeView","initializeConsensusInitial","requestChangeView","reason","InvalidMessageTransformEncodingError","PAYLOAD_MAX_SIZE","COMMAND_LENGTH","stream_1","calculateChecksum","toUInt32LE","hash256","deserializeMessageHeader","readFixedString","checksum","payloadBuffer","payloadBufferChecksum","payloadOptions","ConsensusPayload","writeFixedString","SIZE_OF_MESSAGE_HEADER","IOHelper","sizeOfUInt32LE","sizeOfFixedString","Transform","readableObjectMode","chunk","encoding","callback","remainingBuffer","mutableMessages","processBuffer","remaining","clone","writeArray","readVarBytesLE","writeVarBytesLE","readUInt8","writeUInt8","readUInt256","writeUInt256","BlockBase","merkleBlockPayloadSizeInternal","lazy","sizeOfArray","sizeOfUInt256","sizeOfVarBytesLE","deserializeBlockBaseWireBase","readVarUIntLE","INT_MAX_VALUE","writeVarUIntLE","readUInt16LE","readVarString","readBoolean","writeUInt16LE","writeVarString","writeBoolean","Network","_peer","_buffer","_endpoint","createHandler","JSONRPCError","RPC_METHODS","getaccountstate","getassetstate","getbestblockhash","getblock","getblockcount","getblockhash","getblocksysfee","getconnectioncount","getcontractstate","getrawmempool","getrawtransaction","getstorage","gettxout","invoke","invokefunction","invokescript","sendrawtransaction","submitblock","validateaddress","getpeers","relaytransaction","getoutput","getclaimamount","getallstorage","testinvocation","gettransactionreceipt","getinvocationdata","getvalidators","getnetworksettings","runconsensusnow","updatesettings","getsettings","fastforwardoffset","fastforwardtotime","getneotrackerurl","resetproject","UNKNOWN","INVALID","createJSONRPCHandler","handlers","handleSingleRequest","requestIn","labels","request","Array","isArray","validateRequest","RPC_METHOD","handler","handlerParams","handleRequestSafe","batchRequest","handleRequest","errorResponse","RPC_TYPE","getTransactionReceipt","JSONHelper","writeUInt64","checkHeight","height","addressToScriptHash","serializeJSON","watchTimeoutMS","block$","timeout","readUInt160","readBuffer","receipt","invokeScript","isvalid","transactionJSON","resultJSON","writeUInt160","fixed8ToDecimal","switchMap","issueGASFee","runConsensusNow","newSettings","resume","provider","req","LOCAL_NETWORK_NAME","JSONRPCLocalProvider","getOptions","handleResponse","getInitialContextAdd","initializeConsensusCommon","UnsignedConsensusPayload","relayConsensusPayload","findIndex","ecPointEqual","p","M","mutablePublicKeyToSignature","j","createMultiSignatureWitness","ChangeViewConsensusMessage","getPrimaryIndexType","verified","transactionsLength","cloneSignatureSent","PrepareResponseConsensusMessage","cloneViewChanging","requestChangeViewBackup","_options","class","constructor","computeRoot","toJSON"],"mappings":"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","file":"workers.17.6db83a27.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnknownChangeTypeError = exports.KeyNotFoundError = exports.UnknownTypeError = exports.NotFoundError = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nexports.NotFoundError = utils_1.makeErrorWithCode('NOT_FOUND', () => 'Not found.');\nexports.UnknownTypeError = utils_1.makeErrorWithCode('UNKNOWN_TYPE', (type) => `Unknown type${type === undefined ? `.` : `, found: ${type}`}`);\nexports.KeyNotFoundError = utils_1.makeErrorWithCode('KEY_NOT_FOUND', (keyString) => `Key ${keyString} not found in database.`);\nexports.UnknownChangeTypeError = utils_1.makeErrorWithCode('UNKNOWN_CHANGE_TYPE', () => 'Unknown change type.');\n\n//# sourceMappingURL=errors.js.map\n","import { JSONRPCLocalProvider } from '@neo-one/node-browser';\nimport { comlink } from '@neo-one/worker';\n\ncomlink.expose(JSONRPCLocalProvider, self);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMain = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst common_1 = require(\"./common\");\nconst DEFAULT_VALIDATORS = [\n    '03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c',\n    '02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093',\n    '03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a',\n    '02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554',\n    '024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d',\n    '02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e',\n    '02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70',\n];\nexports.createMain = ({ privateNet = false, standbyValidators: standbyValidatorsIn = DEFAULT_VALIDATORS, secondsPerBlock, address: addressIn, } = {}) => {\n    const standbyValidators = standbyValidatorsIn.map((value) => client_common_1.common.stringToECPoint(value));\n    const consensusAddress = standbyValidatorsIn === DEFAULT_VALIDATORS\n        ? client_common_1.common.asUInt160(Buffer.from('59e75d652b5d3827bf04c165bbe9ef95cca4bf55', 'hex'))\n        : client_common_1.crypto.getConsensusAddress(standbyValidators);\n    let address;\n    if (addressIn === undefined) {\n        address =\n            standbyValidatorsIn === DEFAULT_VALIDATORS\n                ? client_common_1.common.asUInt160(Buffer.from('5fa99d93303775fe50ca119c327759313eccfa1c', 'hex'))\n                : client_common_1.crypto.toScriptHash(client_common_1.crypto.createMultiSignatureVerificationScript(standbyValidators.length / 2 + 1, standbyValidators));\n    }\n    else {\n        address = client_common_1.common.stringToUInt160(addressIn);\n    }\n    const commonSettings = common_1.common({\n        privateNet,\n        consensusAddress,\n        address,\n    });\n    return {\n        genesisBlock: commonSettings.genesisBlock,\n        governingToken: commonSettings.governingToken,\n        utilityToken: commonSettings.utilityToken,\n        decrementInterval: commonSettings.decrementInterval,\n        generationAmount: commonSettings.generationAmount,\n        secondsPerBlock: secondsPerBlock === undefined ? commonSettings.secondsPerBlock : secondsPerBlock,\n        maxTransactionsPerBlock: commonSettings.maxTransactionsPerBlock,\n        memPoolSize: commonSettings.memPoolSize,\n        fees: {\n            [node_core_1.TransactionType.Enrollment]: client_common_1.common.fixed8FromDecimal(1000),\n            [node_core_1.TransactionType.Issue]: client_common_1.common.fixed8FromDecimal(500),\n            [node_core_1.TransactionType.Publish]: client_common_1.common.fixed8FromDecimal(500),\n            [node_core_1.TransactionType.Register]: client_common_1.common.fixed8FromDecimal(10000),\n        },\n        registerValidatorFee: client_common_1.common.fixed8FromDecimal(1000),\n        messageMagic: 7630401,\n        addressVersion: client_common_1.common.NEO_ADDRESS_VERSION,\n        privateKeyVersion: client_common_1.common.NEO_PRIVATE_KEY_VERSION,\n        standbyValidators,\n        vm: {\n            storageContext: {\n                v0: {\n                    index: 0,\n                },\n            },\n        },\n    };\n};\n\n//# sourceMappingURL=createMain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.common = exports.MAX_TRANSACTION_PER_BLOCK = exports.SECONDS_PER_BLOCK = exports.DECREMENT_INTERVAL = exports.ISSUE_AMOUNT_PRIVATE = exports.GENERATION_AMOUNT_PRIVATE = exports.GENERATION_AMOUNT = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nexports.GENERATION_AMOUNT = [8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\nexports.GENERATION_AMOUNT_PRIVATE = [8, 7, 6];\nexports.ISSUE_AMOUNT_PRIVATE = client_common_1.common.fixed8FromDecimal(58000000);\nexports.DECREMENT_INTERVAL = 2000000;\nexports.SECONDS_PER_BLOCK = 15;\nexports.MAX_TRANSACTION_PER_BLOCK = 500;\nconst ONE_HUNDRED_MILLION = client_common_1.common.fixed8FromDecimal(100000000);\nconst getGoverningToken = () => {\n    const scriptBuilder = new client_common_1.ScriptBuilder();\n    scriptBuilder.emitOp('PUSH1');\n    const admin = client_common_1.crypto.toScriptHash(scriptBuilder.build());\n    return new node_core_1.RegisterTransaction({\n        asset: {\n            type: node_core_1.AssetType.GoverningToken,\n            name: '[{\"lang\":\"zh-CN\",\"name\":\"小蚁股\"},{\"lang\":\"en\",\"name\":\"AntShare\"}]',\n            amount: ONE_HUNDRED_MILLION,\n            precision: 0,\n            owner: client_common_1.common.ECPOINT_INFINITY,\n            admin,\n        },\n    });\n};\nconst getUtilityToken = () => {\n    const scriptBuilder = new client_common_1.ScriptBuilder();\n    scriptBuilder.emitOp('PUSH0');\n    const admin = client_common_1.crypto.toScriptHash(scriptBuilder.build());\n    return new node_core_1.RegisterTransaction({\n        asset: {\n            type: node_core_1.AssetType.UtilityToken,\n            name: '[{\"lang\":\"zh-CN\",\"name\":\"小蚁币\"},{\"lang\":\"en\",\"name\":\"AntCoin\"}]',\n            amount: ONE_HUNDRED_MILLION,\n            precision: 8,\n            owner: client_common_1.common.ECPOINT_INFINITY,\n            admin,\n        },\n    });\n};\nconst getGenesisBlock = ({ privateNet, governingToken, utilityToken, address, consensusAddress }) => new node_core_1.Block({\n    previousHash: client_common_1.common.ZERO_UINT256,\n    timestamp: 1468595301,\n    index: 0,\n    consensusData: new bn_js_1.BN(2083236893),\n    nextConsensus: consensusAddress,\n    script: new node_core_1.Witness({\n        invocation: Buffer.from([]),\n        verification: Buffer.from([client_common_1.Op.PUSH1]),\n    }),\n    transactions: [\n        new node_core_1.MinerTransaction({ nonce: 2083236893 }),\n        governingToken,\n        utilityToken,\n        new node_core_1.IssueTransaction({\n            version: 0,\n            outputs: [\n                new node_core_1.Output({\n                    asset: governingToken.hash,\n                    value: governingToken.asset.amount,\n                    address,\n                }),\n            ],\n            scripts: [\n                new node_core_1.Witness({\n                    invocation: Buffer.from([]),\n                    verification: Buffer.from([client_common_1.Op.PUSH1]),\n                }),\n            ],\n        }),\n        privateNet\n            ? new node_core_1.IssueTransaction({\n                outputs: [\n                    new node_core_1.Output({\n                        asset: utilityToken.hash,\n                        value: exports.ISSUE_AMOUNT_PRIVATE,\n                        address,\n                    }),\n                ],\n                scripts: [\n                    new node_core_1.Witness({\n                        invocation: Buffer.from([]),\n                        verification: Buffer.from([client_common_1.Op.PUSH0]),\n                    }),\n                ],\n            })\n            : undefined,\n    ].filter(utils_1.utils.notNull),\n});\nexports.common = ({ privateNet, address, consensusAddress }) => {\n    const utilityToken = getUtilityToken();\n    const governingToken = getGoverningToken();\n    return {\n        genesisBlock: getGenesisBlock({\n            privateNet,\n            governingToken,\n            utilityToken,\n            address,\n            consensusAddress,\n        }),\n        governingToken,\n        utilityToken,\n        decrementInterval: exports.DECREMENT_INTERVAL,\n        generationAmount: privateNet ? exports.GENERATION_AMOUNT_PRIVATE : exports.GENERATION_AMOUNT,\n        secondsPerBlock: exports.SECONDS_PER_BLOCK,\n        maxTransactionsPerBlock: exports.MAX_TRANSACTION_PER_BLOCK,\n        memPoolSize: 50000,\n    };\n};\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTest = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst common_1 = require(\"./common\");\nconst DEFAULT_VALIDATORS = [\n    '0327da12b5c40200e9f65569476bbff2218da4f32548ff43b6387ec1416a231ee8',\n    '026ce35b29147ad09e4afe4ec4a7319095f08198fa8babbe3c56e970b143528d22',\n    '0209e7fd41dfb5c2f8dc72eb30358ac100ea8c72da18847befe06eade68cebfcb9',\n    '039dafd8571a641058ccc832c5e2111ea39b09c0bde36050914384f7a48bce9bf9',\n    '038dddc06ce687677a53d54f096d2591ba2302068cf123c1f2d75c2dddc5425579',\n    '02d02b1873a0863cd042cc717da31cea0d7cf9db32b74d4c72c01b0011503e2e22',\n    '034ff5ceeac41acf22cd5ed2da17a6df4dd8358fcb2bfb1a43208ad0feaab2746b',\n];\nexports.createTest = ({ privateNet, standbyValidators: standbyValidatorsIn = DEFAULT_VALIDATORS, secondsPerBlock, address: addressIn, } = {}) => {\n    const standbyValidators = standbyValidatorsIn.map((value) => client_common_1.common.stringToECPoint(value));\n    const consensusAddress = standbyValidatorsIn === DEFAULT_VALIDATORS\n        ? client_common_1.common.asUInt160(Buffer.from('f3812db982f3b0089a21a278988efeec6a027b25', 'hex'))\n        : client_common_1.crypto.getConsensusAddress(standbyValidators);\n    let address;\n    if (addressIn === undefined) {\n        address =\n            standbyValidatorsIn === DEFAULT_VALIDATORS\n                ? client_common_1.common.asUInt160(Buffer.from('197ff6783d512a740d42f4cc4f5572955fa44c95', 'hex'))\n                : client_common_1.crypto.toScriptHash(client_common_1.crypto.createMultiSignatureVerificationScript(standbyValidators.length / 2 + 1, standbyValidators));\n    }\n    else {\n        address = client_common_1.common.stringToUInt160(addressIn);\n    }\n    const commonSettings = common_1.common({\n        privateNet,\n        address,\n        consensusAddress,\n    });\n    return {\n        genesisBlock: commonSettings.genesisBlock,\n        governingToken: commonSettings.governingToken,\n        utilityToken: commonSettings.utilityToken,\n        decrementInterval: commonSettings.decrementInterval,\n        generationAmount: commonSettings.generationAmount,\n        secondsPerBlock: secondsPerBlock === undefined ? commonSettings.secondsPerBlock : secondsPerBlock,\n        maxTransactionsPerBlock: commonSettings.maxTransactionsPerBlock,\n        memPoolSize: commonSettings.memPoolSize,\n        fees: {\n            [node_core_1.TransactionType.Enrollment]: client_common_1.common.fixed8FromDecimal(10),\n            [node_core_1.TransactionType.Issue]: client_common_1.common.fixed8FromDecimal(5),\n            [node_core_1.TransactionType.Publish]: client_common_1.common.fixed8FromDecimal(5),\n            [node_core_1.TransactionType.Register]: client_common_1.common.fixed8FromDecimal(100),\n        },\n        registerValidatorFee: client_common_1.common.fixed8FromDecimal(1000),\n        messageMagic: 1953787457,\n        addressVersion: client_common_1.common.NEO_ADDRESS_VERSION,\n        privateKeyVersion: client_common_1.common.NEO_PRIVATE_KEY_VERSION,\n        standbyValidators,\n        vm: {\n            storageContext: {\n                v0: {\n                    index: 163594,\n                },\n            },\n        },\n    };\n};\n\n//# sourceMappingURL=createTest.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keys_1 = require(\"./keys\");\nObject.defineProperty(exports, \"keys\", { enumerable: true, get: function () { return keys_1.keys; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeBlockHash = exports.serializeBlockHash = exports.deserializeHeaderHash = exports.serializeHeaderHash = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nexports.serializeHeaderHash = (hash) => client_common_1.common.uInt256ToBuffer(hash);\nexports.deserializeHeaderHash = (hash) => client_common_1.common.bufferToUInt256(hash);\nexports.serializeBlockHash = (hash) => client_common_1.common.uInt256ToBuffer(hash);\nexports.deserializeBlockHash = (hash) => client_common_1.common.bufferToUInt256(hash);\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinUnspentError = exports.CoinClaimedError = exports.InvalidClaimError = exports.UnknownVerifyError = exports.WitnessVerifyError = exports.ScriptVerifyError = exports.GenesisBlockNotRegisteredError = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nexports.GenesisBlockNotRegisteredError = utils_1.makeErrorWithCode('GENESIS_BLOCK_NOT_REGISTERED', () => 'Genesis block was not registered with storage.');\nexports.ScriptVerifyError = utils_1.makeErrorWithCode('SCRIPT_VERIFY', (message) => message);\nexports.WitnessVerifyError = utils_1.makeErrorWithCode('WITNESS_VERIFY', () => 'Witness verification failed.');\nexports.UnknownVerifyError = utils_1.makeErrorWithCode('UNKNOWN_VERIFY', (message) => message);\nexports.InvalidClaimError = utils_1.makeErrorWithCode('INVALID_CLAIM', (asset, governingHash) => `Invalid Claim. Coin with asset: ${asset} does not match governing hash: ${governingHash}`);\nexports.CoinClaimedError = utils_1.makeErrorWithCode('COIN_CLAIMED', (asset, value) => `Coin with asset: ${asset}, value: ${value} is already claimed.`);\nexports.CoinUnspentError = utils_1.makeErrorWithCode('COIN_UNSPENT', (unspentCoins) => `${unspentCoins} coins unspent.`);\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getValidators = exports.processStateTransaction = exports.getDescriptorChanges = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst ValidatorCache_1 = require(\"./ValidatorCache\");\nconst processOutput = async (blockchain, cache, output, negative) => {\n    let { value } = output;\n    if (negative) {\n        value = value.neg();\n    }\n    const [account] = await Promise.all([\n        cache.getAccount(output.address),\n        cache.updateAccountBalance(output.address, output.asset, value),\n    ]);\n    if (client_common_1.common.uInt256Equal(output.asset, blockchain.settings.governingToken.hash) && account.votes.length > 0) {\n        await Promise.all([\n            Promise.all(account.votes.map(async (publicKey) => cache.updateValidatorVotes(publicKey, value))),\n            cache.updateValidatorsCountVotes(account.votes.length - 1, value),\n        ]);\n    }\n};\nconst processTransaction = async (blockchain, cache, transaction) => {\n    let allOutputs = await Promise.all(transaction.inputs.map(async (input) => {\n        const output = await blockchain.output.get(input);\n        return { output, negative: true };\n    }));\n    allOutputs = allOutputs.concat(transaction.outputs.map((output) => ({ output, negative: false })));\n    await Promise.all(allOutputs.map(async ({ output, negative }) => processOutput(blockchain, cache, output, negative)));\n    const accountHashes = [...new Set(allOutputs.map(({ output }) => client_common_1.common.uInt160ToHex(output.address)))].map((hash) => client_common_1.common.hexToUInt160(hash));\n    const touchedValidators = await Promise.all(accountHashes.map(async (hash) => {\n        const account = await cache.getAccount(hash);\n        return account.votes;\n    }));\n    const touchedValidatorsSet = [\n        ...new Set(touchedValidators.reduce((acc, votes) => acc.concat(votes.map((vote) => client_common_1.common.ecPointToHex(vote))), [])),\n    ].map((publicKey) => client_common_1.common.hexToECPoint(publicKey));\n    await Promise.all(touchedValidatorsSet.map(async (publicKey) => {\n        const validator = await cache.getValidator(publicKey);\n        if (!validator.registered && validator.votes.eq(node_core_1.utils.ZERO)) {\n            await cache.deleteValidator(publicKey);\n        }\n    }));\n};\nexports.getDescriptorChanges = async ({ transactions, getAccount, governingTokenHash, }) => {\n    const accountChanges = {};\n    const validatorVotesChanges = {};\n    const validatorRegisteredChanges = {};\n    const validatorsCountChanges = [];\n    const allDescriptors = transactions.reduce((acc, transaction) => acc.concat(transaction.descriptors), []);\n    const accountDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x40);\n    const groupedAccountDescriptors = Object.entries(lodash_1.default.groupBy(accountDescriptors, (descriptor) => client_common_1.common.uInt160ToHex(client_common_1.common.bufferToUInt160(descriptor.key))));\n    await Promise.all(groupedAccountDescriptors.map(async ([hash, descriptors]) => {\n        const account = await getAccount(client_common_1.common.hexToUInt160(hash));\n        const balance = account.getBalance(governingTokenHash);\n        for (const vote of account.votes) {\n            const voteHex = client_common_1.common.ecPointToHex(vote);\n            validatorVotesChanges[voteHex] = (validatorVotesChanges[voteHex] === undefined\n                ? node_core_1.utils.ZERO\n                : validatorVotesChanges[voteHex]).sub(balance);\n        }\n        const descriptor = descriptors[descriptors.length - 1];\n        const reader = new node_core_1.BinaryReader(descriptor.value);\n        const votes = reader.readArray(() => reader.readECPoint());\n        if (votes.length !== account.votes.length) {\n            if (account.votes.length > 0) {\n                validatorsCountChanges[account.votes.length - 1] = (validatorsCountChanges[account.votes.length - 1] === undefined\n                    ? node_core_1.utils.ZERO\n                    : validatorsCountChanges[account.votes.length - 1]).sub(balance);\n            }\n            if (votes.length > 0) {\n                validatorsCountChanges[votes.length - 1] = (validatorsCountChanges[votes.length - 1] ===\n                    undefined\n                    ? node_core_1.utils.ZERO\n                    : validatorsCountChanges[votes.length - 1]).add(balance);\n            }\n        }\n        accountChanges[hash] = votes;\n        for (const vote of votes) {\n            const voteHex = client_common_1.common.ecPointToHex(vote);\n            validatorVotesChanges[voteHex] = (validatorVotesChanges[voteHex] === undefined\n                ? node_core_1.utils.ZERO\n                : validatorVotesChanges[voteHex]).add(balance);\n        }\n    }));\n    const validatorDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x48);\n    for (const descriptor of validatorDescriptors) {\n        const publicKey = client_common_1.common.bufferToECPoint(descriptor.key);\n        validatorRegisteredChanges[client_common_1.common.ecPointToHex(publicKey)] = descriptor.value.some((byte) => byte !== 0);\n    }\n    const validatorChanges = {};\n    for (const [publicKey, votes] of Object.entries(validatorVotesChanges)) {\n        validatorChanges[publicKey] = { votes };\n    }\n    for (const [publicKey, registered] of Object.entries(validatorRegisteredChanges)) {\n        const current = validatorChanges[publicKey] === undefined ? {} : validatorChanges[publicKey];\n        validatorChanges[publicKey] = {\n            registered,\n            votes: current.votes,\n        };\n    }\n    return {\n        accountChanges,\n        validatorChanges,\n        validatorsCountChanges,\n    };\n};\nexports.processStateTransaction = async ({ validatorChanges, validatorsCountChanges, tryGetValidatorsCount, addValidatorsCount, updateValidatorsCount, tryGetValidator, addValidator, deleteValidator, updateValidator, }) => {\n    const validatorsCount = await tryGetValidatorsCount();\n    const mutableValidatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n    [...validatorsCountChanges.entries()].forEach(([index, value]) => {\n        mutableValidatorsCountVotes[index] = value;\n    });\n    await Promise.all([\n        Promise.all(Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n            const publicKey = client_common_1.common.hexToECPoint(publicKeyHex);\n            const validator = await tryGetValidator({ publicKey });\n            if (validator === undefined) {\n                await addValidator(new node_core_1.Validator({\n                    publicKey,\n                    registered,\n                    votes,\n                }));\n            }\n            else if (((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n                ((votes !== undefined && votes.eq(node_core_1.utils.ZERO)) || (votes === undefined && validator.votes.eq(node_core_1.utils.ZERO)))) {\n                await deleteValidator({ publicKey: validator.publicKey });\n            }\n            else {\n                await updateValidator(validator, { votes, registered });\n            }\n        })),\n        validatorsCount === undefined\n            ? addValidatorsCount(new node_core_1.ValidatorsCount({\n                votes: mutableValidatorsCountVotes,\n            }))\n            : updateValidatorsCount(validatorsCount, {\n                votes: mutableValidatorsCountVotes,\n            }),\n    ]);\n};\nexports.getValidators = async (blockchain, transactions) => {\n    const cache = new ValidatorCache_1.ValidatorCache(blockchain);\n    await Promise.all(transactions.map(async (transaction) => processTransaction(blockchain, cache, transaction)));\n    const { validatorChanges, validatorsCountChanges } = await exports.getDescriptorChanges({\n        transactions: transactions.filter((transaction) => transaction.type === node_core_1.TransactionType.State && transaction instanceof node_core_1.StateTransaction),\n        getAccount: async (hash) => cache.getAccount(hash),\n        governingTokenHash: blockchain.settings.governingToken.hashHex,\n    });\n    await exports.processStateTransaction({\n        validatorChanges,\n        validatorsCountChanges,\n        tryGetValidatorsCount: async () => cache.getValidatorsCount(),\n        addValidatorsCount: async (value) => cache.addValidatorsCount(value),\n        updateValidatorsCount: async (update) => {\n            await cache.updateValidatorsCount(update);\n        },\n        tryGetValidator: async (key) => cache.getValidator(key.publicKey),\n        addValidator: async (validator) => cache.addValidator(validator),\n        deleteValidator: async (key) => cache.deleteValidator(key.publicKey),\n        updateValidator: async (value, update) => cache.updateValidator(value.publicKey, update),\n    });\n    const [validatorsCount, validators] = await Promise.all([cache.getValidatorsCount(), cache.getAllValidators()]);\n    const numValidators = Math.max(node_core_1.utils.weightedAverage(node_core_1.utils\n        .weightedFilter(validatorsCount.votes\n        .map((votes, count) => ({ count, votes: votes === undefined ? node_core_1.utils.ZERO : votes }))\n        .filter(({ votes }) => votes.gt(node_core_1.utils.ZERO)), 0.25, 0.75, ({ count }) => new bn_js_1.BN(count))\n        .map(([{ count }, weight]) => ({ value: count, weight }))), blockchain.settings.standbyValidators.length);\n    const standbyValidatorsSet = new Set(blockchain.settings.standbyValidators.map((publicKey) => client_common_1.common.ecPointToHex(publicKey)));\n    const validatorsPublicKeySet = new Set(lodash_1.default.take(validators\n        .filter((validator) => (validator.registered && validator.votes.gt(node_core_1.utils.ZERO)) ||\n        standbyValidatorsSet.has(client_common_1.common.ecPointToHex(validator.publicKey)))\n        .sort((aValidator, bValidator) => aValidator.votes.eq(bValidator.votes)\n        ? client_common_1.common.ecPointCompare(aValidator.publicKey, bValidator.publicKey)\n        : -aValidator.votes.cmp(bValidator.votes))\n        .map((validator) => client_common_1.common.ecPointToHex(validator.publicKey)), numValidators));\n    const standbyValidatorsArray = [...standbyValidatorsSet];\n    for (let i = 0; i < standbyValidatorsArray.length && validatorsPublicKeySet.size < numValidators; i += 1) {\n        validatorsPublicKeySet.add(standbyValidatorsArray[i]);\n    }\n    const validatorsPublicKeys = [...validatorsPublicKeySet].map((hex) => client_common_1.common.hexToECPoint(hex));\n    return validatorsPublicKeys.sort((aKey, bKey) => client_common_1.common.ecPointCompare(aKey, bKey));\n};\n\n//# sourceMappingURL=getValidators.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapExecuteScripts = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nexports.wrapExecuteScripts = async (execute) => {\n    try {\n        const result = await execute();\n        if (result.state === client_common_1.VMState.Halt) {\n            return new node_core_1.InvocationResultSuccess({\n                gasConsumed: result.gasConsumed,\n                gasCost: result.gasCost,\n                stack: result.stack,\n            });\n        }\n        return new node_core_1.InvocationResultError({\n            gasConsumed: result.gasConsumed,\n            gasCost: result.gasCost,\n            stack: result.stack,\n            message: result.errorMessage === undefined ? 'Unknown Error' : result.errorMessage,\n        });\n    }\n    catch (error) {\n        return new node_core_1.InvocationResultError({\n            gasConsumed: client_common_1.utils.ZERO,\n            gasCost: client_common_1.utils.ZERO,\n            stack: [],\n            message: error.message,\n        });\n    }\n};\n\n//# sourceMappingURL=wrapExecuteScripts.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockSentContext = void 0;\nconst Context_1 = require(\"./Context\");\nclass BlockSentContext extends Context_1.Context {\n    cloneExpectedView({ expectedView }) {\n        return new BlockSentContext({\n            type: this.type,\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.BlockSentContext = BlockSentContext;\n\n//# sourceMappingURL=BlockSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialContext = void 0;\nconst Context_1 = require(\"./Context\");\nclass InitialContext extends Context_1.Context {\n    cloneExpectedView({ expectedView }) {\n        return new InitialContext({\n            type: this.type,\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.InitialContext = InitialContext;\n\n//# sourceMappingURL=InitialContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignatureSentContext = void 0;\nconst HeaderContext_1 = require(\"./HeaderContext\");\nconst RequestSentContext_1 = require(\"./RequestSentContext\");\nclass SignatureSentContext extends HeaderContext_1.HeaderContext {\n    clone({ type, primaryIndex, viewNumber, }) {\n        return new SignatureSentContext({\n            type,\n            viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneRequestSent() {\n        return new RequestSentContext_1.RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.SignatureSentContext = SignatureSentContext;\n\n//# sourceMappingURL=SignatureSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestSentContext = void 0;\nconst HeaderContext_1 = require(\"./HeaderContext\");\nclass RequestSentContext extends HeaderContext_1.HeaderContext {\n    constructor({ viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        super({\n            type: 'primary',\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n            transactions,\n            signatures,\n            header,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new RequestSentContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.RequestSentContext = RequestSentContext;\n\n//# sourceMappingURL=RequestSentContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ViewChangingContext = void 0;\nconst Context_1 = require(\"./Context\");\nclass ViewChangingContext extends Context_1.Context {\n    constructor({ previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n        super({\n            type: 'backup',\n            previousHash,\n            blockIndex,\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new ViewChangingContext({\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n}\nexports.ViewChangingContext = ViewChangingContext;\n\n//# sourceMappingURL=ViewChangingContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertCommand = exports.InvalidCommandError = exports.Command = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nvar Command;\n(function (Command) {\n    Command[\"addr\"] = \"addr\";\n    Command[\"block\"] = \"block\";\n    Command[\"consensus\"] = \"consensus\";\n    Command[\"filteradd\"] = \"filteradd\";\n    Command[\"filterclear\"] = \"filterclear\";\n    Command[\"filterload\"] = \"filterload\";\n    Command[\"getaddr\"] = \"getaddr\";\n    Command[\"getblocks\"] = \"getblocks\";\n    Command[\"getdata\"] = \"getdata\";\n    Command[\"getheaders\"] = \"getheaders\";\n    Command[\"headers\"] = \"headers\";\n    Command[\"inv\"] = \"inv\";\n    Command[\"mempool\"] = \"mempool\";\n    Command[\"tx\"] = \"tx\";\n    Command[\"verack\"] = \"verack\";\n    Command[\"version\"] = \"version\";\n    Command[\"alert\"] = \"alert\";\n    Command[\"merkleblock\"] = \"merkleblock\";\n    Command[\"notfound\"] = \"notfound\";\n    Command[\"ping\"] = \"ping\";\n    Command[\"pong\"] = \"pong\";\n    Command[\"reject\"] = \"reject\";\n})(Command = exports.Command || (exports.Command = {}));\nexports.InvalidCommandError = utils_1.makeErrorWithCode('INVALID_COMMAND', (command) => `Invalid Command. Found: ${command}`);\nconst isCommand = (command) => Command[command] !== undefined;\nexports.assertCommand = (command) => {\n    if (isCommand(command)) {\n        return command;\n    }\n    throw new exports.InvalidCommandError(command);\n};\n\n//# sourceMappingURL=Command.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AddrPayload_1 = require(\"./AddrPayload\");\nObject.defineProperty(exports, \"AddrPayload\", { enumerable: true, get: function () { return AddrPayload_1.AddrPayload; } });\nvar FilterAddPayload_1 = require(\"./FilterAddPayload\");\nObject.defineProperty(exports, \"FilterAddPayload\", { enumerable: true, get: function () { return FilterAddPayload_1.FilterAddPayload; } });\nvar FilterLoadPayload_1 = require(\"./FilterLoadPayload\");\nObject.defineProperty(exports, \"FilterLoadPayload\", { enumerable: true, get: function () { return FilterLoadPayload_1.FilterLoadPayload; } });\nvar GetBlocksPayload_1 = require(\"./GetBlocksPayload\");\nObject.defineProperty(exports, \"GetBlocksPayload\", { enumerable: true, get: function () { return GetBlocksPayload_1.GetBlocksPayload; } });\nvar HeadersPayload_1 = require(\"./HeadersPayload\");\nObject.defineProperty(exports, \"HeadersPayload\", { enumerable: true, get: function () { return HeadersPayload_1.HeadersPayload; } });\nvar InvPayload_1 = require(\"./InvPayload\");\nObject.defineProperty(exports, \"InvPayload\", { enumerable: true, get: function () { return InvPayload_1.InvPayload; } });\nvar MerkleBlockPayload_1 = require(\"./MerkleBlockPayload\");\nObject.defineProperty(exports, \"MerkleBlockPayload\", { enumerable: true, get: function () { return MerkleBlockPayload_1.MerkleBlockPayload; } });\nvar NetworkAddress_1 = require(\"./NetworkAddress\");\nObject.defineProperty(exports, \"NetworkAddress\", { enumerable: true, get: function () { return NetworkAddress_1.NetworkAddress; } });\nvar VersionPayload_1 = require(\"./VersionPayload\");\nObject.defineProperty(exports, \"VersionPayload\", { enumerable: true, get: function () { return VersionPayload_1.VersionPayload; } });\nObject.defineProperty(exports, \"SERVICES\", { enumerable: true, get: function () { return VersionPayload_1.SERVICES; } });\nvar InventoryType_1 = require(\"./InventoryType\");\nObject.defineProperty(exports, \"InventoryType\", { enumerable: true, get: function () { return InventoryType_1.InventoryType; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkAddress = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst ip_address_1 = require(\"ip-address\");\nconst BYTE_LENGTH = 16;\nclass NetworkAddress {\n    constructor({ host, port, timestamp, services }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.host = host;\n        this.port = port;\n        this.timestamp = timestamp;\n        this.services = services;\n    }\n    static deserializeWireBase({ reader }) {\n        const timestamp = reader.readUInt32LE();\n        const services = reader.readUInt64LE();\n        const address = ip_address_1.Address6.fromByteArray([...reader.readBytes(16)]);\n        const port = reader.readUInt16BE();\n        const canonical = address == undefined ? '' : address.canonicalForm();\n        return new this({\n            timestamp,\n            services,\n            host: canonical == undefined ? '' : canonical,\n            port,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    static isValid(host) {\n        const address = this.getAddress6(host);\n        if (address == undefined) {\n            return false;\n        }\n        try {\n            address.toByteArray();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    static getAddress6(host) {\n        const parts = host.split('.');\n        return parts.length === 4 ? ip_address_1.Address6.fromAddress4(host) : new ip_address_1.Address6(host);\n    }\n    serializeWireBase(writer) {\n        const address = NetworkAddress.getAddress6(this.host);\n        if (address == undefined) {\n            throw new client_common_1.InvalidFormatError('Network IP address undefined');\n        }\n        writer.writeUInt32LE(this.timestamp);\n        writer.writeUInt64LE(this.services);\n        const addressSerialized = Buffer.from(address.toByteArray());\n        writer.writeBytes(Buffer.concat([Buffer.alloc(BYTE_LENGTH - addressSerialized.length, 0), addressSerialized]));\n        writer.writeUInt16BE(this.port);\n    }\n}\nexports.NetworkAddress = NetworkAddress;\n\n//# sourceMappingURL=NetworkAddress.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertInventoryType = exports.InvalidInventoryTypeError = exports.InventoryType = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nvar InventoryType;\n(function (InventoryType) {\n    InventoryType[InventoryType[\"Transaction\"] = 1] = \"Transaction\";\n    InventoryType[InventoryType[\"Block\"] = 2] = \"Block\";\n    InventoryType[InventoryType[\"Consensus\"] = 224] = \"Consensus\";\n})(InventoryType = exports.InventoryType || (exports.InventoryType = {}));\nexports.InvalidInventoryTypeError = utils_1.makeErrorWithCode('INVALID_INVENTORY_TYPE', (inventoryType) => `Expected inventory type, found: ${inventoryType}`);\nconst isInventoryType = (inventoryType) => InventoryType[inventoryType] !== undefined;\nexports.assertInventoryType = (inventoryType) => {\n    if (isInventoryType(inventoryType)) {\n        return inventoryType;\n    }\n    throw new exports.InvalidInventoryTypeError(inventoryType);\n};\n\n//# sourceMappingURL=InventoryType.js.map\n","import { common, crypto } from '@neo-one/client-common';\nimport { DeveloperClient } from '@neo-one/client-core';\nimport { Blockchain } from '@neo-one/node-blockchain';\nimport { createMain } from '@neo-one/node-neo-settings';\nimport { Node } from '@neo-one/node-protocol';\nimport { createHandler, RPCHandler } from '@neo-one/node-rpc-handler';\nimport { storage as levelupStorage } from '@neo-one/node-storage-levelup';\nimport { vm } from '@neo-one/node-vm';\nimport { Disposable } from '@neo-one/utils';\nimport Level from 'level-js';\nimport LevelUp from 'levelup';\nimport MemDown from 'memdown';\nimport { constants } from './constants';\nimport { Network } from './Network';\n\nexport interface PersistentFullNode {\n  readonly type: 'persistent';\n  readonly id: string;\n}\n\nexport interface InMemoryFullNode {\n  readonly type: 'memory';\n}\n\nexport type FullNodeOptions = PersistentFullNode | InMemoryFullNode;\n\nexport class FullNode {\n  private mutableDisposable: Disposable | undefined;\n  private readonly startPromise: Promise<RPCHandler>;\n\n  public constructor(\n    private readonly options: FullNodeOptions,\n    private readonly developerClient: DeveloperClient,\n    private readonly build: () => Promise<void>,\n  ) {\n    this.startPromise = this.startInternal();\n  }\n\n  public async start(): Promise<void> {\n    return this.startPromise.then(() => {\n      // do nothing\n    });\n  }\n\n  public async stop(): Promise<void> {\n    if (this.mutableDisposable !== undefined) {\n      await this.mutableDisposable();\n      this.mutableDisposable = undefined;\n    }\n  }\n\n  // tslint:disable-next-line no-any\n  public async handleRequest(data: any): Promise<any> {\n    const handler = await this.startPromise;\n\n    return handler(data);\n  }\n\n  private async startInternal(): Promise<RPCHandler> {\n    const primaryPrivateKey = common.stringToPrivateKey(constants.PRIVATE_NET_PRIVATE_KEY);\n    const primaryPublicKey = common.stringToECPoint(constants.PRIVATE_NET_PUBLIC_KEY);\n    crypto.addPublicKey(primaryPrivateKey, primaryPublicKey);\n\n    const settings = createMain({\n      address: common.uInt160ToString(crypto.privateKeyToScriptHash(primaryPrivateKey)),\n      standbyValidators: [common.ecPointToString(primaryPublicKey)],\n      privateNet: true,\n    });\n    const storage = levelupStorage({\n      db: LevelUp(this.options.type === 'persistent' ? Level(this.options.id) : MemDown()),\n      context: { messageMagic: settings.messageMagic },\n    });\n\n    const blockchain = await Blockchain.create({\n      settings,\n      storage,\n      vm,\n    });\n    const nodeOptions = {\n      consensus: {\n        privateKey: common.privateKeyToString(primaryPrivateKey),\n        privateNet: true,\n      },\n    };\n    const node = new Node({\n      blockchain,\n      options: nodeOptions,\n      createNetwork: () => new Network(),\n    });\n\n    this.mutableDisposable = await node.start();\n\n    return createHandler({\n      blockchain,\n      node,\n      handleResetProject: this.reset.bind(this),\n      handleGetNEOTrackerURL: async () => undefined,\n    });\n  }\n\n  private async reset(): Promise<void> {\n    await this.developerClient.reset();\n    await this.developerClient.updateSettings({ secondsPerBlock: 15 });\n\n    await this.build();\n  }\n}\n","import { constants as utilsConstants } from '@neo-one/utils';\n\nexport const constants = {\n  ...utilsConstants,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./createMain\"), exports);\ntslib_1.__exportStar(require(\"./createTest\"), exports);\ntslib_1.__exportStar(require(\"./main\"), exports);\ntslib_1.__exportStar(require(\"./serde\"), exports);\ntslib_1.__exportStar(require(\"./test\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.main = void 0;\nconst createMain_1 = require(\"./createMain\");\nlet mainCache;\nexports.main = () => {\n    if (mainCache !== undefined) {\n        return mainCache;\n    }\n    const mainSettings = createMain_1.createMain();\n    mainCache = mainSettings;\n    return mainSettings;\n};\n\n//# sourceMappingURL=main.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeSettings = exports.serializeSettings = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nexports.serializeSettings = (settings) => {\n    const { genesisBlock, governingToken, utilityToken, decrementInterval, generationAmount, fees, registerValidatorFee, messageMagic, addressVersion, privateKeyVersion, standbyValidators, vm, secondsPerBlock, maxTransactionsPerBlock, memPoolSize, } = settings;\n    return {\n        genesisBlock: genesisBlock.serializeWire().toString('hex'),\n        governingToken: governingToken.serializeWire().toString('hex'),\n        utilityToken: utilityToken.serializeWire().toString('hex'),\n        decrementInterval,\n        generationAmount,\n        fees: lodash_1.default.fromPairs(Object.entries(fees).map(([key, fee]) => [key, fee === undefined ? JSON.stringify(undefined) : fee.toString(10)])),\n        registerValidatorFee: registerValidatorFee.toString(10),\n        messageMagic,\n        addressVersion,\n        privateKeyVersion,\n        standbyValidators: standbyValidators.map((validator) => client_common_1.common.ecPointToString(validator)),\n        vm,\n        secondsPerBlock,\n        maxTransactionsPerBlock,\n        memPoolSize,\n    };\n};\nexports.deserializeSettings = (settings) => {\n    const { genesisBlock, governingToken, utilityToken, decrementInterval, generationAmount, fees, registerValidatorFee, messageMagic, addressVersion, privateKeyVersion, standbyValidators, vm, secondsPerBlock, maxTransactionsPerBlock, memPoolSize, } = settings;\n    const context = { messageMagic };\n    return {\n        genesisBlock: node_core_1.Block.deserializeWire({ context, buffer: Buffer.from(genesisBlock, 'hex') }),\n        governingToken: node_core_1.deserializeTransactionWire({\n            context,\n            buffer: Buffer.from(governingToken, 'hex'),\n        }),\n        utilityToken: node_core_1.deserializeTransactionWire({\n            context,\n            buffer: Buffer.from(utilityToken, 'hex'),\n        }),\n        decrementInterval,\n        generationAmount,\n        fees: lodash_1.default.fromPairs(Object.entries(fees).map(([key, fee]) => [key, fee === undefined ? undefined : new bn_js_1.BN(fee, 10)])),\n        registerValidatorFee: new bn_js_1.BN(registerValidatorFee, 10),\n        messageMagic,\n        addressVersion,\n        privateKeyVersion,\n        standbyValidators: standbyValidators.map((validator) => client_common_1.common.stringToECPoint(validator)),\n        vm,\n        secondsPerBlock,\n        maxTransactionsPerBlock,\n        memPoolSize,\n    };\n};\n\n//# sourceMappingURL=serde.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.test = void 0;\nconst createTest_1 = require(\"./createTest\");\nlet testCache;\nexports.test = () => {\n    if (testCache !== undefined) {\n        return testCache;\n    }\n    const testSettings = createTest_1.createTest();\n    testCache = testSettings;\n    return testSettings;\n};\n\n//# sourceMappingURL=test.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar levelUpStorage_1 = require(\"./levelUpStorage\");\nObject.defineProperty(exports, \"storage\", { enumerable: true, get: function () { return levelUpStorage_1.levelUpStorage; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.levelUpStorage = void 0;\nconst tslib_1 = require(\"tslib\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst node_storage_common_1 = require(\"@neo-one/node-storage-common\");\nconst common = tslib_1.__importStar(require(\"./common\"));\nconst convertChange_1 = require(\"./convertChange\");\nconst errors_1 = require(\"./errors\");\nconst read = tslib_1.__importStar(require(\"./read\"));\nexports.levelUpStorage = ({ db, context }) => {\n    const getHash = async ({ hashOrIndex }) => {\n        let hash = hashOrIndex;\n        if (typeof hash === 'number') {\n            try {\n                const result = await db.get(node_storage_common_1.keys.serializeHeaderIndexHashKey(hash));\n                hash = common.deserializeHeaderHash(result);\n            }\n            catch (error) {\n                if (error.notFound) {\n                    throw new errors_1.KeyNotFoundError(`${hash}`);\n                }\n                throw error;\n            }\n        }\n        return hash;\n    };\n    const headerBase = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.header,\n        deserializeValue: (buffer) => node_core_1.Header.deserializeWire({\n            context,\n            buffer,\n        }),\n    });\n    const getHeader = async ({ hashOrIndex }) => {\n        const hash = await getHash({ hashOrIndex });\n        return headerBase.get({ hash });\n    };\n    const header = {\n        get: getHeader,\n        tryGet: read.createTryGet({ get: getHeader }),\n        tryGetLatest: read.createTryGetLatest({\n            db,\n            latestKey: node_storage_common_1.keys.maxHeaderHashKey,\n            deserializeResult: (result) => ({\n                hash: common.deserializeHeaderHash(result),\n            }),\n            get: headerBase.get,\n        }),\n    };\n    const blockBase = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.block,\n        deserializeValue: (buffer) => node_core_1.Block.deserializeWire({\n            context,\n            buffer,\n        }),\n    });\n    const getBlock = async ({ hashOrIndex }) => {\n        const hash = await getHash({ hashOrIndex });\n        return blockBase.get({ hash });\n    };\n    const block = {\n        get: getBlock,\n        tryGet: read.createTryGet({ get: getBlock }),\n        tryGetLatest: read.createTryGetLatest({\n            db,\n            latestKey: node_storage_common_1.keys.maxBlockHashKey,\n            deserializeResult: (result) => ({\n                hash: common.deserializeBlockHash(result),\n            }),\n            get: blockBase.get,\n        }),\n    };\n    const transaction = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.transaction,\n        deserializeValue: (buffer) => node_core_1.deserializeTransactionWire({\n            context,\n            buffer,\n        }),\n    });\n    const output = read.createReadStorage({\n        db,\n        serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.output,\n        deserializeValue: (buffer) => node_core_1.Output.deserializeWire({ context, buffer }),\n    });\n    return {\n        header,\n        block,\n        blockData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.blockData,\n            deserializeValue: (buffer) => node_core_1.BlockData.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        account: read.createReadAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.account,\n            minKey: node_storage_common_1.keys.accountMinKey,\n            maxKey: node_storage_common_1.keys.accountMaxKey,\n            deserializeValue: (buffer) => node_core_1.Account.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        accountUnclaimed: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed,\n            getMinKey: node_storage_common_1.keys.getAccountUnclaimedKeyMin,\n            getMaxKey: node_storage_common_1.keys.getAccountUnclaimedKeyMax,\n            deserializeValue: (buffer) => node_core_1.AccountUnclaimed.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        accountUnspent: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent,\n            getMinKey: node_storage_common_1.keys.getAccountUnspentKeyMin,\n            getMaxKey: node_storage_common_1.keys.getAccountUnspentKeyMax,\n            deserializeValue: (buffer) => node_core_1.AccountUnspent.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        action: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.action,\n            getMinKey: node_storage_common_1.keys.getActionKeyMin,\n            getMaxKey: node_storage_common_1.keys.getActionKeyMax,\n            deserializeValue: (buffer) => node_core_1.deserializeActionWire({\n                context,\n                buffer,\n            }),\n        }),\n        asset: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.asset,\n            deserializeValue: (buffer) => node_core_1.Asset.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        transaction,\n        transactionData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.transactionData,\n            deserializeValue: (buffer) => node_core_1.TransactionData.deserializeWire({ context, buffer }),\n        }),\n        output,\n        contract: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.contract,\n            deserializeValue: (buffer) => node_core_1.Contract.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        storageItem: read.createReadGetAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem,\n            getMinKey: node_storage_common_1.keys.getStorageItemKeyMin,\n            getMaxKey: node_storage_common_1.keys.getStorageItemKeyMax,\n            deserializeValue: (buffer) => node_core_1.StorageItem.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        validator: read.createReadAllStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.validator,\n            minKey: node_storage_common_1.keys.validatorMinKey,\n            maxKey: node_storage_common_1.keys.validatorMaxKey,\n            deserializeValue: (buffer) => node_core_1.Validator.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        invocationData: read.createReadStorage({\n            db,\n            serializeKey: node_storage_common_1.keys.typeKeyToSerializeKey.invocationData,\n            deserializeValue: (buffer) => node_core_1.InvocationData.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        validatorsCount: read.createReadMetadataStorage({\n            db,\n            key: node_storage_common_1.keys.validatorsCountKey,\n            deserializeValue: (buffer) => node_core_1.ValidatorsCount.deserializeWire({\n                context,\n                buffer,\n            }),\n        }),\n        async close() {\n            await db.close();\n        },\n        async commit(changeSet) {\n            const changesList = changeSet.map(convertChange_1.convertChange);\n            const changes = changesList.reduce((acc, converted) => {\n                acc.push(...converted);\n                return acc;\n            }, []);\n            await db.batch(changes);\n        },\n        async reset() {\n            const batch = [];\n            await new Promise((resolve, reject) => {\n                db.createKeyStream()\n                    .on('data', (key) => {\n                    batch.push({ type: 'del', key });\n                })\n                    .on('error', (error) => {\n                    reject(error);\n                })\n                    .on('end', () => {\n                    resolve();\n                });\n            });\n            await db.batch(batch);\n        },\n    };\n};\n\n//# sourceMappingURL=levelUpStorage.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keys = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst DELIMITER = '\\x00';\nconst createPrefix = (value) => `${value}${DELIMITER}`;\nconst MAX_CHAR = '\\xff';\nconst createMax = (value) => `${value}${MAX_CHAR}`;\nconst accountKeyPrefix = createPrefix('0');\nconst accountUnclaimedKeyPrefix = createPrefix('1');\nconst accountUnspentKeyPrefix = createPrefix('2');\nconst actionKeyPrefix = createPrefix('3');\nconst assetKeyPrefix = createPrefix('4');\nconst blockKeyPrefix = createPrefix('5');\nconst blockDataKeyPrefix = createPrefix('6');\nconst headerKeyPrefix = createPrefix('7');\nconst headerHashKeyPrefix = createPrefix('8');\nconst transactionKeyPrefix = createPrefix('9');\nconst outputKeyPrefix = createPrefix('a');\nconst transactionDataKeyPrefix = createPrefix('b');\nconst contractKeyPrefix = createPrefix('c');\nconst storageItemKeyPrefix = createPrefix('d');\nconst validatorKeyPrefix = createPrefix('e');\nconst invocationDataKeyPrefix = createPrefix('f');\nconst settingsPrefix = createPrefix('g');\nconst validatorsCountKey = createPrefix('h');\nconst serializeHeaderIndexHashKey = (index) => `${headerHashKeyPrefix}${index}`;\nconst maxHeaderHashKey = `${settingsPrefix}0`;\nconst maxBlockHashKey = `${settingsPrefix}1`;\nconst createSerializeAccountInputKey = (prefix) => ({ hash, input }) => `${prefix}${client_common_1.common.uInt160ToString(hash)}${client_common_1.common.uInt256ToString(input.hash)}${input.index}`;\nconst createGetAccountInputKeyMin = (prefix) => ({ hash }) => `${prefix}${client_common_1.common.uInt160ToString(hash)}`;\nconst createGetAccountInputKeyMax = (prefix) => ({ hash }) => createMax(`${prefix}${client_common_1.common.uInt160ToString(hash)}`);\nconst getAccountUnclaimedKeyMin = createGetAccountInputKeyMin(accountUnclaimedKeyPrefix);\nconst getAccountUnclaimedKeyMax = createGetAccountInputKeyMax(accountUnclaimedKeyPrefix);\nconst getAccountUnspentKeyMin = createGetAccountInputKeyMin(accountUnspentKeyPrefix);\nconst getAccountUnspentKeyMax = createGetAccountInputKeyMax(accountUnspentKeyPrefix);\nconst serializeStorageItemKey = ({ hash, key }) => `${storageItemKeyPrefix}${client_common_1.common.uInt160ToString(hash)}${key.toString('hex')}`;\nconst getStorageItemKeyMin = ({ hash, prefix }) => [\n    storageItemKeyPrefix,\n    hash === undefined ? undefined : client_common_1.common.uInt160ToString(hash),\n    prefix === undefined ? undefined : prefix.toString('hex'),\n]\n    .filter(utils_1.utils.notNull)\n    .join('');\nconst getStorageItemKeyMax = (key) => createMax(getStorageItemKeyMin(key));\nconst serializeActionKey = ({ index }) => `${actionKeyPrefix}${index.toString(10, 8)}`;\nconst getActionKeyMin = ({ indexStart }) => [actionKeyPrefix, indexStart === undefined ? undefined : indexStart.toString(10, 8)].filter(utils_1.utils.notNull).join('');\nconst getActionKeyMax = ({ indexStop }) => createMax([actionKeyPrefix, indexStop === undefined ? undefined : indexStop.toString(10, 8)].filter(utils_1.utils.notNull).join(''));\nconst serializeValidatorKey = ({ publicKey }) => `${validatorKeyPrefix}${client_common_1.common.ecPointToString(publicKey)}`;\nconst validatorMinKey = validatorKeyPrefix;\nconst validatorMaxKey = createMax(validatorKeyPrefix);\nconst serializeUInt160Key = ({ hash }) => client_common_1.common.uInt160ToString(hash);\nconst serializeUInt256Key = ({ hash }) => client_common_1.common.uInt256ToString(hash);\nconst createSerializeUInt160Key = (prefix) => (input) => `${prefix}${serializeUInt160Key(input)}`;\nconst createSerializeUInt256Key = (prefix) => (input) => `${prefix}${serializeUInt256Key(input)}`;\nconst accountMinKey = accountKeyPrefix;\nconst accountMaxKey = createMax(accountKeyPrefix);\nconst serializeOutputKey = ({ index, hash }) => `${outputKeyPrefix}${client_common_1.common.uInt256ToString(hash)}${index}`;\nconst typeKeyToSerializeKey = {\n    account: createSerializeUInt160Key(accountKeyPrefix),\n    accountUnclaimed: createSerializeAccountInputKey(accountUnclaimedKeyPrefix),\n    accountUnspent: createSerializeAccountInputKey(accountUnspentKeyPrefix),\n    action: serializeActionKey,\n    asset: createSerializeUInt256Key(assetKeyPrefix),\n    block: createSerializeUInt256Key(blockKeyPrefix),\n    blockData: createSerializeUInt256Key(blockDataKeyPrefix),\n    header: createSerializeUInt256Key(headerKeyPrefix),\n    transaction: createSerializeUInt256Key(transactionKeyPrefix),\n    output: serializeOutputKey,\n    transactionData: createSerializeUInt256Key(transactionDataKeyPrefix),\n    contract: createSerializeUInt160Key(contractKeyPrefix),\n    storageItem: serializeStorageItemKey,\n    validator: serializeValidatorKey,\n    invocationData: createSerializeUInt256Key(invocationDataKeyPrefix),\n};\nexports.keys = {\n    validatorsCountKey,\n    serializeHeaderIndexHashKey,\n    maxHeaderHashKey,\n    maxBlockHashKey,\n    getAccountUnclaimedKeyMin,\n    getAccountUnclaimedKeyMax,\n    getAccountUnspentKeyMin,\n    getAccountUnspentKeyMax,\n    getStorageItemKeyMin,\n    getStorageItemKeyMax,\n    serializeActionKey,\n    getActionKeyMin,\n    getActionKeyMax,\n    validatorMinKey,\n    validatorMaxKey,\n    accountMinKey,\n    accountMaxKey,\n    typeKeyToSerializeKey,\n};\n\n//# sourceMappingURL=keys.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertChange = void 0;\nconst tslib_1 = require(\"tslib\");\nconst node_storage_common_1 = require(\"@neo-one/node-storage-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst common = tslib_1.__importStar(require(\"./common\"));\nconst errors_1 = require(\"./errors\");\nconst convertAddChange = (changeIn) => {\n    const change = changeIn;\n    switch (change.type) {\n        case 'account':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.account(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'accountUnspent':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent({\n                        hash: change.value.hash,\n                        input: change.value.input,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'accountUnclaimed':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed({\n                        hash: change.value.hash,\n                        input: change.value.input,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'action':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.action({\n                        index: change.value.index,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'asset':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.asset(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'block':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.block(change.value),\n                    value: change.value.serializeWire(),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.maxBlockHashKey,\n                    value: common.serializeBlockHash(change.value.hash),\n                },\n            ];\n        case 'blockData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.blockData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'header':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.header(change.value),\n                    value: change.value.serializeWire(),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.maxHeaderHashKey,\n                    value: common.serializeHeaderHash(change.value.hash),\n                },\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.serializeHeaderIndexHashKey(change.value.index),\n                    value: common.serializeHeaderHash(change.value.hash),\n                },\n            ];\n        case 'transaction':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.transaction(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'output':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.output({\n                        hash: change.value.hash,\n                        index: change.value.index,\n                    }),\n                    value: change.value.output.serializeWire(),\n                },\n            ];\n        case 'transactionData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.transactionData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'contract':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.contract(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'storageItem':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem({\n                        hash: change.value.hash,\n                        key: change.value.key,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'validator':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.validator({\n                        publicKey: change.value.publicKey,\n                    }),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'invocationData':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.typeKeyToSerializeKey.invocationData(change.value),\n                    value: change.value.serializeWire(),\n                },\n            ];\n        case 'validatorsCount':\n            return [\n                {\n                    type: 'put',\n                    key: node_storage_common_1.keys.validatorsCountKey,\n                    value: change.value.serializeWire(),\n                },\n            ];\n        default:\n            utils_1.utils.assertNever(change);\n            throw new errors_1.UnknownTypeError(changeIn.type);\n    }\n};\nconst convertDeleteChange = (change) => {\n    switch (change.type) {\n        case 'account':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.account(change.key),\n            };\n        case 'accountUnspent':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnspent(change.key),\n            };\n        case 'accountUnclaimed':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.accountUnclaimed(change.key),\n            };\n        case 'contract':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.contract(change.key),\n            };\n        case 'storageItem':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.storageItem(change.key),\n            };\n        case 'validator':\n            return {\n                type: 'del',\n                key: node_storage_common_1.keys.typeKeyToSerializeKey.validator(change.key),\n            };\n        default:\n            utils_1.utils.assertNever(change);\n            throw new errors_1.UnknownTypeError();\n    }\n};\nexports.convertChange = (change) => {\n    if (change.type === 'add') {\n        return convertAddChange(change.change);\n    }\n    if (change.type === 'delete') {\n        return [convertDeleteChange(change.change)];\n    }\n    utils_1.utils.assertNever(change);\n    throw new errors_1.UnknownChangeTypeError();\n};\n\n//# sourceMappingURL=convertChange.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createReadMetadataStorage = exports.createTryGetMetadata = exports.createReadGetAllStorage = exports.createReadAllStorage = exports.createAll$ = exports.createReadStorage = exports.createTryGetLatest = exports.createTryGet = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst errors_1 = require(\"./errors\");\nconst streamToObservable_1 = require(\"./streamToObservable\");\nfunction createTryGet({ get, }) {\n    return async (key) => {\n        try {\n            const result = await get(key);\n            return result;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGet = createTryGet;\nfunction createTryGetLatest({ db, latestKey, deserializeResult, get, }) {\n    return async () => {\n        try {\n            const result = await db.get(latestKey);\n            const value = await get(deserializeResult(result));\n            return value;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGetLatest = createTryGetLatest;\nfunction createReadStorage({ db, serializeKey, deserializeValue, }) {\n    const get = async (key) => {\n        const serialized = serializeKey(key);\n        try {\n            const result = await db.get(serialized);\n            return deserializeValue(result);\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                throw new errors_1.KeyNotFoundError(serialized);\n            }\n            throw error;\n        }\n    };\n    return { get, tryGet: createTryGet({ get }) };\n}\nexports.createReadStorage = createReadStorage;\nfunction createAll$({ db, minKey, maxKey, deserializeValue, }) {\n    return streamToObservable_1.streamToObservable(() => db.createValueStream({\n        gte: minKey,\n        lte: maxKey,\n    })).pipe(operators_1.map(deserializeValue));\n}\nexports.createAll$ = createAll$;\nfunction createReadAllStorage({ db, serializeKey, minKey, maxKey, deserializeValue, }) {\n    const readStorage = createReadStorage({\n        db,\n        serializeKey,\n        deserializeValue,\n    });\n    return {\n        get: readStorage.get,\n        tryGet: readStorage.tryGet,\n        all$: createAll$({ db, minKey, maxKey, deserializeValue }),\n    };\n}\nexports.createReadAllStorage = createReadAllStorage;\nfunction createReadGetAllStorage({ db, serializeKey, getMinKey, getMaxKey, deserializeValue, }) {\n    const readStorage = createReadStorage({\n        db,\n        serializeKey,\n        deserializeValue,\n    });\n    return {\n        get: readStorage.get,\n        tryGet: readStorage.tryGet,\n        getAll$: (keys) => createAll$({\n            db,\n            minKey: getMinKey(keys),\n            maxKey: getMaxKey(keys),\n            deserializeValue,\n        }),\n    };\n}\nexports.createReadGetAllStorage = createReadGetAllStorage;\nfunction createTryGetMetadata({ get, }) {\n    return async () => {\n        try {\n            const result = await get();\n            return result;\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                return undefined;\n            }\n            throw error;\n        }\n    };\n}\nexports.createTryGetMetadata = createTryGetMetadata;\nfunction createReadMetadataStorage({ db, key, deserializeValue, }) {\n    const get = async () => {\n        try {\n            const result = await db.get(key);\n            return deserializeValue(result);\n        }\n        catch (error) {\n            if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n                throw new errors_1.KeyNotFoundError(key);\n            }\n            throw error;\n        }\n    };\n    return { get, tryGet: createTryGet({ get }) };\n}\nexports.createReadMetadataStorage = createReadMetadataStorage;\n\n//# sourceMappingURL=read.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.streamToObservable = void 0;\nconst rxjs_1 = require(\"rxjs\");\nexports.streamToObservable = (getStream) => new rxjs_1.Observable((observer) => {\n    const stream = getStream();\n    let done = false;\n    const cleanup = () => {\n        if (!done) {\n            done = true;\n            stream.removeListener('end', onEnd);\n            stream.removeListener('error', onError);\n            stream.removeListener('data', onData);\n        }\n    };\n    const onEnd = () => {\n        cleanup();\n        observer.complete();\n    };\n    const onError = (error) => {\n        cleanup();\n        observer.error(error);\n    };\n    const onData = (data) => observer.next(data);\n    stream.once('error', onError);\n    stream.once('end', onEnd);\n    stream.on('data', onData);\n    return cleanup;\n});\n\n//# sourceMappingURL=streamToObservable.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Blockchain_1 = require(\"./Blockchain\");\nObject.defineProperty(exports, \"Blockchain\", { enumerable: true, get: function () { return Blockchain_1.Blockchain; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Blockchain = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nconst js_priority_queue_1 = tslib_1.__importDefault(require(\"js-priority-queue\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst errors_1 = require(\"./errors\");\nconst getValidators_1 = require(\"./getValidators\");\nconst wrapExecuteScripts_1 = require(\"./wrapExecuteScripts\");\nconst WriteBatchBlockchain_1 = require(\"./WriteBatchBlockchain\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'blockchain' });\nclass Blockchain {\n    constructor(options) {\n        this.mutablePersistingBlocks = false;\n        this.mutableBlockQueue = new js_priority_queue_1.default({\n            comparator: (a, b) => a.block.index - b.block.index,\n        });\n        this.mutableInQueue = new Set();\n        this.mutableRunning = false;\n        this.mutableBlock$ = new rxjs_1.Subject();\n        this.getValidators = async (transactions) => {\n            logger.debug({ name: 'neo_blockchain_get_validators' });\n            return getValidators_1.getValidators(this, transactions);\n        };\n        this.calculateClaimAmount = async (claims) => {\n            logger.debug({ name: 'neo_blockchain_calculate_claim_amount' });\n            const spentCoins = await Promise.all(claims.map(async (claim) => this.tryGetSpentCoin(claim)));\n            const filteredSpentCoinsIn = spentCoins.filter(utils_1.utils.notNull);\n            if (spentCoins.length !== filteredSpentCoinsIn.length) {\n                throw new errors_1.CoinUnspentError(spentCoins.length - filteredSpentCoinsIn.length);\n            }\n            const filteredSpentCoins = filteredSpentCoinsIn.filter((spentCoin) => {\n                if (spentCoin.claimed) {\n                    throw new errors_1.CoinClaimedError(client_common_1.common.uInt256ToString(spentCoin.output.asset), spentCoin.output.value.toString(10));\n                }\n                if (!client_common_1.common.uInt256Equal(spentCoin.output.asset, this.settings.governingToken.hash)) {\n                    throw new errors_1.InvalidClaimError(client_common_1.common.uInt256ToString(spentCoin.output.asset), client_common_1.common.uInt256ToString(this.settings.governingToken.hash));\n                }\n                return true;\n            });\n            return node_core_1.utils.calculateClaimAmount({\n                coins: filteredSpentCoins.map((coin) => ({\n                    value: coin.output.value,\n                    startHeight: coin.startHeight,\n                    endHeight: coin.endHeight,\n                })),\n                decrementInterval: this.settings.decrementInterval,\n                generationAmount: this.settings.generationAmount,\n                getSystemFee: async (index) => {\n                    const header = await this.header.get({\n                        hashOrIndex: index,\n                    });\n                    const blockData = await this.blockData.get({\n                        hash: header.hash,\n                    });\n                    return blockData.systemFee;\n                },\n            });\n        };\n        this.verifyScript = async ({ scriptContainer, hash, witness, }) => {\n            let { verification } = witness;\n            if (verification.length === 0) {\n                const builder = new client_common_1.ScriptBuilder();\n                builder.emitAppCallVerification(hash);\n                verification = builder.build();\n            }\n            else if (!client_common_1.common.uInt160Equal(hash, client_common_1.crypto.toScriptHash(verification))) {\n                throw new errors_1.WitnessVerifyError();\n            }\n            const blockchain = this.createWriteBlockchain();\n            const mutableActions = [];\n            let globalActionIndex = new bn_js_1.BN(0);\n            const executeResult = await this.vm.executeScripts({\n                scripts: [{ code: witness.invocation }, { code: verification }],\n                blockchain,\n                scriptContainer,\n                triggerType: node_core_1.TriggerType.Verification,\n                action: node_core_1.NULL_ACTION,\n                gas: node_core_1.utils.ONE_HUNDRED_MILLION,\n                listeners: {\n                    onLog: ({ message, scriptHash }) => {\n                        mutableActions.push(new node_core_1.LogAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            message,\n                        }));\n                        globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                    },\n                    onNotify: ({ args, scriptHash }) => {\n                        mutableActions.push(new node_core_1.NotificationAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            args,\n                        }));\n                        globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                    },\n                },\n            });\n            const result = { actions: mutableActions, hash, witness };\n            const { stack, state, errorMessage } = executeResult;\n            if (state === client_common_1.VMState.Fault) {\n                return Object.assign(Object.assign({}, result), { failureMessage: errorMessage === undefined ? 'Script execution ended in a FAULT state' : errorMessage });\n            }\n            if (stack.length !== 1) {\n                return Object.assign(Object.assign({}, result), { failureMessage: `Verification did not return one result. This may be a bug in the ` +\n                        `smart contract compiler or the smart contract itself. If you are using the NEO•ONE compiler please file an issue. Found ${stack.length} results.` });\n            }\n            const top = stack[0];\n            if (!top.asBoolean()) {\n                return Object.assign(Object.assign({}, result), { failureMessage: 'Verification did not succeed.' });\n            }\n            return result;\n        };\n        this.tryGetInvocationData = async (transaction) => {\n            const data = await this.invocationData.tryGet({\n                hash: transaction.hash,\n            });\n            if (data === undefined) {\n                return undefined;\n            }\n            const [asset, contracts, actions] = await Promise.all([\n                data.assetHash === undefined ? Promise.resolve(undefined) : this.asset.get({ hash: data.assetHash }),\n                Promise.all(data.contractHashes.map(async (contractHash) => this.contract.tryGet({ hash: contractHash }))),\n                data.actionIndexStart.eq(data.actionIndexStop)\n                    ? Promise.resolve([])\n                    : this.action\n                        .getAll$({\n                        indexStart: data.actionIndexStart,\n                        indexStop: data.actionIndexStop.sub(node_core_1.utils.ONE),\n                    })\n                        .pipe(operators_1.toArray())\n                        .toPromise(),\n            ]);\n            return {\n                asset,\n                contracts: contracts.filter(utils_1.utils.notNull),\n                deletedContractHashes: data.deletedContractHashes,\n                migratedContractHashes: data.migratedContractHashes,\n                voteUpdates: data.voteUpdates,\n                result: data.result,\n                actions,\n                storageChanges: data.storageChanges,\n            };\n        };\n        this.tryGetTransactionData = async (transaction) => this.transactionData.tryGet({ hash: transaction.hash });\n        this.getUnclaimed = async (hash) => this.accountUnclaimed\n            .getAll$({ hash })\n            .pipe(operators_1.toArray())\n            .toPromise()\n            .then((values) => values.map((value) => value.input));\n        this.getUnspent = async (hash) => {\n            const unspent = await this.accountUnspent.getAll$({ hash }).pipe(operators_1.toArray()).toPromise();\n            return unspent.map((value) => value.input);\n        };\n        this.getAllValidators = async () => this.validator.all$.pipe(operators_1.toArray()).toPromise();\n        this.isSpent = async (input) => {\n            const transactionData = await this.transactionData.tryGet({\n                hash: input.hash,\n            });\n            return (transactionData !== undefined && transactionData.endHeights[input.index] !== undefined);\n        };\n        this.tryGetSpentCoin = async (input) => {\n            const [transactionData, output] = await Promise.all([\n                this.transactionData.tryGet({ hash: input.hash }),\n                this.output.get(input),\n            ]);\n            if (transactionData === undefined) {\n                return undefined;\n            }\n            const endHeight = transactionData.endHeights[input.index];\n            if (endHeight === undefined) {\n                return undefined;\n            }\n            const claimed = transactionData.claimed[input.index];\n            return {\n                output,\n                startHeight: transactionData.startHeight,\n                endHeight,\n                claimed: !!claimed,\n            };\n        };\n        this.storage = options.storage;\n        this.mutableCurrentBlock = options.currentBlock;\n        this.mutablePreviousBlock = options.previousBlock;\n        this.mutableCurrentHeader = options.currentHeader;\n        this.vm = options.vm;\n        this.settings$ = new rxjs_1.BehaviorSubject(options.settings);\n        const self = this;\n        this.deserializeWireContext = {\n            get messageMagic() {\n                return self.settings.messageMagic;\n            },\n        };\n        this.feeContext = {\n            get getOutput() {\n                return self.output.get;\n            },\n            get governingToken() {\n                return self.settings.governingToken;\n            },\n            get utilityToken() {\n                return self.settings.utilityToken;\n            },\n            get fees() {\n                return self.settings.fees;\n            },\n            get registerValidatorFee() {\n                return self.settings.registerValidatorFee;\n            },\n        };\n        this.serializeJSONContext = {\n            get addressVersion() {\n                return self.settings.addressVersion;\n            },\n            get feeContext() {\n                return self.feeContext;\n            },\n            get tryGetInvocationData() {\n                return self.tryGetInvocationData;\n            },\n            get tryGetTransactionData() {\n                return self.tryGetTransactionData;\n            },\n            get getUnclaimed() {\n                return self.getUnclaimed;\n            },\n            get getUnspent() {\n                return self.getUnspent;\n            },\n        };\n        this.start();\n    }\n    static async create({ settings, storage, vm }) {\n        const [currentBlock, currentHeader] = await Promise.all([\n            storage.block.tryGetLatest(),\n            storage.header.tryGetLatest(),\n        ]);\n        let previousBlock;\n        if (currentBlock !== undefined) {\n            previousBlock = await storage.block.tryGet({ hashOrIndex: currentBlock.index - 1 });\n        }\n        const blockchain = new Blockchain({\n            currentBlock,\n            currentHeader,\n            previousBlock,\n            settings,\n            storage,\n            vm,\n        });\n        if (currentHeader === undefined) {\n            await blockchain.persistHeaders([settings.genesisBlock.header]);\n        }\n        if (currentBlock === undefined) {\n            await blockchain.persistBlock({ block: settings.genesisBlock });\n        }\n        return blockchain;\n    }\n    get settings() {\n        return this.settings$.getValue();\n    }\n    get currentBlock() {\n        if (this.mutableCurrentBlock === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.mutableCurrentBlock;\n    }\n    get previousBlock() {\n        return this.mutablePreviousBlock;\n    }\n    get currentHeader() {\n        if (this.mutableCurrentHeader === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.mutableCurrentHeader;\n    }\n    get currentBlockIndex() {\n        return this.mutableCurrentBlock === undefined ? -1 : this.currentBlock.index;\n    }\n    get block$() {\n        return this.mutableBlock$;\n    }\n    get isPersistingBlock() {\n        return this.mutablePersistingBlocks;\n    }\n    get account() {\n        return this.storage.account;\n    }\n    get accountUnclaimed() {\n        return this.storage.accountUnclaimed;\n    }\n    get accountUnspent() {\n        return this.storage.accountUnspent;\n    }\n    get action() {\n        return this.storage.action;\n    }\n    get asset() {\n        return this.storage.asset;\n    }\n    get block() {\n        return this.storage.block;\n    }\n    get blockData() {\n        return this.storage.blockData;\n    }\n    get header() {\n        return this.storage.header;\n    }\n    get transaction() {\n        return this.storage.transaction;\n    }\n    get transactionData() {\n        return this.storage.transactionData;\n    }\n    get output() {\n        return this.storage.output;\n    }\n    get contract() {\n        return this.storage.contract;\n    }\n    get storageItem() {\n        return this.storage.storageItem;\n    }\n    get validator() {\n        return this.storage.validator;\n    }\n    get invocationData() {\n        return this.storage.invocationData;\n    }\n    get validatorsCount() {\n        return this.storage.validatorsCount;\n    }\n    async stop() {\n        if (!this.mutableRunning) {\n            return;\n        }\n        if (this.mutablePersistingBlocks) {\n            const doneRunningPromise = new Promise((resolve) => {\n                this.mutableDoneRunningResolve = resolve;\n            });\n            this.mutableRunning = false;\n            await doneRunningPromise;\n            this.mutableDoneRunningResolve = undefined;\n        }\n        else {\n            this.mutableRunning = false;\n        }\n        logger.info({ name: 'neo_blockchain_stop' }, 'NEO blockchain stopped.');\n    }\n    updateSettings(settings) {\n        this.settings$.next(settings);\n    }\n    async persistBlock({ block, unsafe = false, }) {\n        return new Promise((resolve, reject) => {\n            if (this.mutableInQueue.has(block.hashHex)) {\n                resolve();\n                return;\n            }\n            this.mutableInQueue.add(block.hashHex);\n            this.mutableBlockQueue.queue({\n                block,\n                resolve,\n                reject,\n                unsafe,\n            });\n            this.persistBlocksAsync();\n        });\n    }\n    async persistHeaders(_headers) {\n    }\n    async verifyBlock(block) {\n        await block.verify({\n            genesisBlock: this.settings.genesisBlock,\n            tryGetBlock: this.block.tryGet,\n            tryGetHeader: this.header.tryGet,\n            isSpent: this.isSpent,\n            getAsset: this.asset.get,\n            getOutput: this.output.get,\n            tryGetAccount: this.account.tryGet,\n            getValidators: this.getValidators,\n            standbyValidators: this.settings.standbyValidators,\n            getAllValidators: this.getAllValidators,\n            calculateClaimAmount: async (claims) => this.calculateClaimAmount(claims),\n            verifyScript: async (options) => this.verifyScript(options),\n            currentHeight: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n            governingToken: this.settings.governingToken,\n            utilityToken: this.settings.utilityToken,\n            fees: this.settings.fees,\n            registerValidatorFee: this.settings.registerValidatorFee,\n        });\n    }\n    async verifyConsensusPayload(payload) {\n        await payload.verify({\n            getValidators: async () => this.getValidators([]),\n            verifyScript: async (options) => this.verifyScript(options),\n            currentIndex: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n            currentBlockHash: this.currentBlock.hash,\n        });\n    }\n    async verifyTransaction({ transaction, memPool, }) {\n        try {\n            const verifications = await transaction.verify({\n                calculateClaimAmount: this.calculateClaimAmount,\n                isSpent: this.isSpent,\n                getAsset: this.asset.get,\n                getOutput: this.output.get,\n                tryGetAccount: this.account.tryGet,\n                standbyValidators: this.settings.standbyValidators,\n                getAllValidators: this.getAllValidators,\n                verifyScript: async (options) => this.verifyScript(options),\n                governingToken: this.settings.governingToken,\n                utilityToken: this.settings.utilityToken,\n                fees: this.settings.fees,\n                registerValidatorFee: this.settings.registerValidatorFee,\n                currentHeight: this.currentBlockIndex,\n                memPool,\n            });\n            return { verifications };\n        }\n        catch (error) {\n            if (error.code === undefined || typeof error.code !== 'string' || !error.code.includes('VERIFY')) {\n                throw new errors_1.UnknownVerifyError(error.message);\n            }\n            throw error;\n        }\n    }\n    async invokeScript(script) {\n        const transaction = new node_core_1.InvocationTransaction({\n            script,\n            gas: client_common_1.common.ONE_HUNDRED_FIXED8,\n        });\n        return this.invokeTransaction(transaction);\n    }\n    async invokeTransaction(transaction) {\n        const blockchain = this.createWriteBlockchain();\n        const mutableActions = [];\n        let globalActionIndex = new bn_js_1.BN(0);\n        const result = await wrapExecuteScripts_1.wrapExecuteScripts(async () => this.vm.executeScripts({\n            scripts: [{ code: transaction.script }],\n            blockchain,\n            scriptContainer: {\n                type: node_core_1.ScriptContainerType.Transaction,\n                value: transaction,\n            },\n            listeners: {\n                onLog: ({ message, scriptHash }) => {\n                    mutableActions.push(new node_core_1.LogAction({\n                        index: globalActionIndex,\n                        scriptHash,\n                        message,\n                    }));\n                    globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                },\n                onNotify: ({ args, scriptHash }) => {\n                    mutableActions.push(new node_core_1.NotificationAction({\n                        index: globalActionIndex,\n                        scriptHash,\n                        args,\n                    }));\n                    globalActionIndex = globalActionIndex.add(node_core_1.utils.ONE);\n                },\n            },\n            triggerType: node_core_1.TriggerType.Application,\n            action: node_core_1.NULL_ACTION,\n            gas: transaction.gas,\n            skipWitnessVerify: true,\n        }));\n        return {\n            result,\n            actions: mutableActions,\n        };\n    }\n    async reset() {\n        await this.stop();\n        await this.storage.reset();\n        this.mutableCurrentHeader = undefined;\n        this.mutableCurrentBlock = undefined;\n        this.mutablePreviousBlock = undefined;\n        this.start();\n        await this.persistHeaders([this.settings.genesisBlock.header]);\n        await this.persistBlock({ block: this.settings.genesisBlock });\n    }\n    async persistBlocksAsync() {\n        if (this.mutablePersistingBlocks || !this.mutableRunning) {\n            return;\n        }\n        this.mutablePersistingBlocks = true;\n        let entry;\n        try {\n            entry = this.cleanBlockQueue();\n            while (this.mutableRunning && entry !== undefined && entry.block.index === this.currentBlockIndex + 1) {\n                const entryNonNull = entry;\n                const logData = {\n                    [utils_1.Labels.NEO_BLOCK_INDEX]: entry.block.index,\n                    name: 'neo_blockchain_persist_block_top_level',\n                };\n                try {\n                    await this.persistBlockInternal(entryNonNull.block, entryNonNull.unsafe);\n                    logger.debug(logData);\n                }\n                catch (err) {\n                    logger.error(Object.assign({ err }, logData));\n                    throw err;\n                }\n                entry.resolve();\n                this.mutableBlock$.next(entry.block);\n                entry = this.cleanBlockQueue();\n            }\n            if (entry !== undefined) {\n                this.mutableBlockQueue.queue(entry);\n            }\n        }\n        catch (error) {\n            if (entry !== undefined) {\n                entry.reject(error);\n            }\n        }\n        finally {\n            this.mutablePersistingBlocks = false;\n            if (this.mutableDoneRunningResolve !== undefined) {\n                this.mutableDoneRunningResolve();\n                this.mutableDoneRunningResolve = undefined;\n            }\n        }\n    }\n    cleanBlockQueue() {\n        let entry = this.dequeBlockQueue();\n        while (entry !== undefined && entry.block.index <= this.currentBlockIndex) {\n            entry.resolve();\n            entry = this.dequeBlockQueue();\n        }\n        return entry;\n    }\n    dequeBlockQueue() {\n        if (this.mutableBlockQueue.length > 0) {\n            return this.mutableBlockQueue.dequeue();\n        }\n        return undefined;\n    }\n    start() {\n        this.mutableBlock$ = new rxjs_1.Subject();\n        this.mutablePersistingBlocks = false;\n        this.mutableBlockQueue = new js_priority_queue_1.default({\n            comparator: (a, b) => a.block.index - b.block.index,\n        });\n        this.mutableInQueue = new Set();\n        this.mutableDoneRunningResolve = undefined;\n        this.mutableRunning = true;\n        logger.info({ name: 'neo_blockchain_start' }, 'Neo blockchain started.');\n    }\n    async persistBlockInternal(block, unsafe) {\n        if (!unsafe) {\n            await this.verifyBlock(block);\n        }\n        const blockchain = this.createWriteBlockchain();\n        await blockchain.persistBlock(block);\n        await this.storage.commit(blockchain.getChangeSet());\n        this.mutablePreviousBlock = this.mutableCurrentBlock;\n        this.mutableCurrentBlock = block;\n        this.mutableCurrentHeader = block.header;\n    }\n    createWriteBlockchain() {\n        return new WriteBatchBlockchain_1.WriteBatchBlockchain({\n            settings: this.settings,\n            currentBlock: this.mutableCurrentBlock,\n            currentHeader: this.mutableCurrentHeader,\n            storage: this.storage,\n            vm: this.vm,\n            getValidators: this.getValidators,\n        });\n    }\n}\nexports.Blockchain = Blockchain;\n\n//# sourceMappingURL=Blockchain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createChild = exports.getFinalLogger = exports.setGlobalLogLevel = exports.testLogger = exports.httpLogger = exports.cliLogger = exports.rpcLogger = exports.nodeLogger = exports.serverLogger = exports.editorLogger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst logger_config_1 = require(\"@neo-one/logger-config\");\nconst pino_1 = tslib_1.__importDefault(require(\"pino\"));\nconst createLogger = (service, options = {}) => options.browser !== undefined\n    ? pino_1.default(Object.assign(Object.assign({}, options), { base: { service }, prettyPrint: logger_config_1.getPretty() }))\n    : pino_1.default(Object.assign(Object.assign({}, options), { base: { service }, prettyPrint: logger_config_1.getPretty() }), process.env.NODE_ENV === 'production' ? pino_1.default.extreme(1) : pino_1.default.destination(1));\nconst browserOptions = typeof window === 'undefined' && typeof origin === 'undefined' ? {} : { browser: { asObject: true } };\nexports.editorLogger = createLogger('editor-server', browserOptions);\nexports.serverLogger = createLogger('server', browserOptions);\nexports.nodeLogger = createLogger('node', browserOptions);\nexports.rpcLogger = createLogger('rpc', browserOptions);\nexports.cliLogger = createLogger('cli', browserOptions);\nexports.httpLogger = createLogger('http', browserOptions);\nexports.testLogger = createLogger('test', browserOptions);\nlet loggers = [\n    exports.editorLogger,\n    exports.serverLogger,\n    exports.nodeLogger,\n    exports.rpcLogger,\n    exports.cliLogger,\n    exports.httpLogger,\n    exports.testLogger,\n];\nexports.setGlobalLogLevel = (level) => loggers.forEach((logger) => {\n    logger.level = level;\n});\nexports.getFinalLogger = (logger) => pino_1.default.final(logger);\nexports.createChild = (parent, bindings) => {\n    const child = parent.child(bindings);\n    loggers = loggers.concat(child);\n    return child;\n};\n\n//# sourceMappingURL=loggers.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./pretty\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setPretty = exports.getPretty = void 0;\nlet pretty = false;\nexports.getPretty = () => pretty;\nexports.setPretty = (newPretty) => {\n    pretty = newPretty;\n};\n\n//# sourceMappingURL=pretty.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=types.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidatorCache = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst operators_1 = require(\"rxjs/operators\");\nclass ValidatorCache {\n    constructor(blockchain) {\n        this.blockchain = blockchain;\n        this.mutableAccounts = {};\n        this.mutableValidators = {};\n    }\n    async getAccount(hash) {\n        let account = this.mutableAccounts[client_common_1.common.uInt160ToHex(hash)];\n        if (account === undefined) {\n            account = await this.blockchain.account.tryGet({ hash });\n        }\n        if (account === undefined) {\n            account = new node_core_1.Account({ hash });\n        }\n        this.mutableAccounts[client_common_1.common.uInt160ToHex(hash)] = account;\n        return account;\n    }\n    async updateAccountBalance(hash, asset, value) {\n        const assetHex = client_common_1.common.uInt256ToHex(asset);\n        await this.getAccount(hash);\n        const hashHex = client_common_1.common.uInt160ToHex(hash);\n        const account = this.mutableAccounts[hashHex];\n        const balance = account.balances[assetHex];\n        this.mutableAccounts[hashHex] = account.update({\n            balances: Object.assign(Object.assign({}, account.balances), { [assetHex]: value.add(balance === undefined ? client_common_1.utils.ZERO : balance) }),\n        });\n    }\n    async getValidator(publicKey) {\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        let validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            validator = await this.blockchain.validator.tryGet({ publicKey });\n        }\n        if (validator === undefined) {\n            validator = new node_core_1.Validator({ publicKey });\n        }\n        this.mutableValidators[publicKeyHex] = validator;\n        return validator;\n    }\n    async addValidator(validator) {\n        this.mutableValidators[client_common_1.common.ecPointToHex(validator.publicKey)] = validator;\n    }\n    async deleteValidator(publicKey) {\n        this.mutableValidators[client_common_1.common.ecPointToHex(publicKey)] = undefined;\n    }\n    async updateValidatorVotes(publicKey, value) {\n        await this.getValidator(publicKey);\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        const validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            throw new Error('For Flow');\n        }\n        this.mutableValidators[publicKeyHex] = validator.update({\n            votes: validator.votes.add(value),\n        });\n    }\n    async updateValidator(publicKey, update) {\n        await this.getValidator(publicKey);\n        const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n        const validator = this.mutableValidators[publicKeyHex];\n        if (validator === undefined) {\n            throw new Error('For Flow');\n        }\n        const newValidator = validator.update(update);\n        this.mutableValidators[publicKeyHex] = newValidator;\n        return newValidator;\n    }\n    async getAllValidators() {\n        const validators = await this.blockchain.validator.all$.pipe(operators_1.toArray()).toPromise();\n        const mutablePublicKeyToValidator = lodash_1.default.fromPairs(validators.map((validator) => [client_common_1.common.ecPointToHex(validator.publicKey), validator]));\n        Object.entries(this.mutableValidators).forEach(([publicKey, validator]) => {\n            const publicKeyHex = client_common_1.common.ecPointToHex(publicKey);\n            if (validator === undefined) {\n                delete mutablePublicKeyToValidator[publicKeyHex];\n            }\n            else {\n                mutablePublicKeyToValidator[publicKeyHex] = validator;\n            }\n        });\n        return Object.values(mutablePublicKeyToValidator);\n    }\n    async getValidatorsCount() {\n        let validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            validatorsCount = await this.blockchain.validatorsCount.tryGet();\n        }\n        if (validatorsCount === undefined) {\n            validatorsCount = new node_core_1.ValidatorsCount();\n        }\n        this.mutableValidatorsCount = validatorsCount;\n        return validatorsCount;\n    }\n    async updateValidatorsCountVotes(index, value) {\n        await this.getValidatorsCount();\n        const validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            throw new Error('For Flow');\n        }\n        const votes = validatorsCount.votes[index];\n        this.mutableValidatorsCount = validatorsCount.update({\n            votes: validatorsCount.votes\n                .slice(0, index)\n                .concat((votes === undefined ? client_common_1.utils.ZERO : votes).add(value))\n                .concat(validatorsCount.votes.slice(index + 1)),\n        });\n    }\n    async addValidatorsCount(validatorsCount) {\n        this.mutableValidatorsCount = validatorsCount;\n    }\n    async updateValidatorsCount(update) {\n        await this.getValidatorsCount();\n        const validatorsCount = this.mutableValidatorsCount;\n        if (validatorsCount === undefined) {\n            throw new Error('For Flow');\n        }\n        this.mutableValidatorsCount = validatorsCount.update(update);\n        return this.mutableValidatorsCount;\n    }\n}\nexports.ValidatorCache = ValidatorCache;\n\n//# sourceMappingURL=ValidatorCache.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteBatchBlockchain = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bn_js_1 = require(\"bn.js\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst errors_1 = require(\"./errors\");\nconst getValidators_1 = require(\"./getValidators\");\nconst StorageCache_1 = require(\"./StorageCache\");\nconst wrapExecuteScripts_1 = require(\"./wrapExecuteScripts\");\nclass WriteBatchBlockchain {\n    constructor(options) {\n        this.settings = options.settings;\n        this.currentBlockInternal = options.currentBlock;\n        this.currentHeaderInternal = options.currentHeader;\n        this.storage = options.storage;\n        this.vm = options.vm;\n        this.getValidators = options.getValidators;\n        const output = new StorageCache_1.OutputStorageCache(() => this.storage.output);\n        this.caches = {\n            account: new StorageCache_1.ReadAllAddUpdateDeleteStorageCache({\n                name: 'account',\n                readAllStorage: () => this.storage.account,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt160ToString(key.hash),\n                createAddChange: (value) => ({ type: 'account', value }),\n                createDeleteChange: (key) => ({ type: 'account', key }),\n            }),\n            accountUnspent: new StorageCache_1.ReadGetAllAddDeleteStorageCache({\n                name: 'accountUnspent',\n                readGetAllStorage: () => this.storage.accountUnspent,\n                getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${client_common_1.common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n                matchesPartialKey: (value, key) => client_common_1.common.uInt160Equal(value.hash, key.hash),\n                createAddChange: (value) => ({ type: 'accountUnspent', value }),\n                createDeleteChange: (key) => ({ type: 'accountUnspent', key }),\n            }),\n            accountUnclaimed: new StorageCache_1.ReadGetAllAddDeleteStorageCache({\n                name: 'accountUnclaimed',\n                readGetAllStorage: () => this.storage.accountUnclaimed,\n                getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${client_common_1.common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n                matchesPartialKey: (value, key) => client_common_1.common.uInt160Equal(value.hash, key.hash),\n                createAddChange: (value) => ({ type: 'accountUnclaimed', value }),\n                createDeleteChange: (key) => ({ type: 'accountUnclaimed', key }),\n            }),\n            action: new StorageCache_1.ReadGetAllAddStorageCache({\n                name: 'action',\n                readGetAllStorage: () => this.storage.action,\n                getKeyFromValue: (value) => ({\n                    index: value.index,\n                }),\n                getKeyString: (key) => key.index.toString(10),\n                matchesPartialKey: (value, key) => (key.indexStart === undefined || value.index.gte(key.indexStart)) &&\n                    (key.indexStop === undefined || value.index.lte(key.indexStop)),\n                createAddChange: (value) => ({ type: 'action', value }),\n            }),\n            asset: new StorageCache_1.ReadAddUpdateStorageCache({\n                name: 'asset',\n                readStorage: () => this.storage.asset,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'asset', value }),\n            }),\n            block: new StorageCache_1.BlockLikeStorageCache({\n                name: 'block',\n                readStorage: () => ({\n                    get: this.storage.block.get,\n                    tryGet: this.storage.block.tryGet,\n                }),\n                createAddChange: (value) => ({ type: 'block', value }),\n            }),\n            blockData: new StorageCache_1.ReadAddStorageCache({\n                name: 'blockData',\n                readStorage: () => this.storage.blockData,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'blockData', value }),\n            }),\n            header: new StorageCache_1.BlockLikeStorageCache({\n                name: 'header',\n                readStorage: () => ({\n                    get: this.storage.header.get,\n                    tryGet: this.storage.header.tryGet,\n                }),\n                createAddChange: (value) => ({ type: 'header', value }),\n            }),\n            transaction: new StorageCache_1.ReadAddStorageCache({\n                name: 'transaction',\n                readStorage: () => this.storage.transaction,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'transaction', value }),\n                onAdd: async (value) => {\n                    await Promise.all(value.outputs.map(async (out, index) => output.add({ hash: value.hash, index, output: out })));\n                },\n                allowDupes: true,\n            }),\n            transactionData: new StorageCache_1.ReadAddUpdateStorageCache({\n                name: 'transactionData',\n                readStorage: () => this.storage.transactionData,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'transactionData', value }),\n                allowDupes: true,\n            }),\n            output,\n            contract: new StorageCache_1.ReadAddDeleteStorageCache({\n                name: 'contract',\n                readStorage: () => this.storage.contract,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt160ToString(key.hash),\n                createAddChange: (value) => ({ type: 'contract', value }),\n                createDeleteChange: (key) => ({ type: 'contract', key }),\n            }),\n            storageItem: new StorageCache_1.ReadGetAllAddUpdateDeleteStorageCache({\n                name: 'storageItem',\n                readGetAllStorage: () => this.storage.storageItem,\n                update: (value, update) => value.update(update),\n                getKeyFromValue: (value) => ({\n                    hash: value.hash,\n                    key: value.key,\n                }),\n                getKeyString: (key) => `${client_common_1.common.uInt160ToString(key.hash)}:${key.key.toString('hex')}`,\n                matchesPartialKey: (value, key) => (key.hash === undefined || client_common_1.common.uInt160Equal(value.hash, key.hash)) &&\n                    (key.prefix === undefined || key.prefix.every((byte, idx) => value.key[idx] === byte)),\n                createAddChange: (value) => ({ type: 'storageItem', value }),\n                createDeleteChange: (key) => ({ type: 'storageItem', key }),\n            }),\n            validator: new StorageCache_1.ReadAllAddUpdateDeleteStorageCache({\n                name: 'validator',\n                readAllStorage: () => this.storage.validator,\n                getKeyFromValue: (value) => ({ publicKey: value.publicKey }),\n                getKeyString: (key) => client_common_1.common.ecPointToString(key.publicKey),\n                createAddChange: (value) => ({ type: 'validator', value }),\n                update: (value, update) => value.update(update),\n                createDeleteChange: (key) => ({ type: 'validator', key }),\n            }),\n            invocationData: new StorageCache_1.ReadAddStorageCache({\n                name: 'invocationData',\n                readStorage: () => this.storage.invocationData,\n                getKeyFromValue: (value) => ({ hash: value.hash }),\n                getKeyString: (key) => client_common_1.common.uInt256ToString(key.hash),\n                createAddChange: (value) => ({ type: 'invocationData', value }),\n            }),\n            validatorsCount: new StorageCache_1.ReadAddUpdateMetadataStorageCache({\n                name: 'validatorsCount',\n                readStorage: () => this.storage.validatorsCount,\n                createAddChange: (value) => ({ type: 'validatorsCount', value }),\n                update: (value, update) => value.update(update),\n            }),\n        };\n        this.account = this.caches.account;\n        this.accountUnspent = this.caches.accountUnspent;\n        this.accountUnclaimed = this.caches.accountUnclaimed;\n        this.action = this.caches.action;\n        this.asset = this.caches.asset;\n        this.block = this.caches.block;\n        this.blockData = this.caches.blockData;\n        this.header = this.caches.header;\n        this.transaction = this.caches.transaction;\n        this.transactionData = this.caches.transactionData;\n        this.output = this.caches.output;\n        this.contract = this.caches.contract;\n        this.storageItem = this.caches.storageItem;\n        this.validator = this.caches.validator;\n        this.invocationData = this.caches.invocationData;\n        this.validatorsCount = this.caches.validatorsCount;\n    }\n    get currentBlock() {\n        if (this.currentBlockInternal === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.currentBlockInternal;\n    }\n    get currentBlockIndex() {\n        return this.currentBlockInternal === undefined ? 0 : this.currentBlockInternal.index;\n    }\n    get currentHeader() {\n        if (this.currentHeaderInternal === undefined) {\n            throw new errors_1.GenesisBlockNotRegisteredError();\n        }\n        return this.currentHeaderInternal;\n    }\n    getChangeSet() {\n        return Object.values(this.caches).reduce((acc, cache) => acc.concat(cache.getChangeSet()), []);\n    }\n    getTrackedChangeSet() {\n        return Object.values(this.caches).reduce((acc, cache) => acc.concat(cache.getTrackedChangeSet()), []);\n    }\n    async persistBlock(block) {\n        const [maybePrevBlockData, outputContractsList] = await Promise.all([\n            block.index === 0 ? Promise.resolve(undefined) : this.blockData.get({ hash: block.previousHash }),\n            Promise.all([\n                ...new Set(block.transactions.reduce((acc, transaction) => acc.concat(transaction.outputs.map((output) => client_common_1.common.uInt160ToString(output.address))), [])),\n            ].map(async (hash) => this.contract.tryGet({ hash: client_common_1.common.stringToUInt160(hash) }))),\n            this.block.add(block),\n            this.header.add(block.header),\n        ]);\n        const prevBlockData = maybePrevBlockData === undefined\n            ? {\n                lastGlobalTransactionIndex: client_common_1.utils.NEGATIVE_ONE,\n                lastGlobalActionIndex: client_common_1.utils.NEGATIVE_ONE,\n                systemFee: client_common_1.utils.ZERO,\n            }\n            : {\n                lastGlobalTransactionIndex: maybePrevBlockData.lastGlobalTransactionIndex,\n                lastGlobalActionIndex: maybePrevBlockData.lastGlobalActionIndex,\n                systemFee: maybePrevBlockData.systemFee,\n            };\n        const outputContracts = {};\n        outputContractsList.filter(utils_1.utils.notNull).forEach((outputContract) => {\n            outputContracts[outputContract.hashHex] = outputContract;\n        });\n        const [utxo, rest] = lodash_1.default.partition(block.transactions.map((transaction, idx) => [idx, transaction]), ([idx, transaction]) => ((transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction) ||\n            (transaction.type === node_core_1.TransactionType.Contract && transaction instanceof node_core_1.ContractTransaction) ||\n            (transaction.type === node_core_1.TransactionType.Miner && transaction instanceof node_core_1.MinerTransaction)) &&\n            !transaction.outputs.some((output) => outputContracts[client_common_1.common.uInt160ToString(output.address)] !== undefined));\n        const [globalActionIndex] = await Promise.all([\n            rest.length > 0\n                ? this.persistTransactions(block, rest, prevBlockData.lastGlobalTransactionIndex, prevBlockData.lastGlobalActionIndex)\n                : Promise.resolve(prevBlockData.lastGlobalActionIndex),\n            utxo.length > 0\n                ?\n                    this.persistUTXOTransactions(block, utxo, prevBlockData.lastGlobalTransactionIndex)\n                : Promise.resolve(),\n        ]);\n        await this.blockData.add(new node_core_1.BlockData({\n            hash: block.hash,\n            lastGlobalTransactionIndex: prevBlockData.lastGlobalTransactionIndex.add(new bn_js_1.BN(block.transactions.length)),\n            lastGlobalActionIndex: globalActionIndex,\n            systemFee: prevBlockData.systemFee.add(block.getSystemFee({\n                getOutput: this.output.get,\n                governingToken: this.settings.governingToken,\n                utilityToken: this.settings.utilityToken,\n                fees: this.settings.fees,\n                registerValidatorFee: this.settings.registerValidatorFee,\n            })),\n        }));\n    }\n    async persistUTXOTransactions(block, transactions, lastGlobalTransactionIndex) {\n        const inputs = [];\n        const claims = [];\n        const outputWithInputs = [];\n        for (const idxAndTransaction of transactions) {\n            const transaction = idxAndTransaction[1];\n            inputs.push(...transaction.inputs);\n            if (transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction) {\n                claims.push(...transaction.claims);\n            }\n            outputWithInputs.push(...this.getOutputWithInput(transaction));\n        }\n        await Promise.all([\n            Promise.all(transactions.map(async ([idx, transaction]) => this.transaction.add(transaction))),\n            Promise.all(transactions.map(async ([idx, transaction]) => this.transactionData.add(new node_core_1.TransactionData({\n                hash: transaction.hash,\n                startHeight: block.index,\n                blockHash: block.hash,\n                index: idx,\n                globalIndex: lastGlobalTransactionIndex.add(new bn_js_1.BN(idx + 1)),\n            })))),\n            this.updateAccounts(inputs, claims, outputWithInputs),\n            this.updateCoins(inputs, claims, block),\n        ]);\n    }\n    async persistTransactions(block, transactions, lastGlobalTransactionIndex, lastGlobalActionIndex) {\n        let globalActionIndex = lastGlobalActionIndex.add(client_common_1.utils.ONE);\n        for (const [idx, transaction] of transactions) {\n            globalActionIndex = await this.persistTransaction(block, transaction, idx, lastGlobalTransactionIndex, globalActionIndex);\n        }\n        return globalActionIndex.sub(client_common_1.utils.ONE);\n    }\n    async persistTransaction(block, transactionIn, transactionIndex, lastGlobalTransactionIndex, globalActionIndexIn) {\n        let globalActionIndex = globalActionIndexIn;\n        const transaction = transactionIn;\n        const claims = transaction.type === node_core_1.TransactionType.Claim && transaction instanceof node_core_1.ClaimTransaction ? transaction.claims : [];\n        let accountChanges = {};\n        let validatorChanges = {};\n        let validatorsCountChanges = [];\n        if (transaction.type === node_core_1.TransactionType.State && transaction instanceof node_core_1.StateTransaction) {\n            ({ accountChanges, validatorChanges, validatorsCountChanges } = await getValidators_1.getDescriptorChanges({\n                transactions: [transaction],\n                getAccount: async (hash) => this.account.tryGet({ hash }).then((account) => (account === undefined ? new node_core_1.Account({ hash }) : account)),\n                governingTokenHash: this.settings.governingToken.hashHex,\n            }));\n        }\n        await Promise.all([\n            this.transaction.add(transaction),\n            this.transactionData.add(new node_core_1.TransactionData({\n                hash: transaction.hash,\n                blockHash: block.hash,\n                startHeight: block.index,\n                index: transactionIndex,\n                globalIndex: lastGlobalTransactionIndex.add(new bn_js_1.BN(transactionIndex + 1)),\n            })),\n            this.updateAccounts(transaction.inputs, claims, this.getOutputWithInput(transaction), accountChanges),\n            this.updateCoins(transaction.inputs, claims, block),\n            this.processStateTransaction(validatorChanges, validatorsCountChanges),\n        ]);\n        if (transaction.type === node_core_1.TransactionType.Register && transaction instanceof node_core_1.RegisterTransaction) {\n            await this.asset.add(new node_core_1.Asset({\n                hash: transaction.hash,\n                type: transaction.asset.type,\n                name: transaction.asset.name,\n                amount: transaction.asset.amount,\n                precision: transaction.asset.precision,\n                owner: transaction.asset.owner,\n                admin: transaction.asset.admin,\n                issuer: transaction.asset.admin,\n                expiration: this.currentBlockIndex + 2 * 2000000,\n                isFrozen: false,\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Issue && transaction instanceof node_core_1.IssueTransaction) {\n            const results = await Promise.all(Object.entries(transaction.getTransactionResults({\n                getOutput: this.output.get,\n            })));\n            await Promise.all(results.map(async ([assetHex, value]) => {\n                const hash = client_common_1.common.stringToUInt256(assetHex);\n                const asset = await this.asset.get({ hash });\n                await this.asset.update(asset, {\n                    available: asset.available.add(value.neg()),\n                });\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Enrollment && transaction instanceof node_core_1.EnrollmentTransaction) {\n            await this.validator.add(new node_core_1.Validator({\n                publicKey: transaction.publicKey,\n            }));\n        }\n        else if (transaction.type === node_core_1.TransactionType.Publish && transaction instanceof node_core_1.PublishTransaction) {\n            const contract = await this.contract.tryGet({\n                hash: transaction.contract.hash,\n            });\n            if (contract === undefined) {\n                await this.contract.add(transaction.contract);\n            }\n        }\n        else if (transaction.type === node_core_1.TransactionType.Invocation && transaction instanceof node_core_1.InvocationTransaction) {\n            const temporaryBlockchain = new WriteBatchBlockchain({\n                settings: this.settings,\n                currentBlock: this.currentBlockInternal,\n                currentHeader: this.currentHeader,\n                storage: this,\n                vm: this.vm,\n                getValidators: this.getValidators,\n            });\n            const migratedContractHashes = [];\n            const voteUpdates = [];\n            const actions = [];\n            const result = await wrapExecuteScripts_1.wrapExecuteScripts(async () => this.vm.executeScripts({\n                scripts: [{ code: transaction.script }],\n                blockchain: temporaryBlockchain,\n                scriptContainer: {\n                    type: node_core_1.ScriptContainerType.Transaction,\n                    value: transaction,\n                },\n                triggerType: node_core_1.TriggerType.Application,\n                action: {\n                    blockIndex: block.index,\n                    blockHash: block.hash,\n                    transactionIndex,\n                    transactionHash: transaction.hash,\n                },\n                gas: transaction.gas,\n                listeners: {\n                    onLog: ({ message, scriptHash }) => {\n                        actions.push(new node_core_1.LogAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            message,\n                        }));\n                        globalActionIndex = globalActionIndex.add(client_common_1.utils.ONE);\n                    },\n                    onNotify: ({ args, scriptHash }) => {\n                        actions.push(new node_core_1.NotificationAction({\n                            index: globalActionIndex,\n                            scriptHash,\n                            args,\n                        }));\n                        globalActionIndex = globalActionIndex.add(client_common_1.utils.ONE);\n                    },\n                    onMigrateContract: ({ from, to }) => {\n                        migratedContractHashes.push([from, to]);\n                    },\n                    onSetVotes: ({ address, votes }) => {\n                        voteUpdates.push([address, votes]);\n                    },\n                },\n                persistingBlock: block,\n            }));\n            const addActionsPromise = Promise.all(actions.map(async (action) => this.action.add(action)));\n            if (result instanceof node_core_1.InvocationResultSuccess) {\n                const assetChangeSet = temporaryBlockchain.asset.getChangeSet();\n                const assetHash = assetChangeSet\n                    .map((change) => change.type === 'add' && change.change.type === 'asset' ? change.change.value.hash : undefined)\n                    .find((value) => value !== undefined);\n                const contractsChangeSet = temporaryBlockchain.contract.getChangeSet();\n                const contractHashes = contractsChangeSet\n                    .map((change) => change.type === 'add' && change.change.type === 'contract' ? change.change.value.hash : undefined)\n                    .filter(utils_1.utils.notNull);\n                const deletedContractHashes = contractsChangeSet\n                    .map((change) => change.type === 'delete' && change.change.type === 'contract' ? change.change.key.hash : undefined)\n                    .filter(utils_1.utils.notNull);\n                const storageChanges = temporaryBlockchain.storageItem\n                    .getChangeSet()\n                    .map((change) => {\n                    const addChange = change.type === 'add' && change.change.type === 'storageItem'\n                        ? { value: change.change.value, subType: change.subType }\n                        : undefined;\n                    if (addChange !== undefined) {\n                        const options = {\n                            hash: addChange.value.hash,\n                            key: addChange.value.key,\n                            value: addChange.value.value,\n                        };\n                        return addChange.subType === 'add' ? new node_core_1.StorageChangeAdd(options) : new node_core_1.StorageChangeModify(options);\n                    }\n                    const deleteChange = change.type === 'delete' && change.change.type === 'storageItem' ? change.change.key : undefined;\n                    if (deleteChange !== undefined) {\n                        return new node_core_1.StorageChangeDelete(deleteChange);\n                    }\n                    return undefined;\n                })\n                    .filter(utils_1.utils.notNull);\n                temporaryBlockchain.getTrackedChangeSet().forEach((change) => {\n                    this.caches[change.type].addTrackedChange(change.key, change.value);\n                });\n                await Promise.all([\n                    this.invocationData.add(new node_core_1.InvocationData({\n                        hash: transaction.hash,\n                        assetHash,\n                        contractHashes,\n                        deletedContractHashes,\n                        migratedContractHashes,\n                        voteUpdates,\n                        blockIndex: block.index,\n                        transactionIndex,\n                        actionIndexStart: globalActionIndexIn,\n                        actionIndexStop: globalActionIndex,\n                        result,\n                        storageChanges,\n                    })),\n                    addActionsPromise,\n                ]);\n            }\n            else {\n                await Promise.all([\n                    this.invocationData.add(new node_core_1.InvocationData({\n                        hash: transaction.hash,\n                        assetHash: undefined,\n                        contractHashes: [],\n                        deletedContractHashes: [],\n                        migratedContractHashes: [],\n                        voteUpdates: [],\n                        blockIndex: block.index,\n                        transactionIndex,\n                        actionIndexStart: globalActionIndexIn,\n                        actionIndexStop: globalActionIndex,\n                        result,\n                        storageChanges: [],\n                    })),\n                    addActionsPromise,\n                ]);\n            }\n        }\n        return globalActionIndex;\n    }\n    async processStateTransaction(validatorChanges, validatorsCountChanges) {\n        const validatorsCount = await this.validatorsCount.tryGet();\n        const validatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n        for (const [index, value] of validatorsCountChanges.entries()) {\n            validatorsCountVotes[index] = value;\n        }\n        await Promise.all([\n            Promise.all(Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n                const publicKey = client_common_1.common.hexToECPoint(publicKeyHex);\n                const validator = await this.validator.tryGet({ publicKey });\n                if (validator === undefined) {\n                    await this.validator.add(new node_core_1.Validator({\n                        publicKey,\n                        registered,\n                        votes,\n                    }));\n                }\n                else if (((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n                    ((votes !== undefined && votes.eq(client_common_1.utils.ZERO)) || (votes === undefined && validator.votes.eq(client_common_1.utils.ZERO)))) {\n                    await this.validator.delete({ publicKey: validator.publicKey });\n                }\n                else {\n                    await this.validator.update(validator, { votes, registered });\n                }\n            })),\n            validatorsCount === undefined\n                ? this.validatorsCount.add(new node_core_1.ValidatorsCount({\n                    votes: validatorsCountVotes,\n                }))\n                : (async () => {\n                    await this.validatorsCount.update(validatorsCount, {\n                        votes: validatorsCountVotes,\n                    });\n                })(),\n        ]);\n    }\n    async updateAccounts(inputs, claims, outputs, accountChanges = {}) {\n        const [inputOutputs, claimOutputs] = await Promise.all([\n            this.getInputOutputs(inputs),\n            this.getInputOutputs(claims),\n        ]);\n        const addressValues = Object.entries(lodash_1.default.groupBy(inputOutputs\n            .map(({ output }) => [output.address, output.asset, output.value.neg()])\n            .concat(outputs.map(({ output }) => [output.address, output.asset, output.value])), ([address]) => client_common_1.common.uInt160ToHex(address)));\n        const addressSpent = this.groupByAddress(inputOutputs);\n        const addressClaimed = lodash_1.default.mapValues(this.groupByAddress(claimOutputs), (values) => values.map(({ input }) => input));\n        const addressOutputs = lodash_1.default.groupBy(outputs, (output) => client_common_1.common.uInt160ToHex(output.output.address));\n        await Promise.all(addressValues.map(async ([address, values]) => {\n            const spent = addressSpent[address];\n            const claimed = addressClaimed[address];\n            const outs = addressOutputs[address];\n            const changes = accountChanges[address];\n            await this.updateAccount(client_common_1.common.hexToUInt160(address), values.map(([_address, asset, value]) => [asset, value]), spent === undefined ? [] : spent, claimed === undefined ? [] : claimed, outs === undefined ? [] : outs, changes === undefined ? [] : changes);\n        }));\n    }\n    getOutputWithInput(transaction) {\n        return transaction.outputs.map((output, index) => ({\n            output,\n            input: new node_core_1.Input({ hash: transaction.hash, index }),\n        }));\n    }\n    async getInputOutputs(inputs) {\n        return Promise.all(inputs.map(async (input) => {\n            const output = await this.output.get(input);\n            return { input, output };\n        }));\n    }\n    groupByAddress(inputOutputs) {\n        return lodash_1.default.groupBy(inputOutputs, ({ output }) => client_common_1.common.uInt160ToHex(output.address));\n    }\n    async updateAccount(address, values, spent, claimed, outputs, votes) {\n        const account = await this.account.tryGet({ hash: address });\n        const balances = values.reduce((acc, [asset, value]) => {\n            const key = client_common_1.common.uInt256ToHex(asset);\n            if (acc[key] === undefined) {\n                acc[key] = client_common_1.utils.ZERO;\n            }\n            acc[key] = acc[key].add(value);\n            return acc;\n        }, account === undefined\n            ? {}\n            : Object.entries(account.balances).reduce((acc, [key, value]) => {\n                if (value === undefined) {\n                    return Object.assign(Object.assign({}, acc), { [key]: client_common_1.utils.ZERO });\n                }\n                return Object.assign(Object.assign({}, acc), { [key]: value });\n            }, {}));\n        const promises = [];\n        promises.push(...spent.map(async ({ input }) => this.accountUnspent.delete({\n            hash: address,\n            input,\n        })));\n        promises.push(...outputs.map(async ({ input }) => this.accountUnspent.add(new node_core_1.AccountUnspent({ hash: address, input }))));\n        promises.push(...claimed.map(async (input) => this.accountUnclaimed.delete({\n            hash: address,\n            input,\n        })));\n        promises.push(...spent\n            .filter(({ output }) => client_common_1.common.uInt256Equal(output.asset, this.settings.governingToken.hash))\n            .map(async ({ input }) => this.accountUnclaimed.add(new node_core_1.AccountUnclaimed({ hash: address, input }))));\n        if (account === undefined) {\n            promises.push(this.account.add(new node_core_1.Account({\n                hash: address,\n                balances,\n                votes,\n            })));\n        }\n        else {\n            promises.push(this.account.update(account, { balances, votes }).then(async (newAccount) => {\n                if (newAccount.isDeletable()) {\n                    await this.account.delete({ hash: address });\n                }\n            }));\n        }\n        await Promise.all(promises);\n    }\n    async updateCoins(inputs, claims, block) {\n        const inputClaims = inputs\n            .map((input) => ({ type: 'input', input, hash: input.hash }))\n            .concat(claims.map((input) => ({ type: 'claim', input, hash: input.hash })));\n        const hashInputClaims = Object.entries(lodash_1.default.groupBy(inputClaims, ({ hash }) => client_common_1.common.uInt256ToHex(hash)));\n        await Promise.all(hashInputClaims.map(async ([hash, values]) => this.updateCoin(client_common_1.common.hexToUInt256(hash), values, block)));\n    }\n    async updateCoin(hash, inputClaims, block) {\n        const spentCoins = await this.transactionData.get({ hash });\n        const endHeights = Object.assign({}, spentCoins.endHeights);\n        const claimed = Object.assign({}, spentCoins.claimed);\n        for (const inputClaim of inputClaims) {\n            if (inputClaim.type === 'input') {\n                endHeights[inputClaim.input.index] = block.index;\n            }\n            else {\n                claimed[inputClaim.input.index] = true;\n            }\n        }\n        await this.transactionData.update(spentCoins, {\n            endHeights,\n            claimed,\n        });\n    }\n}\nexports.WriteBatchBlockchain = WriteBatchBlockchain;\n\n//# sourceMappingURL=WriteBatchBlockchain.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadAddUpdateMetadataStorageCache = exports.BaseReadMetadataStorageCache = exports.OutputStorageCache = exports.BlockLikeStorageCache = exports.ReadAllAddStorageCache = exports.ReadAllAddUpdateDeleteStorageCache = exports.ReadGetAllAddStorageCache = exports.ReadGetAllAddUpdateDeleteStorageCache = exports.ReadGetAllAddDeleteStorageCache = exports.ReadAddStorageCache = exports.ReadAddDeleteStorageCache = exports.ReadAddUpdateStorageCache = exports.ReadAddUpdateDeleteStorageCache = exports.BaseReadStorageCache = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nfunction createGet({ tryGetTracked, readStorage, }) {\n    return async (key) => {\n        const trackedChange = tryGetTracked(key);\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                throw new Error('Not found');\n            }\n            return trackedChange.value;\n        }\n        return readStorage().get(key);\n    };\n}\nfunction createTryGet({ tryGetTracked, readStorage, }) {\n    return async (key) => {\n        const trackedChange = tryGetTracked(key);\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                return undefined;\n            }\n            return trackedChange.value;\n        }\n        return readStorage().tryGet(key);\n    };\n}\nclass BaseReadStorageCache {\n    constructor(options) {\n        this.readStorage = options.readStorage;\n        this.name = options.name;\n        this.createAddChange = options.createAddChange;\n        this.createDeleteChange = options.createDeleteChange;\n        this.onAdd = options.onAdd;\n        this.mutableValues = {};\n        this.get = createGet({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGet = createTryGet({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGetValue = (key) => this.readStorage().tryGet(key);\n    }\n    getChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        return Object.values(this.mutableValues).map((value) => {\n            if (value.type === 'delete') {\n                if (createDeleteChange === undefined) {\n                    throw new Error('Invalid delete');\n                }\n                return { type: 'delete', change: createDeleteChange(value.key) };\n            }\n            return { type: 'add', change: this.createAddChange(value.addValue), subType: value.subType };\n        });\n    }\n    getTrackedChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        return Object.entries(this.mutableValues).map(([key, value]) => {\n            if (value.type === 'delete') {\n                if (createDeleteChange === undefined) {\n                    throw new Error('Invalid delete');\n                }\n                return { type: createDeleteChange(value.key).type, key, value };\n            }\n            return { type: this.createAddChange(value.addValue).type, key, value };\n        });\n    }\n    tryGetTracked(_key) {\n        throw new Error('Not Implemented');\n    }\n}\nexports.BaseReadStorageCache = BaseReadStorageCache;\nclass ReadStorageCache extends BaseReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.getKeyString = options.getKeyString;\n    }\n    tryGetTracked(key) {\n        return this.mutableValues[this.getKeyString(key)];\n    }\n    addTrackedChange(key, value) {\n        this.mutableValues[key] = value;\n    }\n}\nclass ReadAllStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: () => ({\n                get: options.readAllStorage().get,\n                tryGet: options.readAllStorage().tryGet,\n            }),\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.readAllStorage = options.readAllStorage;\n        this.getKeyFromValue = options.getKeyFromValue;\n        this.all$ = rxjs_1.concat(rxjs_1.defer(() => this.readAllStorage().all$.pipe(operators_1.concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n            if (trackedChange !== undefined) {\n                return rxjs_1.EMPTY;\n            }\n            return rxjs_1.of(value);\n        }))), rxjs_1.defer(() => rxjs_1.of(...Object.values(this.mutableValues)\n            .map((value) => (value.type === 'add' ? value.value : undefined))\n            .filter(utils_1.utils.notNull))));\n    }\n}\nclass ReadGetAllStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: () => ({\n                get: options.readGetAllStorage().get,\n                tryGet: options.readGetAllStorage().tryGet,\n            }),\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.readGetAllStorage = options.readGetAllStorage;\n        this.getKeyFromValue = options.getKeyFromValue;\n        this.matchesPartialKey = options.matchesPartialKey;\n        this.getAll$ = (key) => rxjs_1.concat(rxjs_1.defer(() => this.readGetAllStorage()\n            .getAll$(key)\n            .pipe(operators_1.concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n            if (trackedChange !== undefined) {\n                return rxjs_1.EMPTY;\n            }\n            return rxjs_1.of(value);\n        }))), rxjs_1.defer(() => rxjs_1.of(...Object.values(this.mutableValues)\n            .map((value) => value.type === 'add' && this.matchesPartialKey(value.value, key) ? value.value : undefined)\n            .filter(utils_1.utils.notNull))));\n    }\n}\nfunction createAdd({ cache, getKeyFromValue, getKeyString, allowDupes, }) {\n    return async (value) => {\n        const key = getKeyFromValue(value);\n        if (!allowDupes) {\n            const currentValue = await cache.tryGet(key);\n            if (currentValue !== undefined) {\n                throw new Error(`Attempted to add an already existing object for key ` + `${cache.name}:${getKeyString(key)}.`);\n            }\n        }\n        if (cache.onAdd !== undefined) {\n            await cache.onAdd(value);\n        }\n        const trackedChange = cache.tryGetTracked(key);\n        cache.mutableValues[cache.getKeyString(key)] = {\n            type: 'add',\n            addValue: value,\n            value,\n            subType: trackedChange === undefined ? 'add' : 'update',\n        };\n    };\n}\nfunction createUpdate({ cache, update: updateFunc, getKeyFromValue, }) {\n    return async (value, update) => {\n        const key = getKeyFromValue(value);\n        const updatedValue = updateFunc(value, update);\n        const trackedChange = cache.tryGetTracked(key);\n        cache.mutableValues[cache.getKeyString(key)] = {\n            type: 'add',\n            addValue: updatedValue,\n            value: updatedValue,\n            subType: trackedChange === undefined || trackedChange.type === 'delete' || trackedChange.subType === 'update'\n                ? 'update'\n                : 'add',\n        };\n        return updatedValue;\n    };\n}\nfunction createDelete({ cache }) {\n    return async (key) => {\n        const currentValue = await cache.tryGetValue(key);\n        if (currentValue === undefined) {\n            delete cache.mutableValues[cache.getKeyString(key)];\n        }\n        else {\n            cache.mutableValues[cache.getKeyString(key)] = { type: 'delete', key };\n        }\n    };\n}\nclass ReadAddUpdateDeleteStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAddUpdateDeleteStorageCache = ReadAddUpdateDeleteStorageCache;\nclass ReadAddUpdateStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n            allowDupes: options.allowDupes,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n    }\n}\nexports.ReadAddUpdateStorageCache = ReadAddUpdateStorageCache;\nclass ReadAddDeleteStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAddDeleteStorageCache = ReadAddDeleteStorageCache;\nclass ReadAddStorageCache extends ReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n            allowDupes: options.allowDupes,\n        });\n    }\n}\nexports.ReadAddStorageCache = ReadAddStorageCache;\nclass ReadGetAllAddDeleteStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadGetAllAddDeleteStorageCache = ReadGetAllAddDeleteStorageCache;\nclass ReadGetAllAddUpdateDeleteStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadGetAllAddUpdateDeleteStorageCache = ReadGetAllAddUpdateDeleteStorageCache;\nclass ReadGetAllAddStorageCache extends ReadGetAllStorageCache {\n    constructor(options) {\n        super({\n            readGetAllStorage: options.readGetAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n            matchesPartialKey: options.matchesPartialKey,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n    }\n}\nexports.ReadGetAllAddStorageCache = ReadGetAllAddStorageCache;\nclass ReadAllAddUpdateDeleteStorageCache extends ReadAllStorageCache {\n    constructor(options) {\n        super({\n            readAllStorage: options.readAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n        this.update = createUpdate({\n            cache: this,\n            update: options.update,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.delete = createDelete({ cache: this });\n    }\n}\nexports.ReadAllAddUpdateDeleteStorageCache = ReadAllAddUpdateDeleteStorageCache;\nclass ReadAllAddStorageCache extends ReadAllStorageCache {\n    constructor(options) {\n        super({\n            readAllStorage: options.readAllStorage,\n            name: options.name,\n            getKeyString: options.getKeyString,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n            getKeyFromValue: options.getKeyFromValue,\n        });\n        this.add = createAdd({\n            cache: this,\n            getKeyFromValue: options.getKeyFromValue,\n            getKeyString: options.getKeyString,\n        });\n    }\n}\nexports.ReadAllAddStorageCache = ReadAllAddStorageCache;\nclass BlockLikeStorageCache extends BaseReadStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n        });\n        this.mutableIndexValues = {};\n    }\n    async add(value) {\n        const currentValue = await this.tryGet({ hashOrIndex: value.index });\n        if (currentValue !== undefined) {\n            throw new Error('Attempted to add an already existing object.');\n        }\n        const addValue = { type: 'add', addValue: value, value, subType: 'add' };\n        this.mutableValues[client_common_1.common.uInt256ToString(value.hash)] = addValue;\n        this.mutableIndexValues[`${value.index}`] = addValue;\n    }\n    tryGetTracked(key) {\n        if (typeof key.hashOrIndex !== 'number') {\n            return this.mutableValues[client_common_1.common.uInt256ToString(key.hashOrIndex)];\n        }\n        return this.mutableIndexValues[`${key.hashOrIndex}`];\n    }\n    addTrackedChange(key, value) {\n        this.mutableValues[key] = value;\n    }\n}\nexports.BlockLikeStorageCache = BlockLikeStorageCache;\nconst getOutputValueKeyString = (key) => `${client_common_1.common.uInt256ToHex(key.hash)}:${key.index}`;\nclass OutputStorageCache extends ReadStorageCache {\n    constructor(readStorage) {\n        super({\n            readStorage,\n            name: 'output',\n            getKeyString: getOutputValueKeyString,\n            createAddChange: (value) => ({ type: 'output', value }),\n        });\n        this.add = async (value) => {\n            const key = { hash: value.hash, index: value.index };\n            const currentValue = await this.tryGet(key);\n            if (currentValue !== undefined) {\n                throw new Error(`Attempted to add an already existing object for key ` + `${this.name}:${this.getKeyString(key)}.`);\n            }\n            this.mutableValues[this.getKeyString(key)] = {\n                type: 'add',\n                addValue: value,\n                value: value.output,\n                subType: 'add',\n            };\n        };\n    }\n}\nexports.OutputStorageCache = OutputStorageCache;\nfunction createGetMetadata({ tryGetTracked, readStorage, }) {\n    return async () => {\n        const trackedChange = tryGetTracked();\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                throw new Error('Not found');\n            }\n            return trackedChange.value;\n        }\n        return readStorage().get();\n    };\n}\nfunction createTryGetMetadata({ tryGetTracked, readStorage, }) {\n    return async () => {\n        const trackedChange = tryGetTracked();\n        if (trackedChange !== undefined) {\n            if (trackedChange.type === 'delete') {\n                return undefined;\n            }\n            return trackedChange.value;\n        }\n        return readStorage().tryGet();\n    };\n}\nclass BaseReadMetadataStorageCache {\n    constructor(options) {\n        this.readStorage = options.readStorage;\n        this.name = options.name;\n        this.createAddChange = options.createAddChange;\n        this.createDeleteChange = options.createDeleteChange;\n        this.onAdd = options.onAdd;\n        this.get = createGetMetadata({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n        this.tryGet = createTryGetMetadata({\n            readStorage: this.readStorage,\n            tryGetTracked: this.tryGetTracked.bind(this),\n        });\n    }\n    getChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        const value = this.mutableValue;\n        if (value === undefined) {\n            return [];\n        }\n        if (value.type === 'delete') {\n            if (createDeleteChange === undefined) {\n                throw new Error('Invalid delete');\n            }\n            return [{ type: 'delete', change: createDeleteChange() }];\n        }\n        return [{ type: 'add', change: this.createAddChange(value.addValue), subType: value.subType }];\n    }\n    getTrackedChangeSet() {\n        const createDeleteChange = this.createDeleteChange;\n        const value = this.mutableValue;\n        if (value === undefined) {\n            return [];\n        }\n        if (value.type === 'delete') {\n            if (createDeleteChange === undefined) {\n                throw new Error('Invalid delete');\n            }\n            return [{ type: createDeleteChange().type, key: 'metadata', value: Object.assign(Object.assign({}, value), { key: 'metadata' }) }];\n        }\n        return [{ type: this.createAddChange(value.addValue).type, key: 'metadata', value }];\n    }\n    tryGetTracked() {\n        return this.mutableValue;\n    }\n    addTrackedChange(_key, value) {\n        this.mutableValue = value;\n    }\n}\nexports.BaseReadMetadataStorageCache = BaseReadMetadataStorageCache;\nclass ReadMetadataStorageCache extends BaseReadMetadataStorageCache {\n}\nfunction createAddMetadata({ cache, }) {\n    return async (value) => {\n        if (cache.onAdd !== undefined) {\n            await cache.onAdd(value);\n        }\n        cache.mutableValue = {\n            type: 'add',\n            addValue: value,\n            value,\n            subType: 'add',\n        };\n    };\n}\nfunction createUpdateMetadata({ cache, update: updateFunc, }) {\n    return async (value, update) => {\n        const updatedValue = updateFunc(value, update);\n        cache.mutableValue = {\n            type: 'add',\n            addValue: updatedValue,\n            value: updatedValue,\n            subType: 'update',\n        };\n        return updatedValue;\n    };\n}\nclass ReadAddUpdateMetadataStorageCache extends ReadMetadataStorageCache {\n    constructor(options) {\n        super({\n            readStorage: options.readStorage,\n            name: options.name,\n            createAddChange: options.createAddChange,\n            createDeleteChange: options.createDeleteChange,\n            onAdd: options.onAdd,\n        });\n        this.add = createAddMetadata({\n            cache: this,\n        });\n        this.update = createUpdateMetadata({\n            cache: this,\n            update: options.update,\n        });\n    }\n}\nexports.ReadAddUpdateMetadataStorageCache = ReadAddUpdateMetadataStorageCache;\n\n//# sourceMappingURL=StorageCache.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"./Node\");\nObject.defineProperty(exports, \"Node\", { enumerable: true, get: function () { return Node_1.Node; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Node = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_consensus_1 = require(\"@neo-one/node-consensus\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bloem_1 = require(\"bloem\");\nconst bloom_filter_1 = tslib_1.__importDefault(require(\"bloom-filter\"));\nconst cross_fetch_1 = tslib_1.__importDefault(require(\"cross-fetch\"));\nconst ip_address_1 = require(\"ip-address\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst lru_cache_1 = tslib_1.__importDefault(require(\"lru-cache\"));\nconst Command_1 = require(\"./Command\");\nconst errors_1 = require(\"./errors\");\nconst Message_1 = require(\"./Message\");\nconst payload_1 = require(\"./payload\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'node-protocol' });\nconst createPeerBloomFilter = ({ filter, k, tweak, }) => new bloom_filter_1.default({\n    vData: Buffer.from(filter),\n    nHashFuncs: k,\n    nTweak: tweak,\n});\nconst createScalingBloomFilter = () => new bloem_1.ScalingBloem(0.05, {\n    initial_capacity: 100000,\n    scaling: 4,\n});\nconst compareTransactionAndFees = (val1, val2) => {\n    const a = val1.networkFee.divn(val1.transaction.size);\n    const b = val2.networkFee.divn(val2.transaction.size);\n    if (a.lt(b)) {\n        return -1;\n    }\n    if (b.lt(a)) {\n        return 1;\n    }\n    return val1.transaction.hash.compare(val2.transaction.hash);\n};\nconst MEM_POOL_SIZE = 5000;\nconst GET_ADDR_PEER_COUNT = 200;\nconst GET_BLOCKS_COUNT = 500;\nconst GET_BLOCKS_BUFFER = GET_BLOCKS_COUNT / 3;\nconst GET_BLOCKS_TIME_MS = 10000;\nconst GET_BLOCKS_THROTTLE_MS = 1000;\nconst TRIM_MEMPOOL_THROTTLE = 5000;\nconst GET_BLOCKS_CLOSE_COUNT = 2;\nconst UNHEALTHY_PEER_SECONDS = 300;\nconst LOCAL_HOST_ADDRESSES = new Set(['', '0.0.0.0', 'localhost', '127.0.0.1', '::', '::1']);\nclass Node {\n    constructor({ blockchain, createNetwork, options, }) {\n        this.mutableUnhealthyPeerSeconds = UNHEALTHY_PEER_SECONDS;\n        this.requestBlocks = lodash_1.default.debounce(() => {\n            const peer = this.mutableBestPeer;\n            const previousBlock = this.blockchain.previousBlock;\n            const block = previousBlock === undefined ? this.blockchain.currentBlock : previousBlock;\n            if (peer !== undefined && block.index < peer.data.startHeight) {\n                if (this.mutableGetBlocksRequestsCount > GET_BLOCKS_CLOSE_COUNT) {\n                    this.mutableBestPeer = this.findBestPeer(peer);\n                    this.network.blacklistAndClose(peer);\n                    this.mutableGetBlocksRequestsCount = 0;\n                }\n                else if (this.shouldRequestBlocks()) {\n                    if (this.mutableGetBlocksRequestsIndex === block.index) {\n                        this.mutableGetBlocksRequestsCount += 1;\n                    }\n                    else {\n                        this.mutableGetBlocksRequestsCount = 1;\n                        this.mutableGetBlocksRequestsIndex = block.index;\n                    }\n                    this.mutableGetBlocksRequestTime = Date.now();\n                    this.sendMessage(peer, this.createMessage({\n                        command: Command_1.Command.getblocks,\n                        payload: new payload_1.GetBlocksPayload({\n                            hashStart: [block.hash],\n                        }),\n                    }));\n                }\n                this.requestBlocks();\n            }\n        }, GET_BLOCKS_THROTTLE_MS);\n        this.onRequestEndpoints = lodash_1.default.throttle(() => {\n            this.relay(this.createMessage({ command: Command_1.Command.getaddr }));\n            this.fetchEndpointsFromRPC();\n        }, 5000);\n        this.trimMemPool = lodash_1.default.throttle(async () => {\n            const memPool = Object.values(this.mutableMemPool);\n            if (memPool.length > MEM_POOL_SIZE) {\n                const transactionAndFees = await Promise.all(memPool.map(async (transaction) => {\n                    const networkFee = await transaction.getNetworkFee({\n                        getOutput: this.blockchain.output.get,\n                        governingToken: this.blockchain.settings.governingToken,\n                        utilityToken: this.blockchain.settings.utilityToken,\n                        fees: this.blockchain.settings.fees,\n                        registerValidatorFee: this.blockchain.settings.registerValidatorFee,\n                    });\n                    return { transaction, networkFee };\n                }));\n                const hashesToRemove = lodash_1.default.take(transactionAndFees.slice().sort(compareTransactionAndFees), this.blockchain.settings.memPoolSize).map((transactionAndFee) => transactionAndFee.transaction.hashHex);\n                hashesToRemove.forEach((hash) => {\n                    delete this.mutableMemPool[hash];\n                });\n            }\n        }, TRIM_MEMPOOL_THROTTLE);\n        this.negotiate = async (peer) => {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.version,\n                payload: new payload_1.VersionPayload({\n                    protocolVersion: 0,\n                    services: payload_1.SERVICES.NODE_NETWORK,\n                    timestamp: Math.round(Date.now() / 1000),\n                    port: this.externalPort,\n                    nonce: this.nonce,\n                    userAgent: this.userAgent,\n                    startHeight: this.blockchain.currentBlockIndex,\n                    relay: true,\n                }),\n            }));\n            const message = await peer.receiveMessage(30000);\n            let versionPayload;\n            if (message.value.command === Command_1.Command.version) {\n                versionPayload = message.value.payload;\n            }\n            else {\n                throw new errors_1.NegotiationError(message);\n            }\n            this.checkVersion(peer, message, versionPayload);\n            const { host } = node_core_1.getEndpointConfig(peer.endpoint);\n            let address;\n            if (payload_1.NetworkAddress.isValid(host)) {\n                address = new payload_1.NetworkAddress({\n                    host,\n                    port: versionPayload.port,\n                    timestamp: versionPayload.timestamp,\n                    services: versionPayload.services,\n                });\n            }\n            this.sendMessage(peer, this.createMessage({ command: Command_1.Command.verack }));\n            const nextMessage = await peer.receiveMessage(30000);\n            if (nextMessage.value.command !== Command_1.Command.verack) {\n                throw new errors_1.NegotiationError(nextMessage);\n            }\n            return {\n                data: {\n                    nonce: versionPayload.nonce,\n                    startHeight: versionPayload.startHeight,\n                    mutableBloomFilter: undefined,\n                    address,\n                },\n                relay: versionPayload.relay,\n            };\n        };\n        this.checkPeerHealth = (peer, prevHealth) => {\n            const checkTimeSeconds = utils_1.utils.nowSeconds();\n            const blockIndex = this.mutableBlockIndex[peer.endpoint];\n            if (prevHealth === undefined) {\n                return { healthy: true, checkTimeSeconds, blockIndex };\n            }\n            if (prevHealth.blockIndex !== undefined && blockIndex !== undefined && prevHealth.blockIndex < blockIndex) {\n                return { healthy: true, checkTimeSeconds, blockIndex };\n            }\n            if (prevHealth.blockIndex === blockIndex &&\n                utils_1.utils.nowSeconds() - prevHealth.checkTimeSeconds < this.mutableUnhealthyPeerSeconds) {\n                return {\n                    healthy: true,\n                    checkTimeSeconds: prevHealth.checkTimeSeconds,\n                    blockIndex: prevHealth.blockIndex,\n                };\n            }\n            return { healthy: false, checkTimeSeconds, blockIndex };\n        };\n        this.onEvent = (event) => {\n            if (event.event === 'PEER_CONNECT_SUCCESS') {\n                const { connectedPeer } = event;\n                if (this.mutableBestPeer === undefined ||\n                    this.mutableBestPeer.data.startHeight + 100 < connectedPeer.data.startHeight) {\n                    this.mutableBestPeer = connectedPeer;\n                    this.resetRequestBlocks();\n                    this.requestBlocks();\n                }\n            }\n            else if (event.event === 'PEER_CLOSED' &&\n                this.mutableBestPeer !== undefined &&\n                this.mutableBestPeer.endpoint === event.peer.endpoint) {\n                this.mutableBestPeer = this.findBestPeer();\n                this.resetRequestBlocks();\n                this.requestBlocks();\n            }\n        };\n        this.blockchain = blockchain;\n        this.network = createNetwork({\n            negotiate: this.negotiate,\n            checkPeerHealth: this.checkPeerHealth,\n            createMessageTransform: () => new Message_1.MessageTransform(this.blockchain.deserializeWireContext),\n            onMessageReceived: (peer, message) => {\n                this.onMessageReceived(peer, message);\n            },\n            onRequestEndpoints: this.onRequestEndpoints.bind(this),\n            onEvent: this.onEvent,\n        });\n        this.options = options;\n        const { externalPort = 0 } = options;\n        this.externalPort = externalPort;\n        this.nonce = Math.floor(Math.random() * client_common_1.utils.UINT_MAX_NUMBER);\n        this.userAgent = `NEO:neo-one-js:1.0.0-preview`;\n        this.mutableMemPool = {};\n        this.mutableKnownBlockHashes = createScalingBloomFilter();\n        this.tempKnownBlockHashes = new Set();\n        this.mutableKnownTransactionHashes = createScalingBloomFilter();\n        this.tempKnownTransactionHashes = new Set();\n        this.mutableKnownHeaderHashes = createScalingBloomFilter();\n        this.tempKnownHeaderHashes = new Set();\n        this.mutableGetBlocksRequestsCount = 1;\n        this.consensusCache = new lru_cache_1.default(10000);\n        this.mutableBlockIndex = {};\n    }\n    get consensus() {\n        return this.mutableConsensus;\n    }\n    get connectedPeers() {\n        return this.network.connectedPeers.map((peer) => peer.endpoint);\n    }\n    get memPool() {\n        return this.mutableMemPool;\n    }\n    async reset() {\n        this.mutableMemPool = {};\n        this.mutableKnownBlockHashes = createScalingBloomFilter();\n        this.tempKnownBlockHashes.clear();\n        this.mutableKnownTransactionHashes = createScalingBloomFilter();\n        this.tempKnownTransactionHashes.clear();\n        this.mutableKnownHeaderHashes = createScalingBloomFilter();\n        this.tempKnownHeaderHashes.clear();\n        this.mutableGetBlocksRequestsCount = 1;\n        this.consensusCache.reset();\n        this.mutableBlockIndex = {};\n    }\n    async start() {\n        let disposable = utils_1.noopDisposable;\n        try {\n            this.network.start();\n            logger.debug({ name: 'neo_protocol_start' }, 'Protocol started.');\n            disposable = utils_1.composeDisposables(disposable, () => {\n                this.network.stop();\n                logger.debug({ name: 'neo_protocol_stop' }, 'Protocol stopped.');\n            });\n            if (this.options.consensus !== undefined) {\n                const mutableConsensus = new node_consensus_1.Consensus({\n                    options: this.options.consensus,\n                    node: this,\n                });\n                this.mutableConsensus = mutableConsensus;\n                const consensusDisposable = await mutableConsensus.start();\n                disposable = utils_1.composeDisposables(disposable, consensusDisposable);\n            }\n            this.mutableUnhealthyPeerSeconds =\n                this.options.unhealthyPeerSeconds === undefined ? UNHEALTHY_PEER_SECONDS : this.options.unhealthyPeerSeconds;\n            return disposable;\n        }\n        catch (err) {\n            await disposable();\n            throw err;\n        }\n    }\n    async relayTransaction(transaction, { throwVerifyError = false, forceAdd = false, } = {\n        throwVerifyError: false,\n        forceAdd: false,\n    }) {\n        const result = {};\n        if (transaction.type === node_core_1.TransactionType.Miner ||\n            this.mutableMemPool[transaction.hashHex] !== undefined ||\n            this.tempKnownTransactionHashes.has(transaction.hashHex)) {\n            return result;\n        }\n        if (!this.mutableKnownTransactionHashes.has(transaction.hash)) {\n            this.tempKnownTransactionHashes.add(transaction.hashHex);\n            try {\n                const memPool = Object.values(this.mutableMemPool);\n                if (memPool.length > MEM_POOL_SIZE / 2 && !forceAdd) {\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                    return result;\n                }\n                let logLabels = { [utils_1.Labels.NEO_TRANSACTION_HASH]: transaction.hashHex };\n                let finalResult;\n                try {\n                    let foundTransaction;\n                    try {\n                        foundTransaction = await this.blockchain.transaction.tryGet({\n                            hash: transaction.hash,\n                        });\n                    }\n                    finally {\n                        logLabels = Object.assign({ [utils_1.Labels.NEO_TRANSACTION_FOUND]: foundTransaction !== undefined }, logLabels);\n                    }\n                    let verifyResult;\n                    if (foundTransaction === undefined) {\n                        verifyResult = await this.blockchain.verifyTransaction({\n                            transaction,\n                            memPool: Object.values(this.mutableMemPool),\n                        });\n                        const verified = verifyResult.verifications.every(({ failureMessage }) => failureMessage === undefined);\n                        if (verified) {\n                            this.mutableMemPool[transaction.hashHex] = transaction;\n                            if (this.mutableConsensus !== undefined) {\n                                this.mutableConsensus.onTransactionReceived(transaction);\n                            }\n                            this.relayTransactionInternal(transaction);\n                            await this.trimMemPool();\n                        }\n                    }\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                    finalResult = { verifyResult };\n                    logger.debug(Object.assign({ name: 'neo_relay_transaction' }, logLabels));\n                }\n                catch (err) {\n                    logger.error(Object.assign({ name: 'neo_relay_transaction', err }, logLabels));\n                    throw err;\n                }\n                return finalResult;\n            }\n            catch (error) {\n                if (error.code === undefined ||\n                    typeof error.code !== 'string' ||\n                    !error.code.includes('VERIFY') ||\n                    throwVerifyError) {\n                    throw error;\n                }\n            }\n            finally {\n                this.tempKnownTransactionHashes.delete(transaction.hashHex);\n            }\n        }\n        return result;\n    }\n    async relayBlock(block) {\n        await this.persistBlock(block);\n    }\n    relayConsensusPayload(payload) {\n        const message = this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Consensus,\n                hashes: [payload.hash],\n            }),\n        });\n        this.consensusCache.set(payload.hashHex, payload);\n        this.relay(message);\n    }\n    syncMemPool() {\n        this.relay(this.createMessage({ command: Command_1.Command.mempool }));\n    }\n    relay(message) {\n        this.network.relay(message.serializeWire());\n    }\n    relayTransactionInternal(transaction) {\n        const message = this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Transaction,\n                hashes: [transaction.hash],\n            }),\n        });\n        const messagePayload = message.serializeWire();\n        this.network.connectedPeers.forEach((peer) => {\n            if (peer.relay && this.testFilter(peer.data.mutableBloomFilter, transaction)) {\n                peer.write(messagePayload);\n            }\n        });\n    }\n    sendMessage(peer, message) {\n        peer.write(message.serializeWire());\n    }\n    findBestPeer(bestPeer) {\n        let peers = this.network.connectedPeers;\n        if (bestPeer !== undefined) {\n            peers = peers.filter((peer) => peer.endpoint !== bestPeer.endpoint);\n        }\n        const result = lodash_1.default.maxBy(peers, (peer) => peer.data.startHeight);\n        if (result === undefined) {\n            return undefined;\n        }\n        return lodash_1.default.shuffle(peers.filter((peer) => peer.data.startHeight === result.data.startHeight))[0];\n    }\n    resetRequestBlocks() {\n        this.mutableGetBlocksRequestsIndex = undefined;\n        this.mutableGetBlocksRequestsCount = 0;\n    }\n    shouldRequestBlocks() {\n        const block = this.blockchain.currentBlock;\n        const getBlocksRequestTime = this.mutableGetBlocksRequestTime;\n        return (this.mutableGetBlocksRequestsIndex === undefined ||\n            block.index - this.mutableGetBlocksRequestsIndex > GET_BLOCKS_BUFFER ||\n            getBlocksRequestTime === undefined ||\n            Date.now() - getBlocksRequestTime > GET_BLOCKS_TIME_MS);\n    }\n    checkVersion(peer, message, version) {\n        if (version.nonce === this.nonce) {\n            this.network.permanentlyBlacklist(peer.endpoint);\n            throw new errors_1.NegotiationError(message, 'Nonce equals my nonce.');\n        }\n        const connectedPeer = this.network.connectedPeers.find((otherPeer) => version.nonce === otherPeer.data.nonce);\n        if (connectedPeer !== undefined) {\n            throw new errors_1.AlreadyConnectedError('Already connected to nonce.');\n        }\n    }\n    ready() {\n        const peer = this.mutableBestPeer;\n        const block = this.blockchain.currentBlock;\n        return peer !== undefined && block.index >= peer.data.startHeight;\n    }\n    async fetchEndpointsFromRPC() {\n        try {\n            await this.doFetchEndpointsFromRPC();\n        }\n        catch (_a) {\n        }\n    }\n    async doFetchEndpointsFromRPC() {\n        const { rpcURLs = [] } = this.options;\n        await Promise.all(rpcURLs.map(async (rpcURL) => this.fetchEndpointsFromRPCURL(rpcURL)));\n    }\n    async fetchEndpointsFromRPCURL(rpcURL) {\n        try {\n            const response = await cross_fetch_1.default(rpcURL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    jsonrpc: '2.0',\n                    id: 1,\n                    method: 'getpeers',\n                    params: [],\n                }),\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch peers from ${rpcURL}: ${response.status} ${response.statusText}`);\n            }\n            const result = await response.json();\n            if (typeof result === 'object' &&\n                result.error !== undefined &&\n                typeof result.error === 'object' &&\n                typeof result.error.code === 'number' &&\n                typeof result.error.message === 'string') {\n                throw new Error(result.error);\n            }\n            const connected = result.result.connected;\n            connected\n                .map((peer) => {\n                const { address, port } = peer;\n                let canonicalForm = new ip_address_1.Address6(address).canonicalForm();\n                if (canonicalForm == undefined) {\n                    canonicalForm = ip_address_1.Address6.fromAddress4(address).canonicalForm();\n                }\n                return { host: canonicalForm == undefined ? '' : canonicalForm, port };\n            })\n                .filter((endpoint) => !LOCAL_HOST_ADDRESSES.has(endpoint.host))\n                .map((endpoint) => node_core_1.createEndpoint({\n                type: 'tcp',\n                host: endpoint.host,\n                port: endpoint.port,\n            }))\n                .forEach((endpoint) => this.network.addEndpoint(endpoint));\n        }\n        catch (err) {\n            logger.error({ name: 'neo_protocol_fetch_endpoints_error', [utils_1.Labels.HTTP_URL]: rpcURL, err }, `Failed to fetch endpoints from ${rpcURL}`);\n        }\n    }\n    onMessageReceived(peer, message) {\n        try {\n            new Promise(async (resolve) => {\n                switch (message.value.command) {\n                    case Command_1.Command.addr:\n                        this.onAddrMessageReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.block:\n                        await this.onBlockMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.consensus:\n                        await this.onConsensusMessageReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.filteradd:\n                        this.onFilterAddMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.filterclear:\n                        this.onFilterClearMessageReceived(peer);\n                        break;\n                    case Command_1.Command.filterload:\n                        this.onFilterLoadMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getaddr:\n                        this.onGetAddrMessageReceived(peer);\n                        break;\n                    case Command_1.Command.getblocks:\n                        await this.onGetBlocksMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getdata:\n                        await this.onGetDataMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.getheaders:\n                        await this.onGetHeadersMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.headers:\n                        await this.onHeadersMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.inv:\n                        this.onInvMessageReceived(peer, message.value.payload);\n                        break;\n                    case Command_1.Command.mempool:\n                        this.onMemPoolMessageReceived(peer);\n                        break;\n                    case Command_1.Command.tx:\n                        await this.onTransactionReceived(message.value.payload);\n                        break;\n                    case Command_1.Command.verack:\n                        this.onVerackMessageReceived(peer);\n                        break;\n                    case Command_1.Command.version:\n                        this.onVersionMessageReceived(peer);\n                        break;\n                    case Command_1.Command.alert:\n                        break;\n                    case Command_1.Command.merkleblock:\n                        break;\n                    case Command_1.Command.notfound:\n                        break;\n                    case Command_1.Command.ping:\n                        break;\n                    case Command_1.Command.pong:\n                        break;\n                    case Command_1.Command.reject:\n                        break;\n                    default:\n                        utils_1.utils.assertNever(message.value);\n                }\n                resolve();\n            }).catch(() => {\n            });\n        }\n        catch (_a) {\n        }\n    }\n    onAddrMessageReceived(addr) {\n        addr.addresses\n            .filter((address) => !LOCAL_HOST_ADDRESSES.has(address.host))\n            .map((address) => node_core_1.createEndpoint({\n            type: 'tcp',\n            host: address.host,\n            port: address.port,\n        }))\n            .forEach((endpoint) => this.network.addEndpoint(endpoint));\n    }\n    async onBlockMessageReceived(peer, block) {\n        const blockIndex = this.mutableBlockIndex[peer.endpoint];\n        this.mutableBlockIndex[peer.endpoint] = Math.max(block.index, blockIndex === undefined ? 0 : blockIndex);\n        await this.relayBlock(block);\n    }\n    async persistBlock(block) {\n        if (this.blockchain.currentBlockIndex > block.index || this.tempKnownBlockHashes.has(block.hashHex)) {\n            return;\n        }\n        if (!this.mutableKnownBlockHashes.has(block.hash)) {\n            this.tempKnownBlockHashes.add(block.hashHex);\n            try {\n                const foundBlock = await this.blockchain.block.tryGet({\n                    hashOrIndex: block.hash,\n                });\n                if (foundBlock === undefined) {\n                    try {\n                        await this.blockchain.persistBlock({ block });\n                        if (this.mutableConsensus !== undefined) {\n                            this.mutableConsensus.onPersistBlock();\n                        }\n                        const peer = this.mutableBestPeer;\n                        if (peer !== undefined && block.index > peer.data.startHeight) {\n                            this.relay(this.createMessage({\n                                command: Command_1.Command.inv,\n                                payload: new payload_1.InvPayload({\n                                    type: payload_1.InventoryType.Block,\n                                    hashes: [block.hash],\n                                }),\n                            }));\n                        }\n                        logger.info({ name: 'neo_relay_block', [utils_1.Labels.NEO_BLOCK_INDEX]: block.index });\n                    }\n                    catch (err) {\n                        logger.error({ name: 'neo_relay_block', [utils_1.Labels.NEO_BLOCK_INDEX]: block.index, err });\n                        throw err;\n                    }\n                }\n                this.mutableKnownBlockHashes.add(block.hash);\n                this.mutableKnownHeaderHashes.add(block.hash);\n                block.transactions.forEach((transaction) => {\n                    delete this.mutableMemPool[transaction.hashHex];\n                    this.mutableKnownTransactionHashes.add(transaction.hash);\n                });\n            }\n            finally {\n                this.tempKnownBlockHashes.delete(block.hashHex);\n            }\n        }\n    }\n    async onConsensusMessageReceived(payload) {\n        const { consensus } = this;\n        if (consensus !== undefined) {\n            await this.blockchain.verifyConsensusPayload(payload);\n            consensus.onConsensusPayloadReceived(payload);\n        }\n    }\n    onFilterAddMessageReceived(peer, filterAdd) {\n        if (peer.data.mutableBloomFilter !== undefined) {\n            peer.data.mutableBloomFilter.insert(filterAdd.data);\n        }\n    }\n    onFilterClearMessageReceived(peer) {\n        peer.data.mutableBloomFilter = undefined;\n    }\n    onFilterLoadMessageReceived(peer, filterLoad) {\n        peer.data.mutableBloomFilter = createPeerBloomFilter(filterLoad);\n    }\n    onGetAddrMessageReceived(peer) {\n        const addresses = lodash_1.default.take(lodash_1.default.shuffle(this.network.connectedPeers.map((connectedPeer) => connectedPeer.data.address).filter(utils_1.utils.notNull)), GET_ADDR_PEER_COUNT);\n        if (addresses.length > 0) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.addr,\n                payload: new payload_1.AddrPayload({ addresses }),\n            }));\n        }\n    }\n    async onGetBlocksMessageReceived(peer, getBlocks) {\n        const headers = await this.getHeaders(getBlocks, this.blockchain.currentBlockIndex);\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Block,\n                hashes: headers.map((header) => header.hash),\n            }),\n        }));\n    }\n    async onGetDataMessageReceived(peer, getData) {\n        switch (getData.type) {\n            case payload_1.InventoryType.Transaction:\n                await Promise.all(getData.hashes.map(async (hash) => {\n                    let transaction = this.mutableMemPool[client_common_1.common.uInt256ToHex(hash)];\n                    if (transaction === undefined) {\n                        transaction = await this.blockchain.transaction.tryGet({ hash });\n                    }\n                    if (transaction !== undefined) {\n                        this.sendMessage(peer, this.createMessage({\n                            command: Command_1.Command.tx,\n                            payload: transaction,\n                        }));\n                    }\n                }));\n                break;\n            case payload_1.InventoryType.Block:\n                await Promise.all(getData.hashes.map(async (hash) => {\n                    const block = await this.blockchain.block.tryGet({\n                        hashOrIndex: hash,\n                    });\n                    if (block !== undefined) {\n                        if (peer.data.mutableBloomFilter === undefined) {\n                            this.sendMessage(peer, this.createMessage({\n                                command: Command_1.Command.block,\n                                payload: block,\n                            }));\n                        }\n                        else {\n                            this.sendMessage(peer, this.createMessage({\n                                command: Command_1.Command.merkleblock,\n                                payload: this.createMerkleBlockPayload({\n                                    block,\n                                    flags: block.transactions.map((transaction) => this.testFilter(peer.data.mutableBloomFilter, transaction)),\n                                }),\n                            }));\n                        }\n                    }\n                }));\n                break;\n            case payload_1.InventoryType.Consensus:\n                getData.hashes.forEach((hash) => {\n                    const payload = this.consensusCache.get(client_common_1.common.uInt256ToHex(hash));\n                    if (payload !== undefined) {\n                        this.sendMessage(peer, this.createMessage({\n                            command: Command_1.Command.consensus,\n                            payload,\n                        }));\n                    }\n                });\n                break;\n            default:\n                utils_1.utils.assertNever(getData.type);\n        }\n    }\n    async onGetHeadersMessageReceived(peer, getBlocks) {\n        const headers = await this.getHeaders(getBlocks, this.blockchain.currentHeader.index);\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.headers,\n            payload: new payload_1.HeadersPayload({ headers }),\n        }));\n    }\n    async onHeadersMessageReceived(peer, headersPayload) {\n        const headers = headersPayload.headers.filter((header) => !this.mutableKnownHeaderHashes.has(header.hash) && !this.tempKnownHeaderHashes.has(header.hashHex));\n        if (headers.length > 0) {\n            headers.forEach((header) => {\n                this.tempKnownHeaderHashes.add(header.hashHex);\n            });\n            try {\n                await this.blockchain.persistHeaders(headers);\n                headers.forEach((header) => {\n                    this.mutableKnownHeaderHashes.add(header.hash);\n                });\n            }\n            finally {\n                headers.forEach((header) => {\n                    this.tempKnownHeaderHashes.delete(header.hashHex);\n                });\n            }\n        }\n        if (this.blockchain.currentHeader.index < peer.data.startHeight) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.getheaders,\n                payload: new payload_1.GetBlocksPayload({\n                    hashStart: [this.blockchain.currentHeader.hash],\n                }),\n            }));\n        }\n    }\n    onInvMessageReceived(peer, inv) {\n        let hashes;\n        switch (inv.type) {\n            case payload_1.InventoryType.Transaction:\n                hashes = inv.hashes.filter((hash) => !this.mutableKnownTransactionHashes.has(hash) &&\n                    !this.tempKnownTransactionHashes.has(client_common_1.common.uInt256ToHex(hash)));\n                break;\n            case payload_1.InventoryType.Block:\n                hashes = inv.hashes.filter((hash) => !this.mutableKnownBlockHashes.has(hash) && !this.tempKnownBlockHashes.has(client_common_1.common.uInt256ToHex(hash)));\n                break;\n            case payload_1.InventoryType.Consensus:\n                hashes = inv.hashes;\n                break;\n            default:\n                utils_1.utils.assertNever(inv.type);\n                hashes = [];\n        }\n        if (hashes.length > 0) {\n            this.sendMessage(peer, this.createMessage({\n                command: Command_1.Command.getdata,\n                payload: new payload_1.InvPayload({ type: inv.type, hashes }),\n            }));\n        }\n    }\n    onMemPoolMessageReceived(peer) {\n        this.sendMessage(peer, this.createMessage({\n            command: Command_1.Command.inv,\n            payload: new payload_1.InvPayload({\n                type: payload_1.InventoryType.Transaction,\n                hashes: Object.values(this.mutableMemPool).map((transaction) => transaction.hash),\n            }),\n        }));\n    }\n    async onTransactionReceived(transaction) {\n        if (this.ready()) {\n            if (transaction.type === node_core_1.TransactionType.Miner) {\n                if (this.mutableConsensus !== undefined) {\n                    this.mutableConsensus.onTransactionReceived(transaction);\n                }\n            }\n            else {\n                await this.relayTransaction(transaction);\n            }\n        }\n    }\n    onVerackMessageReceived(peer) {\n        peer.close();\n    }\n    onVersionMessageReceived(peer) {\n        peer.close();\n    }\n    async getHeaders(getBlocks, maxHeight) {\n        let hashStopIndexPromise = Promise.resolve(maxHeight);\n        if (!getBlocks.hashStop.equals(client_common_1.common.ZERO_UINT256)) {\n            hashStopIndexPromise = this.blockchain.header\n                .tryGet({ hashOrIndex: getBlocks.hashStop })\n                .then((hashStopHeader) => hashStopHeader === undefined ? maxHeight : Math.min(hashStopHeader.index, maxHeight));\n        }\n        const [hashStartHeaders, hashEnd] = await Promise.all([\n            Promise.all(getBlocks.hashStart.map(async (hash) => this.blockchain.header.tryGet({ hashOrIndex: hash }))),\n            hashStopIndexPromise,\n        ]);\n        const hashStartHeader = lodash_1.default.head(lodash_1.default.orderBy(hashStartHeaders.filter(utils_1.utils.notNull), [(header) => header.index]));\n        if (hashStartHeader === undefined) {\n            return [];\n        }\n        const hashStart = hashStartHeader.index + 1;\n        if (hashStart > maxHeight) {\n            return [];\n        }\n        return Promise.all(lodash_1.default.range(hashStart, Math.min(hashStart + GET_BLOCKS_COUNT, hashEnd)).map(async (index) => this.blockchain.header.get({ hashOrIndex: index })));\n    }\n    testFilter(bloomFilterIn, transaction) {\n        const bloomFilter = bloomFilterIn;\n        if (bloomFilter === undefined) {\n            return true;\n        }\n        return (bloomFilter.contains(transaction.hash) ||\n            transaction.outputs.some((output) => bloomFilter.contains(output.address)) ||\n            transaction.inputs.some((input) => bloomFilter.contains(input.serializeWire())) ||\n            transaction.scripts.some((script) => bloomFilter.contains(client_common_1.crypto.toScriptHash(script.verification))) ||\n            (transaction.type === node_core_1.TransactionType.Register &&\n                transaction instanceof node_core_1.RegisterTransaction &&\n                bloomFilter.contains(transaction.asset.admin)));\n    }\n    createMerkleBlockPayload({ block, flags, }) {\n        const tree = new node_core_1.MerkleTree(block.transactions.map((transaction) => transaction.hash)).trim(flags);\n        const mutableBuffer = Buffer.allocUnsafe(Math.floor((flags.length + 7) / 8));\n        for (let i = 0; i < flags.length; i += 1) {\n            if (flags[i]) {\n                mutableBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n            }\n        }\n        return new payload_1.MerkleBlockPayload({\n            version: block.version,\n            previousHash: block.previousHash,\n            merkleRoot: block.merkleRoot,\n            timestamp: block.timestamp,\n            index: block.index,\n            consensusData: block.consensusData,\n            nextConsensus: block.nextConsensus,\n            script: block.script,\n            transactionCount: block.transactions.length,\n            hashes: tree.toHashArray(),\n            flags: mutableBuffer,\n        });\n    }\n    createMessage(value) {\n        return new Message_1.Message({\n            magic: this.blockchain.settings.messageMagic,\n            value,\n        });\n    }\n}\nexports.Node = Node;\n\n//# sourceMappingURL=Node.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Consensus_1 = require(\"./Consensus\");\nObject.defineProperty(exports, \"Consensus\", { enumerable: true, get: function () { return Consensus_1.Consensus; } });\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Consensus = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst asynciterablex_1 = require(\"@reactivex/ix-es2015-cjs/asynciterable/asynciterablex\");\nconst scan_1 = require(\"@reactivex/ix-es2015-cjs/asynciterable/pipe/scan\");\nconst common_1 = require(\"./common\");\nconst ConsensusContext_1 = require(\"./ConsensusContext\");\nconst ConsensusQueue_1 = require(\"./ConsensusQueue\");\nconst handleConsensusPayload_1 = require(\"./handleConsensusPayload\");\nconst handlePersistBlock_1 = require(\"./handlePersistBlock\");\nconst handleTransactionReceived_1 = require(\"./handleTransactionReceived\");\nconst runConsensus_1 = require(\"./runConsensus\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'consensus' });\nconst MS_IN_SECOND = 1000;\nclass Consensus {\n    constructor({ options, node }) {\n        this.mutableQueue = new ConsensusQueue_1.ConsensusQueue();\n        const privateKey = client_common_1.common.stringToPrivateKey(options.privateKey);\n        const publicKey = client_common_1.crypto.privateKeyToPublicKey(privateKey);\n        const feeAddress = client_common_1.crypto.publicKeyToScriptHash(publicKey);\n        this.options = {\n            privateKey,\n            publicKey,\n            feeAddress,\n            privateNet: options.privateNet,\n        };\n        this.node = node;\n        this.mutableConsensusContext = new ConsensusContext_1.ConsensusContext();\n    }\n    async start() {\n        let disposable = utils_1.noopDisposable;\n        try {\n            await this.pause();\n            this.doStart(this.options);\n            disposable = utils_1.composeDisposables(disposable, async () => {\n                await this.pause();\n            });\n            return disposable;\n        }\n        catch (err) {\n            await disposable();\n            throw err;\n        }\n    }\n    onPersistBlock() {\n        this.mutableQueue.write({ type: 'handlePersistBlock' });\n    }\n    onConsensusPayloadReceived(payload) {\n        this.mutableQueue.write({\n            type: 'handleConsensusPayload',\n            payload,\n        });\n    }\n    onTransactionReceived(transaction) {\n        this.mutableQueue.write({\n            type: 'handleTransactionReceived',\n            transaction,\n        });\n    }\n    async runConsensusNow() {\n        if (this.options.privateNet) {\n            await new Promise((resolve, reject) => {\n                this.mutableQueue.write({ type: 'timer', promise: { resolve, reject } });\n            });\n        }\n        else {\n            throw new Error('Can only force consensus on a private network.');\n        }\n    }\n    nowSeconds() {\n        return this.mutableConsensusContext.nowSeconds();\n    }\n    async fastForwardOffset(seconds) {\n        if (this.options.privateNet) {\n            this.mutableConsensusContext.fastForwardOffset(seconds);\n        }\n        else {\n            throw new Error('Can only fast forward on a private network.');\n        }\n    }\n    async fastForwardToTime(seconds) {\n        if (this.options.privateNet) {\n            this.mutableConsensusContext.fastForwardToTime(seconds);\n        }\n        else {\n            throw new Error('Can only fast forward on a private network.');\n        }\n    }\n    async pause() {\n        this.clearTimer();\n        this.mutableQueue.done();\n        this.mutableQueue = new ConsensusQueue_1.ConsensusQueue();\n        if (this.mutableStartPromise !== undefined) {\n            await this.mutableStartPromise;\n        }\n    }\n    async reset() {\n        this.mutableConsensusContext = new ConsensusContext_1.ConsensusContext();\n    }\n    async resume() {\n        this.doStart(this.options);\n    }\n    doStart(options) {\n        let completed = false;\n        const mutableStartPromise = this.startInternal(options).then(() => {\n            completed = true;\n            this.mutableStartPromise = undefined;\n        });\n        if (!completed) {\n            this.mutableStartPromise = mutableStartPromise;\n        }\n    }\n    async startInternal(options) {\n        logger.info({ name: 'neo_consensus_start' }, 'Consensus started.');\n        const initialResult = await common_1.initializeNewConsensus({\n            blockchain: this.node.blockchain,\n            publicKey: options.publicKey,\n            consensusContext: this.mutableConsensusContext,\n        });\n        await asynciterablex_1.AsyncIterableX.from(this.mutableQueue)\n            .pipe(scan_1.scan(async (context, event) => {\n            let result;\n            switch (event.type) {\n                case 'handlePersistBlock':\n                    result = await handlePersistBlock_1.handlePersistBlock({\n                        blockchain: this.node.blockchain,\n                        publicKey: options.publicKey,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'handleConsensusPayload':\n                    result = await handleConsensusPayload_1.handleConsensusPayload({\n                        context,\n                        node: this.node,\n                        privateKey: options.privateKey,\n                        payload: event.payload,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'handleTransactionReceived':\n                    result = await handleTransactionReceived_1.handleTransactionReceived({\n                        context,\n                        node: this.node,\n                        privateKey: options.privateKey,\n                        transaction: event.transaction,\n                        consensusContext: this.mutableConsensusContext,\n                    });\n                    break;\n                case 'timer':\n                    result = await runConsensus_1.runConsensus({\n                        context,\n                        node: this.node,\n                        options,\n                        consensusContext: this.mutableConsensusContext,\n                    }).catch((err) => {\n                        if (event.promise !== undefined) {\n                            event.promise.reject(err);\n                        }\n                        throw err;\n                    });\n                    if (event.promise !== undefined) {\n                        event.promise.resolve();\n                    }\n                    break;\n                default:\n                    utils_1.utils.assertNever(event);\n                    throw new Error('For TS');\n            }\n            return this.handleResult(result);\n        }, this.handleResult(initialResult)))\n            .forEach(() => {\n        });\n        logger.info({ name: 'neo_consensus_stop' }, 'Consensus stopped.');\n    }\n    handleResult(result) {\n        if (result.timerSeconds !== undefined) {\n            this.handleTimer(result.timerSeconds);\n        }\n        return result.context;\n    }\n    handleTimer(mutableTimerSeconds) {\n        this.clearTimer();\n        this.mutableTimer = setTimeout(() => this.mutableQueue.write({ type: 'timer' }), mutableTimerSeconds * MS_IN_SECOND);\n    }\n    clearTimer() {\n        if (this.mutableTimer !== undefined) {\n            clearTimeout(this.mutableTimer);\n            this.mutableTimer = undefined;\n        }\n    }\n}\nexports.Consensus = Consensus;\n\n//# sourceMappingURL=Consensus.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestReceivedContext = void 0;\nconst HeaderContext_1 = require(\"./HeaderContext\");\nconst SignatureSentContext_1 = require(\"./SignatureSentContext\");\nconst ViewChangingContext_1 = require(\"./ViewChangingContext\");\nclass RequestReceivedContext extends HeaderContext_1.HeaderContext {\n    constructor({ viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        super({\n            type: 'backup',\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n            transactions,\n            signatures,\n            header,\n        });\n    }\n    clone({ transactions }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n            signatures: this.signatures,\n        });\n    }\n    cloneViewChanging({ expectedView }) {\n        return new ViewChangingContext_1.ViewChangingContext({\n            previousHash: this.previousHash,\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        });\n    }\n    cloneSignatureSent({ signatures, }) {\n        return new SignatureSentContext_1.SignatureSentContext({\n            type: this.type,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n            signatures,\n        });\n    }\n    cloneExpectedView({ expectedView }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures: this.signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n    cloneSignatures({ signatures, }) {\n        return new RequestReceivedContext({\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: this.expectedView,\n            validators: this.validators,\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n            transactions: this.transactions,\n            signatures,\n            header: {\n                type: 'existing',\n                block: this.header,\n                transactionHashes: this.transactionHashes,\n            },\n        });\n    }\n}\nexports.RequestReceivedContext = RequestReceivedContext;\n\n//# sourceMappingURL=RequestReceivedContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=types.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneBlockSent = void 0;\nconst BlockSentContext_1 = require(\"./BlockSentContext\");\nfunction cloneBlockSent(context) {\n    return new BlockSentContext_1.BlockSentContext({\n        type: context.type,\n        previousHash: context.previousHash,\n        blockIndex: context.blockIndex,\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n    });\n}\nexports.cloneBlockSent = cloneBlockSent;\n\n//# sourceMappingURL=cloneBlockSent.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneInitial = void 0;\nconst InitialContext_1 = require(\"./InitialContext\");\nfunction cloneInitial(context, { type, previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n    return new InitialContext_1.InitialContext({\n        type,\n        previousHash: previousHash === undefined ? context.previousHash : previousHash,\n        blockIndex: blockIndex === undefined ? context.blockIndex : blockIndex,\n        viewNumber,\n        myIndex: myIndex === undefined ? context.myIndex : myIndex,\n        primaryIndex,\n        expectedView: expectedView === undefined ? context.expectedView : expectedView,\n        validators: validators === undefined ? context.validators : validators,\n        blockReceivedTimeSeconds: blockReceivedTimeSeconds === undefined ? context.blockReceivedTimeSeconds : blockReceivedTimeSeconds,\n    });\n}\nexports.cloneInitial = cloneInitial;\n\n//# sourceMappingURL=cloneInitial.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsensusContext = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nclass ConsensusContext {\n    constructor() {\n        this.mutableFastForwardSeconds = 0;\n    }\n    nowSeconds() {\n        return utils_1.utils.nowSeconds() + this.mutableFastForwardSeconds;\n    }\n    fastForwardOffset(seconds) {\n        if (seconds >= 0) {\n            this.mutableFastForwardSeconds += seconds;\n        }\n        else {\n            throw new Error('Can only fast forward to future time.');\n        }\n    }\n    fastForwardToTime(seconds) {\n        this.fastForwardOffset(seconds - this.nowSeconds());\n    }\n}\nexports.ConsensusContext = ConsensusContext;\n\n//# sourceMappingURL=ConsensusContext.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsensusQueue = void 0;\nclass ConsensusQueue {\n    constructor() {\n        this.mutableItems = [];\n        this.mutableResolvers = [];\n        this.mutableDoneInternal = false;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async next() {\n        const item = this.mutableItems.shift();\n        if (item !== undefined) {\n            if (item.type === 'error') {\n                return Promise.reject(item.error);\n            }\n            return Promise.resolve({ done: false, value: item.value });\n        }\n        if (this.mutableDoneInternal) {\n            return Promise.resolve({ done: true });\n        }\n        return new Promise((resolve, reject) => {\n            this.mutableResolvers.push({ resolve, reject });\n        });\n    }\n    write(value) {\n        let pushTimer = false;\n        if (value.type === 'handlePersistBlock') {\n            pushTimer = this.mutableItems.some((item) => item.type === 'value' && item.value.type === 'timer');\n            this.clear();\n        }\n        this.push({ type: 'value', value });\n        if (pushTimer) {\n            this.push({ type: 'value', value: { type: 'timer' } });\n        }\n    }\n    error(error) {\n        this.push({ type: 'error', error });\n    }\n    clear() {\n        this.mutableItems = [];\n    }\n    done() {\n        this.clear();\n        this.mutableResolvers.forEach(({ resolve }) => resolve({ done: true }));\n        this.mutableResolvers = [];\n        this.mutableDoneInternal = true;\n    }\n    push(item) {\n        if (this.mutableDoneInternal) {\n            throw new Error('ConsensusQueue already ended');\n        }\n        const resolver = this.mutableResolvers.shift();\n        if (resolver !== undefined) {\n            const { resolve, reject } = resolver;\n            if (item.type === 'error') {\n                reject(item.error);\n            }\n            else {\n                resolve({ done: false, value: item.value });\n            }\n        }\n        else {\n            this.mutableItems.push(item);\n        }\n    }\n}\nexports.ConsensusQueue = ConsensusQueue;\n\n//# sourceMappingURL=ConsensusQueue.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleConsensusPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nconst handleChangeView = ({ context: contextIn, node, payload, consensusContext, message, }) => {\n    let context = contextIn;\n    const viewNumber = message.newViewNumber;\n    if (viewNumber > context.expectedView[payload.validatorIndex]) {\n        const mutableExpectedView = [...context.expectedView];\n        mutableExpectedView[payload.validatorIndex] = viewNumber;\n        context = context.cloneExpectedView({ expectedView: mutableExpectedView });\n        if (common_1.checkExpectedView({ context, viewNumber })) {\n            return common_1.initializeConsensus({\n                node,\n                context,\n                viewNumber,\n                consensusContext,\n            });\n        }\n    }\n    return { context };\n};\nconst TEN_MINUTES_IN_SECONDS = 10 * 60;\nconst handlePrepareRequest = async ({ context: contextIn, node, privateKey, payload, consensusContext, message, }) => {\n    let context = contextIn;\n    if (context.type !== 'backup' ||\n        context instanceof context_1.RequestReceivedContext ||\n        payload.validatorIndex !== context.primaryIndex ||\n        payload.timestamp > consensusContext.nowSeconds() + TEN_MINUTES_IN_SECONDS) {\n        return { context };\n    }\n    const header = await node.blockchain.header.get({\n        hashOrIndex: context.previousHash,\n    });\n    if (payload.timestamp <= header.timestamp) {\n        return { context };\n    }\n    const mutableSignatures = [];\n    mutableSignatures[payload.validatorIndex] = message.signature;\n    const newContext = new context_1.RequestReceivedContext({\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n        transactions: {},\n        signatures: mutableSignatures,\n        header: {\n            type: 'new',\n            previousHash: context.previousHash,\n            transactionHashes: message.transactionHashes.map((hash) => client_common_1.common.uInt256ToHex(hash)),\n            blockIndex: context.blockIndex,\n            nonce: message.nonce,\n            timestamp: payload.timestamp,\n            nextConsensus: message.nextConsensus,\n        },\n    });\n    const verified = client_common_1.crypto.verify({\n        message: newContext.header.message,\n        signature: message.signature,\n        publicKey: context.validators[payload.validatorIndex],\n    });\n    if (!verified) {\n        return { context };\n    }\n    let nextContext = newContext;\n    for (const hash of newContext.transactionHashes.slice(1)) {\n        const transaction = node.memPool[hash];\n        if (transaction !== undefined) {\n            const res = await common_1.addTransaction({\n                context: nextContext,\n                node,\n                privateKey,\n                transaction,\n                verify: false,\n                consensusContext,\n            });\n            if (!(res.context instanceof context_1.RequestReceivedContext)) {\n                return res;\n            }\n            nextContext = res.context;\n        }\n    }\n    const result = await common_1.addTransaction({\n        context: nextContext,\n        node,\n        privateKey,\n        transaction: message.minerTransaction,\n        verify: true,\n        consensusContext,\n    });\n    if (!(result.context instanceof context_1.RequestReceivedContext)) {\n        return result;\n    }\n    context = result.context;\n    node.syncMemPool();\n    return { context };\n};\nconst handlePrepareResponse = async ({ context, node, payload, message, }) => {\n    if (context instanceof context_1.HeaderContext &&\n        context.signatures[payload.validatorIndex] === undefined &&\n        client_common_1.crypto.verify({\n            message: context.header.message,\n            signature: message.signature,\n            publicKey: context.validators[payload.validatorIndex],\n        })) {\n        const mutableSignatures = [...context.signatures];\n        mutableSignatures[payload.validatorIndex] = message.signature;\n        const newContext = context.cloneSignatures({ signatures: mutableSignatures });\n        return common_1.checkSignatures({ context: newContext, node });\n    }\n    return { context };\n};\nexports.handleConsensusPayload = async ({ context, node, privateKey, payload, consensusContext, }) => {\n    const { consensusMessage } = payload;\n    if (payload.validatorIndex === context.myIndex ||\n        payload.version !== context.version ||\n        !client_common_1.common.uInt256Equal(payload.previousHash, context.previousHash) ||\n        payload.blockIndex !== context.blockIndex ||\n        payload.validatorIndex >= context.validators.length ||\n        (consensusMessage.type !== node_core_1.ConsensusMessageType.ChangeView && consensusMessage.viewNumber !== context.viewNumber)) {\n        return { context };\n    }\n    switch (consensusMessage.type) {\n        case node_core_1.ConsensusMessageType.ChangeView:\n            return handleChangeView({\n                context,\n                node,\n                payload,\n                consensusContext,\n                message: consensusMessage,\n            });\n        case node_core_1.ConsensusMessageType.PrepareRequest:\n            return handlePrepareRequest({\n                context,\n                node,\n                privateKey,\n                payload,\n                consensusContext,\n                message: consensusMessage,\n            });\n        case node_core_1.ConsensusMessageType.PrepareResponse:\n            return handlePrepareResponse({\n                context,\n                node,\n                payload,\n                message: consensusMessage,\n            });\n        default:\n            utils_1.utils.assertNever(consensusMessage);\n            throw new Error('For TS');\n    }\n};\n\n//# sourceMappingURL=handleConsensusPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handlePersistBlock = void 0;\nconst common_1 = require(\"./common\");\nexports.handlePersistBlock = async ({ blockchain, publicKey, consensusContext, }) => common_1.initializeNewConsensus({\n    blockchain,\n    publicKey,\n    consensusContext,\n});\n\n//# sourceMappingURL=handlePersistBlock.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleTransactionReceived = void 0;\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nexports.handleTransactionReceived = async ({ context, node, privateKey, transaction, consensusContext, }) => {\n    if (!(context instanceof context_1.RequestReceivedContext) ||\n        context.transactions[transaction.hashHex] !== undefined ||\n        !context.transactionHashesSet.has(transaction.hashHex)) {\n        return { context };\n    }\n    return common_1.addTransaction({\n        context,\n        node,\n        privateKey,\n        transaction,\n        verify: true,\n        consensusContext,\n    });\n};\n\n//# sourceMappingURL=handleTransactionReceived.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runConsensus = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst bignumber_js_1 = tslib_1.__importDefault(require(\"bignumber.js\"));\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst common_1 = require(\"./common\");\nconst context_1 = require(\"./context\");\nconst createMinerTransaction = async ({ node, feeAddress, transactions, nonce, }) => {\n    const networkFee = await node_core_1.Block.calculateNetworkFee(node.blockchain.feeContext, transactions);\n    const outputs = networkFee.isZero()\n        ? []\n        : [\n            new node_core_1.Output({\n                asset: node.blockchain.settings.utilityToken.hash,\n                value: networkFee,\n                address: feeAddress,\n            }),\n        ];\n    return new node_core_1.MinerTransaction({\n        nonce: nonce.mod(node_core_1.utils.UINT_MAX.addn(1)).toNumber(),\n        outputs,\n    });\n};\nconst requestChangeView = ({ context: contextIn, node, privateKey, consensusContext, }) => {\n    let context = contextIn;\n    context = context.cloneExpectedView({\n        expectedView: common_1.incrementExpectedView(context),\n    });\n    common_1.signAndRelayChangeView({ context, node, privateKey });\n    const viewNumber = context.expectedView[context.myIndex];\n    if (common_1.checkExpectedView({ context, viewNumber })) {\n        return common_1.initializeConsensusInitial({\n            blockchain: node.blockchain,\n            context,\n            viewNumber,\n            consensusContext,\n        });\n    }\n    const { secondsPerBlock } = node.blockchain.settings;\n    return {\n        context,\n        timerSeconds: secondsPerBlock << (viewNumber + 1),\n    };\n};\nexports.runConsensus = async ({ context, node, options: { privateKey, feeAddress, privateNet }, consensusContext, }) => {\n    if (context.type === 'primary' && !(context instanceof context_1.RequestSentContext)) {\n        let requestSentContext;\n        if (context instanceof context_1.SignatureSentContext) {\n            requestSentContext = context.cloneRequestSent();\n        }\n        else {\n            const nonce = node_core_1.utils.randomUInt64();\n            let mutableTransactions = Object.values(node.memPool);\n            const minerTransaction = await createMinerTransaction({\n                node,\n                feeAddress,\n                transactions: mutableTransactions,\n                nonce,\n            });\n            if (mutableTransactions.length >= node.blockchain.settings.maxTransactionsPerBlock) {\n                const mutableNetworkFees = await Promise.all(mutableTransactions.map(async (transaction) => {\n                    const networkFee = await transaction.getNetworkFee(node.blockchain.feeContext);\n                    return [transaction, new bignumber_js_1.default(networkFee.toString(10))];\n                }));\n                mutableNetworkFees.sort(([first, a], [second, b]) => b.div(second.size).comparedTo(a.div(first.size)));\n                mutableTransactions = lodash_1.default.take(mutableNetworkFees, node.blockchain.settings.maxTransactionsPerBlock - 1)\n                    .map(([transaction, _unused]) => transaction);\n            }\n            mutableTransactions.unshift(minerTransaction);\n            const [previousHeader, validators] = await Promise.all([\n                node.blockchain.header.get({ hashOrIndex: context.previousHash }),\n                node.blockchain.getValidators(mutableTransactions),\n            ]);\n            const newContext = new context_1.RequestSentContext({\n                viewNumber: context.viewNumber,\n                myIndex: context.myIndex,\n                primaryIndex: context.primaryIndex,\n                expectedView: context.expectedView,\n                validators: context.validators,\n                blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n                transactions: mutableTransactions.reduce((acc, transaction) => (Object.assign(Object.assign({}, acc), { [transaction.hashHex]: transaction })), {}),\n                signatures: [],\n                header: {\n                    type: 'new',\n                    previousHash: context.previousHash,\n                    transactionHashes: mutableTransactions.map((transaction) => transaction.hashHex),\n                    blockIndex: context.blockIndex,\n                    nonce,\n                    timestamp: Math.max(consensusContext.nowSeconds(), previousHeader.timestamp + 1),\n                    nextConsensus: client_common_1.crypto.getConsensusAddress(validators),\n                },\n            });\n            const mutableSignatures = [];\n            mutableSignatures[newContext.myIndex] = client_common_1.crypto.sign({\n                message: newContext.header.message,\n                privateKey,\n            });\n            requestSentContext = newContext.cloneSignatures({ signatures: mutableSignatures });\n        }\n        if (privateNet) {\n            return common_1.checkSignatures({ node, context: requestSentContext });\n        }\n        common_1.signAndRelay({\n            context: requestSentContext,\n            node,\n            privateKey,\n            consensusMessage: new node_core_1.PrepareRequestConsensusMessage({\n                viewNumber: requestSentContext.viewNumber,\n                nonce: requestSentContext.header.consensusData,\n                nextConsensus: requestSentContext.header.nextConsensus,\n                transactionHashes: requestSentContext.transactionHashes.map((hash) => client_common_1.common.hexToUInt256(hash)),\n                minerTransaction: utils_1.utils.nullthrows(requestSentContext.transactions[requestSentContext.transactionHashes[0]]),\n                signature: utils_1.utils.nullthrows(requestSentContext.signatures[requestSentContext.myIndex]),\n            }),\n        });\n        const { secondsPerBlock } = node.blockchain.settings;\n        return {\n            context: requestSentContext,\n            timerSeconds: secondsPerBlock << (requestSentContext.viewNumber + 1),\n        };\n    }\n    if (context instanceof context_1.RequestSentContext || context.type === 'backup') {\n        return requestChangeView({\n            context,\n            node,\n            privateKey,\n            consensusContext,\n        });\n    }\n    return { context };\n};\n\n//# sourceMappingURL=runConsensus.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlreadyConnectedError = exports.NegotiationError = void 0;\nconst utils_1 = require(\"@neo-one/utils\");\nexports.NegotiationError = utils_1.makeErrorWithCode('NEGOTIATION', (message, reason) => `Negotiation failed. Unexpected message received: ${message.value.command}${reason === undefined ? '' : `. ${reason}`}`);\nexports.AlreadyConnectedError = utils_1.makeErrorWithCode('ALREADY_CONNECTED', (reason) => `Negotiation failed: ${reason}`);\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageTransform = exports.InvalidMessageTransformEncodingError = exports.Message = exports.PAYLOAD_MAX_SIZE = exports.COMMAND_LENGTH = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst stream_1 = require(\"stream\");\nconst Command_1 = require(\"./Command\");\nconst payload_1 = require(\"./payload\");\nexports.COMMAND_LENGTH = 12;\nexports.PAYLOAD_MAX_SIZE = 0x02000000;\nconst calculateChecksum = (buffer) => client_common_1.common.toUInt32LE(client_common_1.crypto.hash256(buffer));\nconst deserializeMessageHeader = ({ context, reader, }) => {\n    if (reader.readUInt32LE() !== context.messageMagic) {\n        throw new client_common_1.InvalidFormatError(`Expected BinaryReader readUInt32LE(0) to equal ${context.messageMagic}. Received: ${context.messageMagic}`);\n    }\n    const command = Command_1.assertCommand(reader.readFixedString(exports.COMMAND_LENGTH));\n    const length = reader.readUInt32LE();\n    if (length > exports.PAYLOAD_MAX_SIZE) {\n        throw new client_common_1.InvalidFormatError(`Expected buffer readout to be less than max payload size of ${exports.PAYLOAD_MAX_SIZE}. Received: ${length}`);\n    }\n    const checksum = reader.readUInt32LE();\n    return { command, length, checksum };\n};\nclass Message {\n    constructor({ magic, value }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.magic = magic;\n        this.value = value;\n    }\n    static deserializeWireBase(options) {\n        const { reader, context } = options;\n        const { command, length, checksum } = deserializeMessageHeader(options);\n        const payloadBuffer = reader.readBytes(length);\n        const payloadBufferChecksum = calculateChecksum(payloadBuffer);\n        if (payloadBufferChecksum !== checksum) {\n            throw new client_common_1.InvalidFormatError(`Expected payloadBuffer checksum to be ${checksum}. Received: ${payloadBufferChecksum}`);\n        }\n        const payloadOptions = {\n            context: options.context,\n            buffer: payloadBuffer,\n        };\n        let value;\n        switch (command) {\n            case Command_1.Command.addr:\n                value = {\n                    command: Command_1.Command.addr,\n                    payload: payload_1.AddrPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.block:\n                value = {\n                    command: Command_1.Command.block,\n                    payload: node_core_1.Block.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.consensus:\n                value = {\n                    command: Command_1.Command.consensus,\n                    payload: node_core_1.ConsensusPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.filteradd:\n                value = {\n                    command: Command_1.Command.filteradd,\n                    payload: payload_1.FilterAddPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.filterclear:\n                value = { command: Command_1.Command.filterclear };\n                break;\n            case Command_1.Command.filterload:\n                value = {\n                    command: Command_1.Command.filterload,\n                    payload: payload_1.FilterLoadPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getaddr:\n                value = { command: Command_1.Command.getaddr };\n                break;\n            case Command_1.Command.getblocks:\n                value = {\n                    command: Command_1.Command.getblocks,\n                    payload: payload_1.GetBlocksPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getdata:\n                value = {\n                    command: Command_1.Command.getdata,\n                    payload: payload_1.InvPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.getheaders:\n                value = {\n                    command: Command_1.Command.getheaders,\n                    payload: payload_1.GetBlocksPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.headers:\n                value = {\n                    command: Command_1.Command.headers,\n                    payload: payload_1.HeadersPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.inv:\n                value = {\n                    command: Command_1.Command.inv,\n                    payload: payload_1.InvPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.mempool:\n                value = { command: Command_1.Command.mempool };\n                break;\n            case Command_1.Command.tx:\n                value = {\n                    command: Command_1.Command.tx,\n                    payload: node_core_1.deserializeTransactionWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.verack:\n                value = { command: Command_1.Command.verack };\n                break;\n            case Command_1.Command.version:\n                value = {\n                    command: Command_1.Command.version,\n                    payload: payload_1.VersionPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.alert:\n                value = { command: Command_1.Command.alert };\n                break;\n            case Command_1.Command.merkleblock:\n                value = {\n                    command: Command_1.Command.merkleblock,\n                    payload: payload_1.MerkleBlockPayload.deserializeWire(payloadOptions),\n                };\n                break;\n            case Command_1.Command.notfound:\n                value = { command: Command_1.Command.notfound };\n                break;\n            case Command_1.Command.ping:\n                value = { command: Command_1.Command.ping };\n                break;\n            case Command_1.Command.pong:\n                value = { command: Command_1.Command.pong };\n                break;\n            case Command_1.Command.reject:\n                value = { command: Command_1.Command.reject };\n                break;\n            default:\n                utils_1.utils.assertNever(command);\n                throw new client_common_1.InvalidFormatError(``);\n        }\n        return new this({ magic: context.messageMagic, value });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        const { value } = this;\n        writer.writeUInt32LE(this.magic);\n        writer.writeFixedString(value.command, exports.COMMAND_LENGTH);\n        let payload = Buffer.alloc(0);\n        switch (value.command) {\n            case Command_1.Command.addr:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.block:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.consensus:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.filteradd:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.filterclear:\n                break;\n            case Command_1.Command.filterload:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getaddr:\n                break;\n            case Command_1.Command.getblocks:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getdata:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.getheaders:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.headers:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.inv:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.mempool:\n                break;\n            case Command_1.Command.tx:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.verack:\n                break;\n            case Command_1.Command.version:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.alert:\n                break;\n            case Command_1.Command.merkleblock:\n                payload = value.payload.serializeWire();\n                break;\n            case Command_1.Command.notfound:\n                break;\n            case Command_1.Command.ping:\n                break;\n            case Command_1.Command.pong:\n                break;\n            case Command_1.Command.reject:\n                break;\n            default:\n                utils_1.utils.assertNever(value);\n                throw new client_common_1.InvalidFormatError('Command does not exist');\n        }\n        writer.writeUInt32LE(payload.length);\n        writer.writeUInt32LE(calculateChecksum(payload));\n        writer.writeBytes(payload);\n    }\n}\nexports.Message = Message;\nexports.InvalidMessageTransformEncodingError = utils_1.makeErrorWithCode('INVALID_MESSAGE_TRANSFORM_ENCODING', (message) => message);\nconst SIZE_OF_MESSAGE_HEADER = client_common_1.IOHelper.sizeOfUInt32LE +\n    client_common_1.IOHelper.sizeOfFixedString(exports.COMMAND_LENGTH) +\n    client_common_1.IOHelper.sizeOfUInt32LE +\n    client_common_1.IOHelper.sizeOfUInt32LE;\nclass MessageTransform extends stream_1.Transform {\n    constructor(context) {\n        super({ readableObjectMode: true });\n        this.context = context;\n        this.mutableBuffer = Buffer.from([]);\n    }\n    _transform(chunk, encoding, callback) {\n        if (typeof chunk === 'string') {\n            throw new exports.InvalidMessageTransformEncodingError(`Invalid Message Transform Chunk Type. Expected chunk type to be 'string', found: ${typeof chunk}`);\n        }\n        if (encoding !== 'buffer') {\n            throw new exports.InvalidMessageTransformEncodingError(`Invalid Message Transform Encoding. Expected: 'buffer', found: ${encoding}`);\n        }\n        this.mutableBuffer = Buffer.concat([this.mutableBuffer, chunk]);\n        try {\n            const { remainingBuffer, mutableMessages } = this.processBuffer(new node_core_1.BinaryReader(this.mutableBuffer));\n            this.mutableBuffer = remainingBuffer;\n            mutableMessages.forEach((message) => this.push(message));\n            callback(undefined);\n        }\n        catch (error) {\n            callback(error);\n        }\n    }\n    processBuffer(reader) {\n        if (reader.remaining < SIZE_OF_MESSAGE_HEADER) {\n            return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n        }\n        const { length } = deserializeMessageHeader({\n            context: this.context,\n            reader: reader.clone(),\n        });\n        if (reader.remaining < SIZE_OF_MESSAGE_HEADER + length) {\n            return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n        }\n        const message = Message.deserializeWireBase({\n            context: this.context,\n            reader,\n        });\n        const { remainingBuffer, mutableMessages } = this.processBuffer(reader);\n        mutableMessages.push(message);\n        return { remainingBuffer, mutableMessages };\n    }\n}\nexports.MessageTransform = MessageTransform;\n\n//# sourceMappingURL=Message.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddrPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst NetworkAddress_1 = require(\"./NetworkAddress\");\nclass AddrPayload {\n    constructor({ addresses }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.addresses = addresses;\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const addresses = reader.readArray(() => NetworkAddress_1.NetworkAddress.deserializeWireBase(options));\n        return new this({ addresses });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.addresses, (address) => address.serializeWireBase(writer));\n    }\n}\nexports.AddrPayload = AddrPayload;\n\n//# sourceMappingURL=AddrPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterAddPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass FilterAddPayload {\n    constructor({ data }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.data = data;\n    }\n    static deserializeWireBase({ reader }) {\n        const data = reader.readVarBytesLE(520);\n        return new this({ data });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeVarBytesLE(this.data);\n    }\n}\nexports.FilterAddPayload = FilterAddPayload;\n\n//# sourceMappingURL=FilterAddPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterLoadPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass FilterLoadPayload {\n    constructor({ filter, k, tweak }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.filter = filter;\n        this.k = k;\n        this.tweak = tweak;\n    }\n    static deserializeWireBase({ reader }) {\n        const filter = reader.readVarBytesLE(36000);\n        const k = reader.readUInt8();\n        const tweak = reader.readUInt32LE();\n        if (k > 50) {\n            throw new client_common_1.InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be less than 50. Received: ${k}`);\n        }\n        return new this({ filter, k, tweak });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeVarBytesLE(this.filter);\n        writer.writeUInt8(this.k);\n        writer.writeUInt32LE(this.tweak);\n    }\n}\nexports.FilterLoadPayload = FilterLoadPayload;\n\n//# sourceMappingURL=FilterLoadPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBlocksPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass GetBlocksPayload {\n    constructor({ hashStart, hashStop = client_common_1.common.ZERO_UINT256 }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.hashStart = hashStart;\n        this.hashStop = hashStop;\n    }\n    static deserializeWireBase({ reader }) {\n        const hashStart = reader.readArray(() => reader.readUInt256());\n        const hashStop = reader.readUInt256();\n        return new this({ hashStart, hashStop });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.hashStart, (value) => {\n            writer.writeUInt256(value);\n        });\n        writer.writeUInt256(this.hashStop);\n    }\n}\nexports.GetBlocksPayload = GetBlocksPayload;\n\n//# sourceMappingURL=GetBlocksPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeadersPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass HeadersPayload {\n    constructor({ headers }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.headers = headers;\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const headers = reader.readArray(() => node_core_1.Header.deserializeWireBase(options));\n        return new this({ headers });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeArray(this.headers, (header) => header.serializeWireBase(writer));\n    }\n}\nexports.HeadersPayload = HeadersPayload;\n\n//# sourceMappingURL=HeadersPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst InventoryType_1 = require(\"./InventoryType\");\nclass InvPayload {\n    constructor({ type, hashes }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.type = type;\n        this.hashes = hashes;\n    }\n    static deserializeWireBase({ reader }) {\n        const type = InventoryType_1.assertInventoryType(reader.readUInt8());\n        const hashes = reader.readArray(() => reader.readUInt256());\n        return new this({ type, hashes });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeUInt8(this.type);\n        writer.writeArray(this.hashes, (value) => {\n            writer.writeUInt256(value);\n        });\n    }\n}\nexports.InvPayload = InvPayload;\n\n//# sourceMappingURL=InvPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleBlockPayload = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nclass MerkleBlockPayload extends node_core_1.BlockBase {\n    constructor({ version, previousHash, merkleRoot, timestamp, index, consensusData, nextConsensus, script, transactionCount, hashes, flags, }) {\n        super({\n            version,\n            previousHash,\n            merkleRoot,\n            timestamp,\n            index,\n            consensusData,\n            nextConsensus,\n            script,\n        });\n        this.transactionCount = transactionCount;\n        this.hashes = hashes;\n        this.flags = flags;\n        this.merkleBlockPayloadSizeInternal = node_core_1.utils.lazy(() => super.size +\n            client_common_1.IOHelper.sizeOfUInt32LE +\n            client_common_1.IOHelper.sizeOfArray(this.hashes, () => client_common_1.IOHelper.sizeOfUInt256) +\n            client_common_1.IOHelper.sizeOfVarBytesLE(this.flags));\n    }\n    static deserializeWireBase(options) {\n        const { reader } = options;\n        const blockBase = super.deserializeBlockBaseWireBase(options);\n        const transactionCount = reader.readVarUIntLE(node_core_1.utils.INT_MAX_VALUE).toNumber();\n        const hashes = reader.readArray(() => reader.readUInt256());\n        const flags = reader.readVarBytesLE();\n        return new this({\n            version: blockBase.version,\n            previousHash: blockBase.previousHash,\n            merkleRoot: blockBase.merkleRoot,\n            timestamp: blockBase.timestamp,\n            index: blockBase.index,\n            consensusData: blockBase.consensusData,\n            nextConsensus: blockBase.nextConsensus,\n            script: blockBase.script,\n            transactionCount,\n            hashes,\n            flags,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    get size() {\n        return this.merkleBlockPayloadSizeInternal();\n    }\n    serializeWireBase(writer) {\n        super.serializeWireBase(writer);\n        writer.writeVarUIntLE(this.transactionCount);\n        writer.writeArray(this.hashes, (hash) => {\n            writer.writeUInt256(hash);\n        });\n        writer.writeVarBytesLE(this.flags);\n    }\n}\nexports.MerkleBlockPayload = MerkleBlockPayload;\n\n//# sourceMappingURL=MerkleBlockPayload.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VersionPayload = exports.SERVICES = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst bn_js_1 = require(\"bn.js\");\nexports.SERVICES = {\n    NODE_NETWORK: new bn_js_1.BN(1),\n};\nclass VersionPayload {\n    constructor({ protocolVersion, services, timestamp, port, nonce, userAgent, startHeight, relay, }) {\n        this.serializeWire = client_common_1.createSerializeWire(this.serializeWireBase.bind(this));\n        this.protocolVersion = protocolVersion;\n        this.services = services;\n        this.timestamp = timestamp;\n        this.port = port;\n        this.nonce = nonce;\n        this.userAgent = userAgent;\n        this.startHeight = startHeight;\n        this.relay = relay;\n    }\n    static deserializeWireBase({ reader }) {\n        const protocolVersion = reader.readUInt32LE();\n        const services = reader.readUInt64LE();\n        const timestamp = reader.readUInt32LE();\n        const port = reader.readUInt16LE();\n        const nonce = reader.readUInt32LE();\n        const userAgent = reader.readVarString(1024);\n        const startHeight = reader.readUInt32LE();\n        const relay = reader.readBoolean();\n        return new this({\n            protocolVersion,\n            services,\n            timestamp,\n            port,\n            nonce,\n            userAgent,\n            startHeight,\n            relay,\n        });\n    }\n    static deserializeWire(options) {\n        return this.deserializeWireBase({\n            context: options.context,\n            reader: new node_core_1.BinaryReader(options.buffer),\n        });\n    }\n    serializeWireBase(writer) {\n        writer.writeUInt32LE(this.protocolVersion);\n        writer.writeUInt64LE(this.services);\n        writer.writeUInt32LE(this.timestamp);\n        writer.writeUInt16LE(this.port);\n        writer.writeUInt32LE(this.nonce);\n        writer.writeVarString(this.userAgent);\n        writer.writeUInt32LE(this.startHeight);\n        writer.writeBoolean(this.relay);\n    }\n}\nexports.VersionPayload = VersionPayload;\n\n//# sourceMappingURL=VersionPayload.js.map\n","import { ConnectedPeer, Endpoint } from '@neo-one/node-core';\n\nexport class Network<Message, PeerData> {\n  public readonly connectedPeers: ReadonlyArray<ConnectedPeer<Message, PeerData>> = [];\n  public blacklistAndClose(_peer: ConnectedPeer<Message, PeerData>): void {\n    // do nothing\n  }\n  public start(): void {\n    // do nothing\n  }\n  public stop(): void {\n    // do nothing\n  }\n  public relay(_buffer: Buffer): void {\n    // do nothing\n  }\n  public permanentlyBlacklist(_endpoint: Endpoint): void {\n    // do nothing\n  }\n  public addEndpoint(_endpoint: Endpoint): void {\n    // do nothing\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./createHandler\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHandler = exports.JSONRPCError = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst logger_1 = require(\"@neo-one/logger\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst operators_1 = require(\"rxjs/operators\");\nconst logger = logger_1.createChild(logger_1.nodeLogger, { component: 'rpc-handler' });\nclass JSONRPCError {\n    constructor(code, message) {\n        this.code = code;\n        this.message = message;\n    }\n}\nexports.JSONRPCError = JSONRPCError;\nconst RPC_METHODS = {\n    getaccountstate: 'getaccountstate',\n    getassetstate: 'getassetstate',\n    getbestblockhash: 'getbestblockhash',\n    getblock: 'getblock',\n    getblockcount: 'getblockcount',\n    getblockhash: 'getblockhash',\n    getblocksysfee: 'getblocksysfee',\n    getconnectioncount: 'getconnectioncount',\n    getcontractstate: 'getcontractstate',\n    getrawmempool: 'getrawmempool',\n    getrawtransaction: 'getrawtransaction',\n    getstorage: 'getstorage',\n    gettxout: 'gettxout',\n    invoke: 'invoke',\n    invokefunction: 'invokefunction',\n    invokescript: 'invokescript',\n    sendrawtransaction: 'sendrawtransaction',\n    submitblock: 'submitblock',\n    validateaddress: 'validateaddress',\n    getpeers: 'getpeers',\n    relaytransaction: 'relaytransaction',\n    getoutput: 'getoutput',\n    getclaimamount: 'getclaimamount',\n    getallstorage: 'getallstorage',\n    testinvocation: 'testinvocation',\n    gettransactionreceipt: 'gettransactionreceipt',\n    getinvocationdata: 'getinvocationdata',\n    getvalidators: 'getvalidators',\n    getnetworksettings: 'getnetworksettings',\n    runconsensusnow: 'runconsensusnow',\n    updatesettings: 'updatesettings',\n    getsettings: 'getsettings',\n    fastforwardoffset: 'fastforwardoffset',\n    fastforwardtotime: 'fastforwardtotime',\n    reset: 'reset',\n    getneotrackerurl: 'getneotrackerurl',\n    resetproject: 'resetproject',\n    UNKNOWN: 'UNKNOWN',\n    INVALID: 'INVALID',\n};\nconst createJSONRPCHandler = (handlers) => {\n    const validateRequest = (request) => {\n        if (request !== undefined &&\n            typeof request === 'object' &&\n            request.jsonrpc === '2.0' &&\n            request.method !== undefined &&\n            typeof request.method === 'string' &&\n            (request.params === undefined || Array.isArray(request.params) || typeof request.params === 'object') &&\n            (request.id === undefined || typeof request.id === 'string' || typeof request.id === 'number')) {\n            return request;\n        }\n        throw new JSONRPCError(-32600, 'Invalid Request');\n    };\n    const handleSingleRequest = async (requestIn) => {\n        let labels = {};\n        let method = RPC_METHODS.UNKNOWN;\n        try {\n            let request;\n            try {\n                request = validateRequest(requestIn);\n            }\n            finally {\n                if (request !== undefined) {\n                    ({ method } = request);\n                }\n                else if (typeof requestIn === 'object') {\n                    ({ method } = requestIn);\n                }\n                if (RPC_METHODS[method] === undefined) {\n                    method = RPC_METHODS.INVALID;\n                }\n                labels = { [utils_1.Labels.RPC_METHOD]: method };\n            }\n            const handler = handlers[request.method];\n            if (handler === undefined) {\n                throw new JSONRPCError(-32601, 'Method not found');\n            }\n            const { params } = request;\n            let handlerParams;\n            if (params === undefined) {\n                handlerParams = [];\n            }\n            else if (Array.isArray(params)) {\n                handlerParams = params;\n            }\n            else {\n                handlerParams = [params];\n            }\n            const result = await handler(handlerParams);\n            logger.debug(Object.assign({ name: 'jsonrpc_server_single_request' }, labels));\n            return {\n                jsonrpc: '2.0',\n                result,\n                id: request.id === undefined ? undefined : request.id,\n            };\n        }\n        catch (err) {\n            logger.error(Object.assign(Object.assign({ name: 'jsonrpc_server_single_request' }, labels), { err }));\n            throw err;\n        }\n    };\n    const handleRequest = async (request) => {\n        if (Array.isArray(request)) {\n            return Promise.all(request.map(async (batchRequest) => handleSingleRequest(batchRequest)));\n        }\n        return handleSingleRequest(request);\n    };\n    const handleRequestSafe = async (labels, request) => {\n        try {\n            let result;\n            try {\n                result = await handleRequest(request);\n                logger.debug(Object.assign({ name: 'jsonrpc_server_request' }, labels));\n            }\n            catch (err) {\n                logger.error(Object.assign(Object.assign({ name: 'jsonrpc_server_request' }, labels), { err }));\n                throw err;\n            }\n            return result;\n        }\n        catch (error) {\n            let errorResponse = {\n                code: -32603,\n                message: error.message === undefined ? 'Internal error' : error.message,\n            };\n            if (error.code !== undefined &&\n                error.message !== undefined &&\n                typeof error.code === 'number' &&\n                typeof error.message === 'string') {\n                errorResponse = { code: error.code, message: error.message };\n            }\n            return {\n                jsonrpc: '2.0',\n                error: errorResponse,\n                id: undefined,\n            };\n        }\n    };\n    return async (request) => handleRequestSafe({ [utils_1.Labels.RPC_TYPE]: 'jsonrpc' }, request);\n};\nconst getTransactionReceipt = (value) => ({\n    blockIndex: value.startHeight,\n    blockHash: client_common_1.JSONHelper.writeUInt256(value.blockHash),\n    transactionIndex: value.index,\n    globalIndex: client_common_1.JSONHelper.writeUInt64(value.globalIndex),\n});\nexports.createHandler = ({ blockchain, node, handleGetNEOTrackerURL, handleResetProject, }) => {\n    const checkHeight = (height) => {\n        if (height < 0 || height > blockchain.currentBlockIndex) {\n            throw new JSONRPCError(-100, 'Invalid Height');\n        }\n    };\n    const handlers = {\n        [RPC_METHODS.getaccountstate]: async (args) => {\n            const hash = client_common_1.crypto.addressToScriptHash({\n                addressVersion: blockchain.settings.addressVersion,\n                address: args[0],\n            });\n            let account = await blockchain.account.tryGet({ hash });\n            if (account === undefined) {\n                account = new node_core_1.Account({ hash });\n            }\n            return account.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getassetstate]: async (args) => {\n            const asset = await blockchain.asset.tryGet({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            if (asset === undefined) {\n                throw new JSONRPCError(-100, 'Unknown asset');\n            }\n            return asset.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getbestblockhash]: async () => client_common_1.JSONHelper.writeUInt256(blockchain.currentBlock.hash),\n        [RPC_METHODS.getblock]: async (args) => {\n            let hashOrIndex = args[0];\n            if (typeof args[0] === 'string') {\n                hashOrIndex = client_common_1.JSONHelper.readUInt256(args[0]);\n            }\n            let watchTimeoutMS;\n            if (args[1] !== undefined && typeof args[1] === 'number' && args[1] !== 1) {\n                watchTimeoutMS = args[1];\n            }\n            else if (args[2] !== undefined && typeof args[2] === 'number') {\n                watchTimeoutMS = args[2];\n            }\n            let block = await blockchain.block.tryGet({ hashOrIndex });\n            if (block === undefined) {\n                if (watchTimeoutMS === undefined) {\n                    throw new JSONRPCError(-100, 'Unknown block');\n                }\n                try {\n                    block = await blockchain.block$\n                        .pipe(operators_1.filter((value) => value.hashHex === args[0] || value.index === args[0]), operators_1.take(1), operators_1.timeout(new Date(Date.now() + watchTimeoutMS)))\n                        .toPromise();\n                }\n                catch (_a) {\n                    throw new JSONRPCError(-100, 'Unknown block');\n                }\n            }\n            if (args[1] === true || args[1] === 1) {\n                return block.serializeJSON(blockchain.serializeJSONContext);\n            }\n            return block.serializeWire().toString('hex');\n        },\n        [RPC_METHODS.getblockcount]: async () => blockchain.currentBlockIndex + 1,\n        [RPC_METHODS.getblockhash]: async (args) => {\n            const height = args[0];\n            checkHeight(height);\n            const block = await blockchain.block.get({ hashOrIndex: height });\n            return client_common_1.JSONHelper.writeUInt256(block.hash);\n        },\n        [RPC_METHODS.getblocksysfee]: async (args) => {\n            const height = args[0];\n            checkHeight(height);\n            const header = await blockchain.header.get({ hashOrIndex: height });\n            const blockData = await blockchain.blockData.get({\n                hash: header.hash,\n            });\n            return blockData.systemFee.toString(10);\n        },\n        [RPC_METHODS.getconnectioncount]: async () => node.connectedPeers.length,\n        [RPC_METHODS.getcontractstate]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const contract = await blockchain.contract.tryGet({ hash });\n            if (contract === undefined) {\n                throw new JSONRPCError(-100, 'Unknown contract');\n            }\n            return contract.serializeJSON(blockchain.serializeJSONContext);\n        },\n        [RPC_METHODS.getrawmempool]: async () => Object.values(node.memPool).map((transaction) => client_common_1.JSONHelper.writeUInt256(transaction.hash)),\n        [RPC_METHODS.getrawtransaction]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            let transaction = node.memPool[client_common_1.common.uInt256ToHex(hash)];\n            if (transaction === undefined) {\n                transaction = await blockchain.transaction.tryGet({ hash });\n            }\n            if (transaction === undefined) {\n                throw new JSONRPCError(-100, 'Unknown transaction');\n            }\n            if (args[1] === true || args[1] === 1) {\n                return transaction.serializeJSON(blockchain.serializeJSONContext);\n            }\n            return transaction.serializeWire().toString('hex');\n        },\n        [RPC_METHODS.getstorage]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const key = Buffer.from(args[1], 'hex');\n            const item = await blockchain.storageItem.tryGet({ hash, key });\n            return item === undefined ? undefined : item.value.toString('hex');\n        },\n        [RPC_METHODS.gettxout]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            const [output, spentCoins] = await Promise.all([\n                blockchain.output.tryGet({ hash, index }),\n                blockchain.transactionData.tryGet({ hash }),\n            ]);\n            if (spentCoins !== undefined && spentCoins.endHeights[index] !== undefined) {\n                return undefined;\n            }\n            return output === undefined ? undefined : output.serializeJSON(blockchain.serializeJSONContext, index);\n        },\n        [RPC_METHODS.invoke]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.invokefunction]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.invokescript]: async (args) => {\n            const script = client_common_1.JSONHelper.readBuffer(args[0]);\n            const receipt = await blockchain.invokeScript(script);\n            return {\n                result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n                actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n            };\n        },\n        [RPC_METHODS.sendrawtransaction]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            try {\n                await node.relayTransaction(transaction, { throwVerifyError: true, forceAdd: true });\n                return true;\n            }\n            catch (_a) {\n                return false;\n            }\n        },\n        [RPC_METHODS.submitblock]: async () => {\n            throw new JSONRPCError(-101, 'Not implemented');\n        },\n        [RPC_METHODS.validateaddress]: async (args) => {\n            let scriptHash;\n            try {\n                scriptHash = client_common_1.crypto.addressToScriptHash({\n                    addressVersion: blockchain.settings.addressVersion,\n                    address: args[0],\n                });\n            }\n            catch (_a) {\n            }\n            return { address: args[0], isvalid: scriptHash !== undefined };\n        },\n        [RPC_METHODS.getpeers]: async () => ({\n            connected: node.connectedPeers.map((endpoint) => {\n                const { host, port } = node_core_1.getEndpointConfig(endpoint);\n                return { address: host, port };\n            }),\n        }),\n        [RPC_METHODS.relaytransaction]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            try {\n                const [transactionJSON, result] = await Promise.all([\n                    transaction.serializeJSON(blockchain.serializeJSONContext),\n                    node.relayTransaction(transaction, { forceAdd: true, throwVerifyError: true }),\n                ]);\n                const resultJSON = result.verifyResult === undefined\n                    ? {}\n                    : {\n                        verifyResult: {\n                            verifications: result.verifyResult.verifications.map((verification) => ({\n                                hash: client_common_1.JSONHelper.writeUInt160(verification.hash),\n                                witness: verification.witness.serializeJSON(blockchain.serializeJSONContext),\n                                actions: verification.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                                failureMessage: verification.failureMessage,\n                            })),\n                        },\n                    };\n                return Object.assign(Object.assign({}, resultJSON), { transaction: transactionJSON });\n            }\n            catch (error) {\n                throw new JSONRPCError(-110, `Relay transaction failed: ${error.message}`);\n            }\n        },\n        [RPC_METHODS.getoutput]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            const output = await blockchain.output.tryGet({ hash, index });\n            if (output === undefined) {\n                throw new JSONRPCError(-100, 'Unknown output');\n            }\n            return output.serializeJSON(blockchain.serializeJSONContext, index);\n        },\n        [RPC_METHODS.getclaimamount]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt256(args[0]);\n            const index = args[1];\n            try {\n                const value = await blockchain.calculateClaimAmount([\n                    new node_core_1.Input({\n                        hash,\n                        index,\n                    }),\n                ]);\n                return client_common_1.common.fixed8ToDecimal(value).toString();\n            }\n            catch (error) {\n                throw new JSONRPCError(-102, error.message);\n            }\n        },\n        [RPC_METHODS.getallstorage]: async (args) => {\n            const hash = client_common_1.JSONHelper.readUInt160(args[0]);\n            const items = await blockchain.storageItem.getAll$({ hash }).pipe(operators_1.toArray()).toPromise();\n            return items.map((item) => item.serializeJSON(blockchain.serializeJSONContext));\n        },\n        [RPC_METHODS.testinvocation]: async (args) => {\n            const transaction = node_core_1.deserializeTransactionWire({\n                context: blockchain.deserializeWireContext,\n                buffer: client_common_1.JSONHelper.readBuffer(args[0]),\n            });\n            if (transaction instanceof node_core_1.InvocationTransaction) {\n                const receipt = await blockchain.invokeTransaction(transaction);\n                return {\n                    result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n                    actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n                };\n            }\n            throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n        },\n        [RPC_METHODS.gettransactionreceipt]: async (args) => {\n            const transactionData = await blockchain.transactionData.tryGet({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            let watchTimeoutMS;\n            if (args[1] !== undefined && typeof args[1] === 'number') {\n                watchTimeoutMS = args[1];\n            }\n            let result;\n            if (transactionData === undefined) {\n                if (watchTimeoutMS === undefined) {\n                    throw new JSONRPCError(-100, 'Unknown transaction');\n                }\n                try {\n                    result = await blockchain.block$\n                        .pipe(operators_1.switchMap(async () => {\n                        const data = await blockchain.transactionData.tryGet({\n                            hash: client_common_1.JSONHelper.readUInt256(args[0]),\n                        });\n                        return data === undefined ? undefined : getTransactionReceipt(data);\n                    }), operators_1.filter((receipt) => receipt !== undefined), operators_1.take(1), operators_1.timeout(new Date(Date.now() + watchTimeoutMS)))\n                        .toPromise();\n                }\n                catch (_a) {\n                    throw new JSONRPCError(-100, 'Unknown transaction');\n                }\n            }\n            else {\n                result = getTransactionReceipt(transactionData);\n            }\n            return result;\n        },\n        [RPC_METHODS.getinvocationdata]: async (args) => {\n            const transaction = await blockchain.transaction.get({\n                hash: client_common_1.JSONHelper.readUInt256(args[0]),\n            });\n            const result = await transaction.serializeJSON(blockchain.serializeJSONContext);\n            if (result.type !== 'InvocationTransaction' || result.invocationData === undefined) {\n                throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n            }\n            return result.invocationData;\n        },\n        [RPC_METHODS.getvalidators]: async () => {\n            const validators = await blockchain.validator.all$.pipe(operators_1.toArray()).toPromise();\n            return validators.map((validator) => validator.serializeJSON(blockchain.serializeJSONContext));\n        },\n        [RPC_METHODS.getnetworksettings]: async () => {\n            const fee = blockchain.settings.fees[node_core_1.TransactionType.Issue];\n            const issueGASFee = client_common_1.common.fixed8ToDecimal(fee === undefined ? client_common_1.utils.ZERO : fee);\n            return {\n                issueGASFee: issueGASFee.toString(),\n            };\n        },\n        [RPC_METHODS.runconsensusnow]: async () => {\n            if (node.consensus) {\n                await node.consensus.runConsensusNow();\n            }\n            else {\n                throw new Error('This node does not support triggering consensus.');\n            }\n            return true;\n        },\n        [RPC_METHODS.updatesettings]: async (args) => {\n            const { settings } = blockchain;\n            const newSettings = Object.assign(Object.assign({}, settings), { secondsPerBlock: args[0].secondsPerBlock });\n            blockchain.updateSettings(newSettings);\n            return true;\n        },\n        [RPC_METHODS.getsettings]: async () => ({\n            secondsPerBlock: blockchain.settings.secondsPerBlock,\n        }),\n        [RPC_METHODS.fastforwardoffset]: async (args) => {\n            if (node.consensus) {\n                await node.consensus.fastForwardOffset(args[0]);\n            }\n            else {\n                throw new Error('This node does not support fast forwarding.');\n            }\n            return true;\n        },\n        [RPC_METHODS.fastforwardtotime]: async (args) => {\n            if (node.consensus !== undefined) {\n                await node.consensus.fastForwardToTime(args[0]);\n            }\n            else {\n                throw new Error('This node does not support fast forwarding.');\n            }\n            return true;\n        },\n        [RPC_METHODS.reset]: async () => {\n            if (node.consensus !== undefined) {\n                await node.consensus.pause();\n                await node.consensus.reset();\n            }\n            await node.reset();\n            await blockchain.reset();\n            if (node.consensus !== undefined) {\n                await node.consensus.resume();\n            }\n            return true;\n        },\n        [RPC_METHODS.getneotrackerurl]: async () => handleGetNEOTrackerURL(),\n        [RPC_METHODS.resetproject]: async () => {\n            await handleResetProject();\n            return true;\n        },\n    };\n    return createJSONRPCHandler(handlers);\n};\n\n//# sourceMappingURL=createHandler.js.map\n","import {\n  DeveloperClient,\n  JSONRPCProvider,\n  JSONRPCRequest,\n  JSONRPCResponse,\n  NEOONEDataProvider,\n} from '@neo-one/client-core';\nimport { constants } from '@neo-one/utils';\nimport { FullNode, FullNodeOptions } from './FullNode';\n\n// tslint:disable-next-line no-let\nlet startPromise: Promise<FullNode> | undefined;\nconst start = async (options: FullNodeOptions, provider: JSONRPCLocalProvider, build: () => Promise<void>) => {\n  if (startPromise === undefined) {\n    const node = new FullNode(\n      options,\n      new DeveloperClient(new NEOONEDataProvider({ network: constants.LOCAL_NETWORK_NAME, rpcURL: provider })),\n      build,\n    );\n    startPromise = node.start().then(() => node);\n  }\n\n  return startPromise;\n};\n\nconst handleRequest = async (\n  options: FullNodeOptions,\n  provider: JSONRPCLocalProvider,\n  build: () => Promise<void>,\n  req: JSONRPCRequest,\n) => {\n  const node = await start(options, provider, build);\n  const { watchTimeoutMS, params = [] } = req;\n\n  return node.handleRequest({\n    jsonrpc: '2.0',\n    id: 1,\n    method: req.method,\n    params: watchTimeoutMS === undefined ? params : params.concat([watchTimeoutMS]),\n  });\n};\n\nexport interface JSONRPCLocalProviderOptions {\n  readonly options: FullNodeOptions;\n  readonly build: () => Promise<void>;\n}\n\nexport class JSONRPCLocalProvider extends JSONRPCProvider {\n  public constructor(private readonly options: JSONRPCLocalProviderOptions) {\n    super();\n  }\n\n  public async request(req: JSONRPCRequest): Promise<JSONRPCResponse> {\n    // Something weird with comlink causes the property to be wrapped in a function, so we do this as a workaround.\n    const options = await this.getOptions();\n    const response = await handleRequest(options.options, this, options.build, req);\n\n    return this.handleResponse(response);\n  }\n\n  private async getOptions(): Promise<JSONRPCLocalProviderOptions> {\n    return this.options;\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addTransaction = exports.incrementExpectedView = exports.initializeConsensusInitial = exports.checkExpectedView = exports.signAndRelayChangeView = exports.checkSignatures = exports.initializeConsensus = exports.initializeNewConsensus = exports.getInitialContextAdd = exports.signAndRelay = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst utils_1 = require(\"@neo-one/utils\");\nconst lodash_1 = tslib_1.__importDefault(require(\"lodash\"));\nconst context_1 = require(\"./context\");\nexports.signAndRelay = ({ node, privateKey, context, consensusMessage, }) => {\n    const payload = node_core_1.ConsensusPayload.sign(new node_core_1.UnsignedConsensusPayload({\n        version: context.version,\n        previousHash: context.previousHash,\n        blockIndex: context.blockIndex,\n        validatorIndex: context.myIndex,\n        consensusMessage,\n    }), privateKey);\n    node.relayConsensusPayload(payload);\n};\nexports.getInitialContextAdd = ({ blockchain, publicKey, validators, blockReceivedTimeSeconds, }) => {\n    const blockIndex = blockchain.currentBlock.index + 1;\n    const primaryIndex = blockIndex % validators.length;\n    const myIndex = lodash_1.default.findIndex(validators, (validator) => client_common_1.common.ecPointEqual(validator, publicKey));\n    return {\n        type: primaryIndex === myIndex ? 'primary' : 'backup',\n        previousHash: blockchain.currentBlock.hash,\n        blockIndex,\n        viewNumber: 0,\n        myIndex,\n        primaryIndex,\n        expectedView: lodash_1.default.range(0, validators.length).map(() => 0),\n        validators,\n        blockReceivedTimeSeconds,\n    };\n};\nfunction initializeConsensusCommon({ context, blockchain, consensusContext, }) {\n    if (context.myIndex < 0) {\n        return { context };\n    }\n    if (context.type === 'primary') {\n        return {\n            context,\n            timerSeconds: Math.max(0, blockchain.settings.secondsPerBlock - (consensusContext.nowSeconds() - context.blockReceivedTimeSeconds)),\n        };\n    }\n    const { secondsPerBlock } = blockchain.settings;\n    return {\n        context,\n        timerSeconds: secondsPerBlock << (context.viewNumber + 1),\n    };\n}\nexports.initializeNewConsensus = async ({ blockchain, publicKey, consensusContext, }) => {\n    const validators = await blockchain.getValidators([]);\n    const blockReceivedTimeSeconds = blockchain.currentBlock.timestamp;\n    const blockIndex = blockchain.currentBlock.index + 1;\n    const primaryIndex = blockIndex % validators.length;\n    const myIndex = lodash_1.default.findIndex(validators, (validator) => client_common_1.common.ecPointEqual(validator, publicKey));\n    const context = new context_1.InitialContext({\n        type: primaryIndex === myIndex ? 'primary' : 'backup',\n        previousHash: blockchain.currentBlock.hash,\n        blockIndex,\n        viewNumber: 0,\n        myIndex,\n        primaryIndex,\n        expectedView: lodash_1.default.range(0, validators.length).map(() => 0),\n        validators,\n        blockReceivedTimeSeconds,\n    });\n    return initializeConsensusCommon({ context, blockchain, consensusContext });\n};\nconst getPrimaryIndexType = ({ context, viewNumber, }) => {\n    let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n    if (primaryIndex < 0) {\n        primaryIndex += context.validators.length;\n    }\n    return {\n        type: primaryIndex === context.myIndex ? 'primary' : 'backup',\n        primaryIndex,\n    };\n};\nexports.initializeConsensus = ({ node, context: contextIn, viewNumber, consensusContext, }) => {\n    if (viewNumber <= 0) {\n        throw new Error('Programming error');\n    }\n    const { blockchain } = node;\n    let context = contextIn;\n    let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n    if (primaryIndex < 0) {\n        primaryIndex += context.validators.length;\n    }\n    const type = primaryIndex === context.myIndex ? 'primary' : 'backup';\n    context =\n        type === 'primary' && context instanceof context_1.SignatureSentContext\n            ? context.clone({ type, primaryIndex, viewNumber })\n            : context_1.cloneInitial(context, { type, primaryIndex, viewNumber });\n    return initializeConsensusCommon({ blockchain, context, consensusContext });\n};\nasync function checkSignatures({ node, context, }) {\n    const signaturesLength = context.signatures.filter((p) => p !== undefined).length;\n    if (signaturesLength >= context.M &&\n        context.transactionHashes.every((hash) => context.transactions[hash] !== undefined)) {\n        const mutablePublicKeyToSignature = {};\n        for (let i = 0, j = 0; i < context.validators.length && j < context.M; i += 1) {\n            const validator = context.validators[i];\n            const signature = context.signatures[i];\n            if (signature !== undefined) {\n                mutablePublicKeyToSignature[client_common_1.common.ecPointToHex(validator)] = signature;\n                j += 1;\n            }\n        }\n        const script = client_common_1.crypto.createMultiSignatureWitness(context.M, context.validators, mutablePublicKeyToSignature, node_core_1.Witness);\n        const block = context.header.clone({\n            transactions: context.transactionHashes.map((hash) => context.transactions[hash]).filter(utils_1.utils.notNull),\n            script,\n        });\n        await node.relayBlock(block);\n        return { context: context_1.cloneBlockSent(context) };\n    }\n    return { context };\n}\nexports.checkSignatures = checkSignatures;\nexports.signAndRelayChangeView = ({ node, privateKey, context, }) => {\n    exports.signAndRelay({\n        node,\n        privateKey,\n        context,\n        consensusMessage: new node_core_1.ChangeViewConsensusMessage({\n            viewNumber: context.viewNumber,\n            newViewNumber: context.expectedView[context.myIndex],\n        }),\n    });\n};\nexports.checkExpectedView = ({ context, viewNumber, }) => context.viewNumber !== viewNumber && context.expectedView.filter((p) => p === viewNumber).length >= context.M;\nexports.initializeConsensusInitial = ({ blockchain, context, viewNumber, consensusContext, }) => {\n    const { primaryIndex, type } = getPrimaryIndexType({ context, viewNumber });\n    return initializeConsensusCommon({\n        blockchain,\n        context: context_1.cloneInitial(context, { type, primaryIndex, viewNumber }),\n        consensusContext,\n    });\n};\nexports.incrementExpectedView = (context) => {\n    const mutableExpectedView = [...context.expectedView];\n    mutableExpectedView[context.myIndex] += 1;\n    return mutableExpectedView;\n};\nconst requestChangeViewBackup = ({ context: contextIn, node, privateKey, consensusContext, }) => {\n    const context = contextIn.cloneViewChanging({\n        expectedView: exports.incrementExpectedView(contextIn),\n    });\n    exports.signAndRelayChangeView({ context, node, privateKey });\n    const viewNumber = context.expectedView[context.myIndex];\n    if (exports.checkExpectedView({ context, viewNumber })) {\n        return exports.initializeConsensusInitial({\n            blockchain: node.blockchain,\n            context,\n            viewNumber,\n            consensusContext,\n        });\n    }\n    return { context };\n};\nexports.addTransaction = async ({ context: contextIn, node, privateKey, transaction, verify, consensusContext, }) => {\n    let context = contextIn;\n    const { blockchain } = node;\n    const tx = await blockchain.transaction.tryGet({ hash: transaction.hash });\n    if (tx !== undefined) {\n        return { context };\n    }\n    if (verify) {\n        let verified = true;\n        try {\n            const { verifications } = await blockchain.verifyTransaction({\n                transaction,\n                memPool: Object.values(context.transactions).filter(utils_1.utils.notNull),\n            });\n            verified = verifications.every(({ failureMessage }) => failureMessage === undefined);\n        }\n        catch (_a) {\n            verified = false;\n        }\n        if (!verified) {\n            return { context };\n        }\n    }\n    context = context.clone({\n        transactions: Object.assign(Object.assign({}, context.transactions), { [transaction.hashHex]: transaction }),\n    });\n    const transactionsLength = Object.values(context.transactions).length;\n    if (context.transactionHashes.length === transactionsLength) {\n        const validators = await blockchain.getValidators(Object.values(context.transactions).filter(utils_1.utils.notNull));\n        const consensusAddress = client_common_1.crypto.getConsensusAddress(validators);\n        if (client_common_1.common.uInt160Equal(consensusAddress, context.header.nextConsensus)) {\n            const mutableSignatures = [...context.signatures];\n            mutableSignatures[context.myIndex] = client_common_1.crypto.sign({\n                message: context.header.message,\n                privateKey,\n            });\n            const newContext = context.cloneSignatureSent({ signatures: mutableSignatures });\n            exports.signAndRelay({\n                node,\n                context: newContext,\n                privateKey,\n                consensusMessage: new node_core_1.PrepareResponseConsensusMessage({\n                    viewNumber: newContext.viewNumber,\n                    signature: utils_1.utils.nullthrows(mutableSignatures[newContext.myIndex]),\n                }),\n            });\n            return checkSignatures({ node, context: newContext });\n        }\n        return requestChangeViewBackup({\n            context,\n            node,\n            privateKey,\n            consensusContext,\n        });\n    }\n    return { context };\n};\n\n//# sourceMappingURL=common.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nclass Context {\n    constructor({ type, previousHash, blockIndex, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, }) {\n        this.version = 0;\n        this.type = type;\n        this.previousHash = previousHash;\n        this.blockIndex = blockIndex;\n        this.viewNumber = viewNumber;\n        this.myIndex = myIndex;\n        this.primaryIndex = primaryIndex;\n        this.expectedView = expectedView;\n        this.validators = validators;\n        this.blockReceivedTimeSeconds = blockReceivedTimeSeconds;\n    }\n    get M() {\n        return Math.floor(this.validators.length - (this.validators.length - 1) / 3);\n    }\n    cloneExpectedView(_options) {\n        throw new Error('Not Implemented');\n    }\n    toJSON() {\n        return {\n            class: this.constructor.name,\n            version: this.version,\n            type: this.type,\n            previousHash: client_common_1.common.uInt256ToString(this.previousHash),\n            blockIndex: this.blockIndex,\n            viewNumber: this.viewNumber,\n            myIndex: this.myIndex,\n            primaryIndex: this.primaryIndex,\n            expectedView: [...this.expectedView],\n            validators: this.validators.map((validator) => client_common_1.common.ecPointToString(validator)),\n            blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n        };\n    }\n}\nexports.Context = Context;\n\n//# sourceMappingURL=Context.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./loggers\"), exports);\ntslib_1.__exportStar(require(\"./types\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Context\"), exports);\ntslib_1.__exportStar(require(\"./BlockSentContext\"), exports);\ntslib_1.__exportStar(require(\"./HeaderContext\"), exports);\ntslib_1.__exportStar(require(\"./InitialContext\"), exports);\ntslib_1.__exportStar(require(\"./RequestReceivedContext\"), exports);\ntslib_1.__exportStar(require(\"./RequestSentContext\"), exports);\ntslib_1.__exportStar(require(\"./SignatureSentContext\"), exports);\ntslib_1.__exportStar(require(\"./ViewChangingContext\"), exports);\ntslib_1.__exportStar(require(\"./types\"), exports);\ntslib_1.__exportStar(require(\"./cloneBlockSent\"), exports);\ntslib_1.__exportStar(require(\"./cloneInitial\"), exports);\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeaderContext = void 0;\nconst client_common_1 = require(\"@neo-one/client-common\");\nconst node_core_1 = require(\"@neo-one/node-core\");\nconst Context_1 = require(\"./Context\");\nclass HeaderContext extends Context_1.Context {\n    constructor({ type, viewNumber, myIndex, primaryIndex, expectedView, validators, blockReceivedTimeSeconds, transactions, signatures, header, }) {\n        const previousHash = header.type === 'existing' ? header.block.previousHash : header.previousHash;\n        const transactionHashes = header.transactionHashes;\n        const blockIndex = header.type === 'existing' ? header.block.index : header.blockIndex;\n        const nonce = header.type === 'existing' ? header.block.consensusData : header.nonce;\n        const timestamp = header.type === 'existing' ? header.block.timestamp : header.timestamp;\n        const nextConsensus = header.type === 'existing' ? header.block.nextConsensus : header.nextConsensus;\n        super({\n            type,\n            previousHash,\n            blockIndex,\n            viewNumber,\n            myIndex,\n            primaryIndex,\n            expectedView,\n            validators,\n            blockReceivedTimeSeconds,\n        });\n        this.transactions = transactions;\n        this.transactionHashes = transactionHashes;\n        this.transactionHashesSet = new Set(transactionHashes);\n        this.signatures = signatures;\n        if (header.type === 'existing') {\n            this.header = header.block;\n        }\n        else {\n            this.header = new node_core_1.Block({\n                version: this.version,\n                previousHash: this.previousHash,\n                merkleRoot: node_core_1.MerkleTree.computeRoot(this.transactionHashes.map((hash) => client_common_1.common.hexToUInt256(hash))),\n                timestamp,\n                index: this.blockIndex,\n                consensusData: nonce,\n                nextConsensus,\n                transactions: [],\n            });\n        }\n    }\n    cloneSignatures(_options) {\n        throw new Error('Not Implemented');\n    }\n    toJSON() {\n        return Object.assign(Object.assign({}, super.toJSON()), { transactionHashes: this.transactionHashes.map((hash) => client_common_1.common.uInt256ToString(hash)), signatures: this.signatures.map((signature) => signature === undefined ? 'undefined' : signature.toString('hex')) });\n    }\n}\nexports.HeaderContext = HeaderContext;\n\n//# sourceMappingURL=HeaderContext.js.map\n"],"sourceRoot":""}